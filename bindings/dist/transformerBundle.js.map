{"version":3,"sources":["webpack://transformer/webpack/universalModuleDefinition","webpack://transformer/webpack/bootstrap","webpack://transformer/../node_modules/long/src/long.js","webpack://transformer/../node_modules/webpack/buildin/global.js","webpack://transformer/../src/ast.ts","webpack://transformer/../src/common.ts","webpack://transformer/../src/diagnosticMessages.generated.ts","webpack://transformer/../src/diagnostics.ts","webpack://transformer/../src/glue/js/float.js","webpack://transformer/../src/glue/js/i64.js","webpack://transformer/../src/tokenizer.ts","webpack://transformer/../src/util/binary.ts","webpack://transformer/../src/util/bitset.ts","webpack://transformer/../src/util/charcode.ts","webpack://transformer/../src/util/collections.ts","webpack://transformer/../src/util/index.ts","webpack://transformer/../src/util/path.ts","webpack://transformer/../src/util/text.ts","webpack://transformer/../std/assembly/shared/feature.ts","webpack://transformer/../std/assembly/shared/target.ts","webpack://transformer/../std/assembly/shared/typeinfo.ts","webpack://transformer/./src/base.ts","webpack://transformer/./src/index.ts","webpack://transformer/./src/preamble.ts","webpack://transformer/./src/sourceBuilder.ts","webpack://transformer/./src/visitor.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA,qDAAqD,cAAc;;AAEnE;AACA;AACA,WAAW,EAAE;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa;AACb;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA,uBAAuB;;AAEvB;AACA,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,sBAAsB,8CAA8C;AAC/E,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,sBAAsB,8CAA8C;AAC/E,WAAW,SAAS;AACpB,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,gEAAgE,kBAAkB;AAClF,aAAa;AACb;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2EAA2E,kBAAkB;AAC7F;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,iFAAiF,qBAAqB;AACtG;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA,iFAAiF,qBAAqB;AACtG;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,iFAAiF,oBAAoB;AACrG;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,0FAA0F,2BAA2B;AACrH;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA,0FAA0F,2BAA2B;AACrH;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,oFAAoF,uBAAuB;AAC3G;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,6FAA6F,8BAA8B;AAC3H;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA,6FAA6F,8BAA8B;AAC3H;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yEAAyE,mBAAmB;AAC5F;AACA,WAAW,oBAAoB;AAC/B,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mDAAmD,kBAAkB;AACrE;AACA,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+EAA+E,oBAAoB;AACnG;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4EAA4E,oBAAoB;AAChG;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,mBAAmB;AAC1E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oEAAoE,kBAAkB;AACtF;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gEAAgE,kBAAkB;AAClF;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;;AAEA;AACA,gEAAgE,kBAAkB;AAClF;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6FAA6F,qBAAqB;AAClH;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6GAA6G,sBAAsB;AACnI;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA,wGAAwG,8BAA8B;AACtI;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA,wGAAwG,8BAA8B;AACtI;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,SAAS;AACpB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,SAAS;AACpB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1yCA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;;;;;;ACnBa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D,eAAe,mBAAO,CAAC,kCAAU;AACjC,kBAAkB,mBAAO,CAAC,wCAAa;AACvC;AACA;AACA,aAAa,mBAAO,CAAC,oCAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,uDAAuD;AACxkCAAkC,kBAAkB;AACpD;AACA;AACA,yBAAyB;AACzkBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,cAAc;AACdqCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,iEAAiE,OAAO;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,OAAO;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sEAAsE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,oCAAoC;AACtF;AACA,qDAAqD,iCAAiC;AACtF;AACA,mDAAmD,oBAAoB;AACvE;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sEAAsE;AACvE;AACA,4EAA4E,2BAA2B;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sEAAsE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gEAAgE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gEAAgE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sEAAsE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,6DAA6D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,oCAAoC;AAC7F;AACA,4DAA4D,iCAAiC;AAC7F;AACA,0DAA0D,oBAAoB;AAC9E;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,mDAAmD,sBAAsB;AACziDAAiD,wBAAwB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,8CAA8C,0BAA0B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,8CAA8C,OAAO;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,un6H;;;;;;;;;;;;AC5yD9B;AACb;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,2BAA2B,WAAW,KAAK,cAAc;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gEAAgE;AACjsEAAsE;AACvE;AACA,gBAAgB,mBAAO,CAAC,yEAAgC;AACxD;AACA,eAAe,mBAAO,CAAC,uEAA+B;AACtD;AACA,iBAAiB,mBAAO,CAAC,2EAAiC;AAC1D;AACA;AACA,2CAA2C,2mgB;;;;;;;;;;;;ACxN9B;AACb;AACA;AACA;AACA;AACA,8CAA8C,cAAcyEAAyE;AAC1E;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C,iDAAiD,EAAE,OAAO,EAAE;AAC5D,iDAAiD,EAAE,OAAO,EAAE;AAC5D,iCAAiC,EAAE,8BAA8B,EAAE;AACnE,iCAAiC,EAAE,oCAAoC,EAAE;AACzE,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAE,6BAA6B,EAAE;AAC5E,kCAAkC,EAAE;AACpC,sCAAsC,EAAE;AACxC;AACA,gEAAgE,EAAE;AAClE;AACA,iDAAiD,EAAE;AACnD,qCAAqC,EAAE;AACvC,iDAAiD,EAAE;AACnD;AACA;AACA;AACA,4BAA4B,EAAE,4BAA4B,EAAE,QAAQ,EAAE;AACtE,4BAA4B,EAAE;AAC9B;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,EAAE;AACtC;AACA;AACA;AACA,kDAAkD,EAAE;AACpD,8CAA8C,EAAE;AAChD,oCAAoC,EAAE,2BAA2B,EAAE;AACnE,0CAA0C,EAAE,YAAY,EAAE;AAC1D,kCAAkC,EAAE;AACpC,kCAAkC,EAAE,8BAA8B,EAAE;AACpE,gEAAgE,EAAE;AAClE;AACA;AACA;AACA,sCAAsC,EAAE,2BAA2B,EAAE;AACrE,iGAAiG,EAAE;AACnG;AACA;AACA;AACA;AACA,sCAAsC,EAAE,+BAA+B,EAAE,QAAQ,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,EAAE;AAC7E;AACA,kCAAkC,EAAE,oBAAoB,EAAE;AAC1D,iCAAiC,EAAE,uCAAuC,EAAE;AAC5E;AACA,uFAAuF,EAAE;AACzF;AACA,8CAA8C,EAAE;AAChD;AACA,qDAAqD,EAAE;AACvD,qCAAqC,EAAE,qBAAqB,EAAE;AAC9D,8CAA8C,EAAE,qBAAqB,EAAE;AACvE,qCAAqC,EAAE,0BAA0B,EAAE;AACnE;AACA,kDAAkD,EAAE;AACpD,kDAAkD,EAAE;AACpD,uCAAuC,EAAE,2BAA2B,EAAE;AACtE;AACA,gDAAgD,EAAE;AAClD,kCAAkC,EAAE;AACpC,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,m5mC;;;;;;;;;;;;AChS9B;AACb;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,qCAAqC,mBAAO,CAAC,8EAAgC;AAC7E,aAAa,mBAAO,CAAC,oCAAQ;AAC7B,qCAAqC,mBAAO,CAAC,8EAAgC;AAC7E;AACA;AACA,iCAAiC,wBAAwB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,qFAAqF;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C;AACA;AACA,wCAAwC,EAAE;AAC1C;AACA,wCAAwC,EAAE;AAC1C;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD,iCAAiC,qBAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,CAAC;AACD;AACA,2CAA2C,ujzB;;;;;;;;;;;AC/R3C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA,0EAA4B,mBAAO,CAAC,8CAAM;;AAE1C;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;AC/Ia;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D,oBAAoB,mBAAO,CAAC,4CAAe;AAC3C,YAAY,mBAAO,CAAC,4BAAO;AAC3B,aAAa,mBAAO,CAAC,oCAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C;AAC/C;AACA;AACA;AACA;AACA;AACA,CAAC,qFAAqF;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,sCAAsC,UAAU;AAChD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,0CAA0C,UAAU;AACpD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,sCAAsC,YAAY;AAClD;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iDAAiD;AAC7F;AACA;AACA;AACA;AACA,4CAA4C,iDAAiD;AAC7F,wCAAwC,gCAAgC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvgDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,wBAAwB;AAChE,4CAA4C,iDAAiD;AAC7F,2CAA2C,mCAAmC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,WAAW;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gDAAgD;AAC5F;AACA;AACA;AACA,4CAA4C,iDAAiD;AAC7F;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,OAAO;AACnE;AACA,gDAAgD;AAChoCAAoC,qBAAqB,kBAAkB,sBAAsB;AACjG;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,2CAA2C,mopH;;;;;;;;;;;;ACp7C9B;AACb;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2hN;;;;;;;;;;;;AC5E9B;AACb;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2kE;;;;;;;;;;;;ACjB9B;AACb;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,uDAAuD;AACxmi/C;;;;;;;;;;;;AChX9B;AACb;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM,gBAAgB;AACzC;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA,8BAA8B,iBAAiB;AAC/C;AACA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA;AACA;AACA,uFAAuF,oBAAoB;AAC3G;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA,uFAAuF,oBAAoB;AAC3G;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA,+FAA+F,qBAAqB;AACpH;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,gBAAgB;AACnD;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA,2FAA2F,qBAAqB;AAChH;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA,2CAA2C,+rG;;;;;;;;;;;;ACnH9B;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,uCAAU;AAC3B,SAAS,mBAAO,CAAC,2CAAY;AAC7B,SAAS,mBAAO,CAAC,iDAAe;AAChC,SAAS,mBAAO,CAAC,mCAAQ;AACzB,SAAS,mBAAO,CAAC,mCAAQ;AACzB,SAAS,mBAAO,CAAC,uCAAU;AAC3B;AACA;AACA;AACA;AACA;AACA,2CAA2C,2hC;;;;;;;;;;;;ACrB9B;AACb;AACA,8CAA8C,cAAc;AAC5D,eAAe,mBAAO,CAAC,mCAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mtR;;;;;;;;;;;;ACzG9B;AACb;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+1C;;;;;;;;;;;;ACrB9B;AACb;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE,CAAC,oDAAoD;AACrD,2CAA2C,m8E;;;;;;;;;;;;AC3B9B;AACb;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,iDAAiD;AAClD,2CAA2C,+2B;;;;;;;;;;;;ACb9B;AACb;AACA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,QAAS;AACjB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sEAAsE;AACvE,2CAA2C,2uL;;;;;;;;;;;;AClF9B;AACb;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,YAAY,mBAAO,CAAC,oCAAe;AACnC,gBAAgB,mBAAO,CAAC,mCAAW;AACnoEAAoE,UAAU;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,UAAU;AAC9E;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA,2EAA2E;AAC3E,6EAA6E;AAC7E,0EAA0E;AAC1E,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE,kEAAkE;AAClE,iEAAiE;AACjE,iEAAiE;AACjE,iEAAiE;AACjE,wEAAwE;AACxE,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjgEAAgE;AAChE,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,2CAA2C,2tgD;;;;;;;;;;;;ACpnB9B;AACb;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D;AACA,YAAY,mBAAO,CAAC,oCAAe;AACnC,eAAe,mBAAO,CAAC,0CAAkB;AACzC,sBAAsB,mBAAO,CAAC,+CAAiB;AAC/C,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,iBAAiB,mBAAO,CAAC,qCAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,+BAA+B,EAAE;AACtH;AACA;AACA,+EAA+E;AAC/E;AACA,gEAAgE,mCAAmC,oCAAoC,cAAc,KAAK,+CAA+C,yCAAyC,sCAAsC;AACxR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qCAAqC,EAAE;AAC9E;AACA;AACA,0CAA0C;AAC1C;AACA,8DAA8D,wBAAwB,yGAAyG,4BAA4B,gCAAgC,KAAK,OAAO,8FAA8F,KAAK,oDAAoD;AAC9Z;AACA,uBAAuB,YAAY,yCAAyC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,kFAAkF,cAAc,EAAE;AAClG,kDAAkD,2BAA2B,EAAE;AAC/E;AACA;AACA;AACA,gFAAgF,mDAAmD,4EAA4E,KAAK,yDAAyD,oBAAoB,sCAAsC,+BAA+B,OAAO,MAAM,mFAAmF,yBAAyB,OAAO,gCAAgC,KAAK,oDAAoD,6EAA6E,KAAK,6FAA6F,uEAAuE,+BAA+B,qFAAqF,qBAAqB,KAAK,4BAA4B,wCAAwC,KAAK,+BAA+B,2BAA2B,KAAK,wBAAwB,uCAAuC,KAAK,GAAG;AAClpC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,wHAAwH;AACxH,KAAK;AACL;AACA;AACA,kCAAkC,mBAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,qDAAqD,EAAE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,2BAA2B,EAAE;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,2CAA2C,uluB;;;;;;;;;;;;AC3N9B;AACb,8CAA8C,cAAc;AAC5D,4BAA4B,SAAS,0BAA0B,UAAU,cAAc,8BAA8B,UAAU,iDAAiD,8BAA8B;AAC9M,2CAA2C,+gB;;;;;;;;;;;;ACH3C,8CAAa;AACb,8CAA8C,cAAc;AAC5D,YAAY,mBAAO,CAAC,oCAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,2BAA2B,EAAE;AACvE,gBAAgB,qDAAqD;AACrE,kBAAkB,qDAAqD;AACvE,kBAAkB,qDAAqD;AACvE,yBAAyB,sDAAsD;AAC/E,yBAAyB,oCAAoC;AAC7D,yBAAyB;AACzB,CAAC;AACD;AACA;AACA;AACA,0CAA0C,eAAe,EAAE;AAC3D,gBAAgB,iDAAiD;AACjE,kBAAkB,iCAAiC;AACnD,kBAAkB,kDAAkD;AACpE,yBAAyB,kDAAkD;AAC3E,yBAAyB,4CAA4C;AACrE,yBAAyB;AACzB,CAAC;AACD,mBAAO,CAAC,wDAAyB;AACjC,mBAAO,CAAC,oDAAuB;AAC/B,eAAe,mBAAO,CAAC,0CAAkB;AACzC,cAAc,mBAAO,CAAC,kDAAsB;AAC5C,kBAAkB,mBAAO,CAAC,gDAAqrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sBAAsB;AAC5D;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvsBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wBAAwB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,yCAAyC,OAAO;AAChD;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,8CAA8C,OAAO;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,wBAAwB;AACxB;AACA;AACA,2DAA2D,OAAO;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC,yDAAyD,OAAO;AAChE;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,2CAA2C,mk8H;;;;;;;;;;;;;AC7gD9B;AACb;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM,gBAAgB;AACzC;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,yDAAyD;AACzD;AACA,CAAC;AACD;AACA;AACA;AACA,gCAAgC,8BAA8B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mBAAmB,EAAE;AAC3D;AACA;AACA;AACA,uEAAuE,UAAU;AACjF;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,gBAAgB;AACnD;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,gBAAgB;AAC3F;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,gBAAgB;AACnD;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,2CAA2C,m0H","file":"transformerBundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"transformer\"] = factory();\n\telse\n\t\troot[\"transformer\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","\"use strict\";\n/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n */ /***/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = require(\"./common\");\nvar tokenizer_1 = require(\"./tokenizer\");\nexports.Token = tokenizer_1.Token;\nexports.Range = tokenizer_1.Range;\nvar util_1 = require(\"./util\");\n/** Indicates the kind of a node. */\nvar NodeKind;\n(function (NodeKind) {\n    NodeKind[NodeKind[\"SOURCE\"] = 0] = \"SOURCE\";\n    // types\n    NodeKind[NodeKind[\"NAMEDTYPE\"] = 1] = \"NAMEDTYPE\";\n    NodeKind[NodeKind[\"FUNCTIONTYPE\"] = 2] = \"FUNCTIONTYPE\";\n    NodeKind[NodeKind[\"TYPENAME\"] = 3] = \"TYPENAME\";\n    NodeKind[NodeKind[\"TYPEPARAMETER\"] = 4] = \"TYPEPARAMETER\";\n    NodeKind[NodeKind[\"PARAMETER\"] = 5] = \"PARAMETER\";\n    // expressions\n    NodeKind[NodeKind[\"IDENTIFIER\"] = 6] = \"IDENTIFIER\";\n    NodeKind[NodeKind[\"ASSERTION\"] = 7] = \"ASSERTION\";\n    NodeKind[NodeKind[\"BINARY\"] = 8] = \"BINARY\";\n    NodeKind[NodeKind[\"CALL\"] = 9] = \"CALL\";\n    NodeKind[NodeKind[\"CLASS\"] = 10] = \"CLASS\";\n    NodeKind[NodeKind[\"COMMA\"] = 11] = \"COMMA\";\n    NodeKind[NodeKind[\"ELEMENTACCESS\"] = 12] = \"ELEMENTACCESS\";\n    NodeKind[NodeKind[\"FALSE\"] = 13] = \"FALSE\";\n    NodeKind[NodeKind[\"FUNCTION\"] = 14] = \"FUNCTION\";\n    NodeKind[NodeKind[\"INSTANCEOF\"] = 15] = \"INSTANCEOF\";\n    NodeKind[NodeKind[\"LITERAL\"] = 16] = \"LITERAL\";\n    NodeKind[NodeKind[\"NEW\"] = 17] = \"NEW\";\n    NodeKind[NodeKind[\"NULL\"] = 18] = \"NULL\";\n    NodeKind[NodeKind[\"PARENTHESIZED\"] = 19] = \"PARENTHESIZED\";\n    NodeKind[NodeKind[\"PROPERTYACCESS\"] = 20] = \"PROPERTYACCESS\";\n    NodeKind[NodeKind[\"TERNARY\"] = 21] = \"TERNARY\";\n    NodeKind[NodeKind[\"SUPER\"] = 22] = \"SUPER\";\n    NodeKind[NodeKind[\"THIS\"] = 23] = \"THIS\";\n    NodeKind[NodeKind[\"TRUE\"] = 24] = \"TRUE\";\n    NodeKind[NodeKind[\"CONSTRUCTOR\"] = 25] = \"CONSTRUCTOR\";\n    NodeKind[NodeKind[\"UNARYPOSTFIX\"] = 26] = \"UNARYPOSTFIX\";\n    NodeKind[NodeKind[\"UNARYPREFIX\"] = 27] = \"UNARYPREFIX\";\n    // statements\n    NodeKind[NodeKind[\"BLOCK\"] = 28] = \"BLOCK\";\n    NodeKind[NodeKind[\"BREAK\"] = 29] = \"BREAK\";\n    NodeKind[NodeKind[\"CONTINUE\"] = 30] = \"CONTINUE\";\n    NodeKind[NodeKind[\"DO\"] = 31] = \"DO\";\n    NodeKind[NodeKind[\"EMPTY\"] = 32] = \"EMPTY\";\n    NodeKind[NodeKind[\"EXPORT\"] = 33] = \"EXPORT\";\n    NodeKind[NodeKind[\"EXPORTDEFAULT\"] = 34] = \"EXPORTDEFAULT\";\n    NodeKind[NodeKind[\"EXPORTIMPORT\"] = 35] = \"EXPORTIMPORT\";\n    NodeKind[NodeKind[\"EXPRESSION\"] = 36] = \"EXPRESSION\";\n    NodeKind[NodeKind[\"FOR\"] = 37] = \"FOR\";\n    NodeKind[NodeKind[\"IF\"] = 38] = \"IF\";\n    NodeKind[NodeKind[\"IMPORT\"] = 39] = \"IMPORT\";\n    NodeKind[NodeKind[\"RETURN\"] = 40] = \"RETURN\";\n    NodeKind[NodeKind[\"SWITCH\"] = 41] = \"SWITCH\";\n    NodeKind[NodeKind[\"THROW\"] = 42] = \"THROW\";\n    NodeKind[NodeKind[\"TRY\"] = 43] = \"TRY\";\n    NodeKind[NodeKind[\"VARIABLE\"] = 44] = \"VARIABLE\";\n    NodeKind[NodeKind[\"VOID\"] = 45] = \"VOID\";\n    NodeKind[NodeKind[\"WHILE\"] = 46] = \"WHILE\";\n    // declaration statements\n    NodeKind[NodeKind[\"CLASSDECLARATION\"] = 47] = \"CLASSDECLARATION\";\n    NodeKind[NodeKind[\"ENUMDECLARATION\"] = 48] = \"ENUMDECLARATION\";\n    NodeKind[NodeKind[\"ENUMVALUEDECLARATION\"] = 49] = \"ENUMVALUEDECLARATION\";\n    NodeKind[NodeKind[\"FIELDDECLARATION\"] = 50] = \"FIELDDECLARATION\";\n    NodeKind[NodeKind[\"FUNCTIONDECLARATION\"] = 51] = \"FUNCTIONDECLARATION\";\n    NodeKind[NodeKind[\"IMPORTDECLARATION\"] = 52] = \"IMPORTDECLARATION\";\n    NodeKind[NodeKind[\"INDEXSIGNATUREDECLARATION\"] = 53] = \"INDEXSIGNATUREDECLARATION\";\n    NodeKind[NodeKind[\"INTERFACEDECLARATION\"] = 54] = \"INTERFACEDECLARATION\";\n    NodeKind[NodeKind[\"METHODDECLARATION\"] = 55] = \"METHODDECLARATION\";\n    NodeKind[NodeKind[\"NAMESPACEDECLARATION\"] = 56] = \"NAMESPACEDECLARATION\";\n    NodeKind[NodeKind[\"TYPEDECLARATION\"] = 57] = \"TYPEDECLARATION\";\n    NodeKind[NodeKind[\"VARIABLEDECLARATION\"] = 58] = \"VARIABLEDECLARATION\";\n    // special\n    NodeKind[NodeKind[\"DECORATOR\"] = 59] = \"DECORATOR\";\n    NodeKind[NodeKind[\"EXPORTMEMBER\"] = 60] = \"EXPORTMEMBER\";\n    NodeKind[NodeKind[\"SWITCHCASE\"] = 61] = \"SWITCHCASE\";\n    NodeKind[NodeKind[\"COMMENT\"] = 62] = \"COMMENT\";\n})(NodeKind = exports.NodeKind || (exports.NodeKind = {}));\n/** Checks if a node represents a constant value. */\nfunction nodeIsConstantValue(kind) {\n    switch (kind) {\n        case NodeKind.LITERAL:\n        case NodeKind.NULL:\n        case NodeKind.TRUE:\n        case NodeKind.FALSE: return true;\n    }\n    return false;\n}\nexports.nodeIsConstantValue = nodeIsConstantValue;\n/** Checks if a node might be callable. */\nfunction nodeIsCallable(kind) {\n    switch (kind) {\n        case NodeKind.IDENTIFIER:\n        case NodeKind.ASSERTION: // if kind=NONNULL\n        case NodeKind.CALL:\n        case NodeKind.ELEMENTACCESS:\n        case NodeKind.PARENTHESIZED:\n        case NodeKind.PROPERTYACCESS:\n        case NodeKind.SUPER: return true;\n    }\n    return false;\n}\nexports.nodeIsCallable = nodeIsCallable;\n/** Checks if a node might be callable with generic arguments. */\nfunction nodeIsGenericCallable(kind) {\n    switch (kind) {\n        case NodeKind.IDENTIFIER:\n        case NodeKind.PROPERTYACCESS: return true;\n    }\n    return false;\n}\nexports.nodeIsGenericCallable = nodeIsGenericCallable;\n/** Base class of all nodes. */\nvar Node = /** @class */ (function () {\n    function Node() {\n    }\n    // types\n    Node.createTypeName = function (name, range) {\n        var typeName = new TypeName();\n        typeName.range = range;\n        typeName.identifier = name;\n        typeName.next = null;\n        return typeName;\n    };\n    Node.createSimpleTypeName = function (name, range) {\n        return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n    };\n    Node.createNamedType = function (name, typeArguments, isNullable, range) {\n        var type = new NamedTypeNode();\n        type.range = range;\n        type.name = name;\n        type.typeArguments = typeArguments;\n        type.isNullable = isNullable;\n        return type;\n    };\n    Node.createFunctionType = function (parameters, returnType, explicitThisType, isNullable, range) {\n        var type = new FunctionTypeNode();\n        type.range = range;\n        type.parameters = parameters;\n        type.returnType = returnType;\n        type.explicitThisType = explicitThisType;\n        type.isNullable = isNullable;\n        return type;\n    };\n    Node.createOmittedType = function (range) {\n        return Node.createNamedType(Node.createSimpleTypeName(\"\", range), null, false, range);\n    };\n    Node.createTypeParameter = function (name, extendsType, defaultType, range) {\n        var elem = new TypeParameterNode();\n        elem.range = range;\n        elem.name = name;\n        elem.extendsType = extendsType;\n        elem.defaultType = defaultType;\n        return elem;\n    };\n    Node.createParameter = function (name, type, initializer, kind, range) {\n        var elem = new ParameterNode();\n        elem.range = range;\n        elem.name = name;\n        elem.type = type;\n        elem.initializer = initializer;\n        elem.parameterKind = kind;\n        return elem;\n    };\n    // special\n    Node.createDecorator = function (name, args, range) {\n        var stmt = new DecoratorNode();\n        stmt.range = range;\n        stmt.name = name;\n        stmt.arguments = args;\n        stmt.decoratorKind = DecoratorKind.fromNode(name);\n        return stmt;\n    };\n    Node.createComment = function (text, kind, range) {\n        var node = new CommentNode();\n        node.range = range;\n        node.commentKind = kind;\n        node.text = text;\n        return node;\n    };\n    // expressions\n    Node.createIdentifierExpression = function (name, range, isQuoted) {\n        if (isQuoted === void 0) { isQuoted = false; }\n        var expr = new IdentifierExpression();\n        expr.range = range;\n        expr.text = name; // TODO: extract from range\n        expr.symbol = name; // TODO: Symbol.for(name)\n        expr.isQuoted = isQuoted;\n        return expr;\n    };\n    Node.createEmptyIdentifierExpression = function (range) {\n        var expr = new IdentifierExpression();\n        expr.range = range;\n        expr.text = \"\";\n        return expr;\n    };\n    Node.createArrayLiteralExpression = function (elements, range) {\n        var expr = new ArrayLiteralExpression();\n        expr.range = range;\n        expr.elementExpressions = elements;\n        return expr;\n    };\n    Node.createAssertionExpression = function (assertionKind, expression, toType, range) {\n        var expr = new AssertionExpression();\n        expr.range = range;\n        expr.assertionKind = assertionKind;\n        expr.expression = expression;\n        expr.toType = toType;\n        return expr;\n    };\n    Node.createBinaryExpression = function (operator, left, right, range) {\n        var expr = new BinaryExpression();\n        expr.range = range;\n        expr.operator = operator;\n        expr.left = left;\n        expr.right = right;\n        return expr;\n    };\n    Node.createCallExpression = function (expression, typeArgs, args, range) {\n        var expr = new CallExpression();\n        expr.range = range;\n        expr.expression = expression;\n        expr.typeArguments = typeArgs;\n        expr.arguments = args;\n        return expr;\n    };\n    Node.createClassExpression = function (declaration) {\n        var expr = new ClassExpression();\n        expr.range = declaration.range;\n        expr.declaration = declaration;\n        return expr;\n    };\n    Node.createCommaExpression = function (expressions, range) {\n        var expr = new CommaExpression();\n        expr.range = range;\n        expr.expressions = expressions;\n        return expr;\n    };\n    Node.createConstructorExpression = function (range) {\n        var expr = new ConstructorExpression();\n        expr.range = range;\n        return expr;\n    };\n    Node.createElementAccessExpression = function (expression, element, range) {\n        var expr = new ElementAccessExpression();\n        expr.range = range;\n        expr.expression = expression;\n        expr.elementExpression = element;\n        return expr;\n    };\n    Node.createFalseExpression = function (range) {\n        var expr = new FalseExpression();\n        expr.range = range;\n        return expr;\n    };\n    Node.createFloatLiteralExpression = function (value, range) {\n        var expr = new FloatLiteralExpression();\n        expr.range = range;\n        expr.value = value;\n        return expr;\n    };\n    Node.createFunctionExpression = function (declaration) {\n        var expr = new FunctionExpression();\n        expr.range = declaration.range;\n        expr.declaration = declaration;\n        return expr;\n    };\n    Node.createInstanceOfExpression = function (expression, isType, range) {\n        var expr = new InstanceOfExpression();\n        expr.range = range;\n        expr.expression = expression;\n        expr.isType = isType;\n        return expr;\n    };\n    Node.createIntegerLiteralExpression = function (value, range) {\n        var expr = new IntegerLiteralExpression();\n        expr.range = range;\n        expr.value = value;\n        return expr;\n    };\n    Node.createNewExpression = function (expression, typeArgs, args, range) {\n        var expr = new NewExpression();\n        expr.range = range;\n        expr.expression = expression;\n        expr.typeArguments = typeArgs;\n        expr.arguments = args;\n        return expr;\n    };\n    Node.createNullExpression = function (range) {\n        var expr = new NullExpression();\n        expr.range = range;\n        return expr;\n    };\n    Node.createObjectLiteralExpression = function (names, values, range) {\n        var expr = new ObjectLiteralExpression();\n        expr.range = range;\n        expr.names = names;\n        expr.values = values;\n        return expr;\n    };\n    Node.createParenthesizedExpression = function (expression, range) {\n        var expr = new ParenthesizedExpression();\n        expr.range = range;\n        expr.expression = expression;\n        return expr;\n    };\n    Node.createPropertyAccessExpression = function (expression, property, range) {\n        var expr = new PropertyAccessExpression();\n        expr.range = range;\n        expr.expression = expression;\n        expr.property = property;\n        return expr;\n    };\n    Node.createRegexpLiteralExpression = function (pattern, flags, range) {\n        var expr = new RegexpLiteralExpression();\n        expr.range = range;\n        expr.pattern = pattern;\n        expr.patternFlags = flags;\n        return expr;\n    };\n    Node.createTernaryExpression = function (condition, ifThen, ifElse, range) {\n        var expr = new TernaryExpression();\n        expr.range = range;\n        expr.condition = condition;\n        expr.ifThen = ifThen;\n        expr.ifElse = ifElse;\n        return expr;\n    };\n    Node.createStringLiteralExpression = function (value, range) {\n        var expr = new StringLiteralExpression();\n        expr.range = range;\n        expr.value = value;\n        return expr;\n    };\n    Node.createSuperExpression = function (range) {\n        var expr = new SuperExpression();\n        expr.range = range;\n        return expr;\n    };\n    Node.createThisExpression = function (range) {\n        var expr = new ThisExpression();\n        expr.range = range;\n        return expr;\n    };\n    Node.createTrueExpression = function (range) {\n        var expr = new TrueExpression();\n        expr.range = range;\n        return expr;\n    };\n    Node.createUnaryPostfixExpression = function (operator, operand, range) {\n        var expr = new UnaryPostfixExpression();\n        expr.range = range;\n        expr.operator = operator;\n        expr.operand = operand;\n        return expr;\n    };\n    Node.createUnaryPrefixExpression = function (operator, operand, range) {\n        var expr = new UnaryPrefixExpression();\n        expr.range = range;\n        expr.operator = operator;\n        expr.operand = operand;\n        return expr;\n    };\n    // statements\n    Node.createBlockStatement = function (statements, range) {\n        var stmt = new BlockStatement();\n        stmt.range = range;\n        stmt.statements = statements;\n        return stmt;\n    };\n    Node.createBreakStatement = function (label, range) {\n        var stmt = new BreakStatement();\n        stmt.range = range;\n        stmt.label = label;\n        return stmt;\n    };\n    Node.createClassDeclaration = function (identifier, typeParameters, extendsType, // can't be a function\n    implementsTypes, // can't be functions\n    members, decorators, flags, range) {\n        var stmt = new ClassDeclaration();\n        stmt.range = range;\n        stmt.flags = flags;\n        stmt.name = identifier;\n        stmt.typeParameters = typeParameters;\n        stmt.extendsType = extendsType;\n        stmt.implementsTypes = implementsTypes;\n        stmt.members = members;\n        stmt.decorators = decorators;\n        return stmt;\n    };\n    Node.createContinueStatement = function (label, range) {\n        var stmt = new ContinueStatement();\n        stmt.range = range;\n        stmt.label = label;\n        return stmt;\n    };\n    Node.createDoStatement = function (statement, condition, range) {\n        var stmt = new DoStatement();\n        stmt.range = range;\n        stmt.statement = statement;\n        stmt.condition = condition;\n        return stmt;\n    };\n    Node.createEmptyStatement = function (range) {\n        var stmt = new EmptyStatement();\n        stmt.range = range;\n        return stmt;\n    };\n    Node.createEnumDeclaration = function (name, members, decorators, flags, range) {\n        var stmt = new EnumDeclaration();\n        stmt.range = range;\n        stmt.flags = flags;\n        stmt.name = name;\n        stmt.values = members;\n        stmt.decorators = decorators;\n        return stmt;\n    };\n    Node.createEnumValueDeclaration = function (name, value, flags, range) {\n        var stmt = new EnumValueDeclaration();\n        stmt.range = range;\n        stmt.flags = flags;\n        stmt.name = name;\n        stmt.value = value;\n        return stmt;\n    };\n    Node.createExportStatement = function (members, path, isDeclare, range) {\n        var stmt = new ExportStatement();\n        stmt.range = range;\n        stmt.members = members;\n        stmt.path = path;\n        if (path) {\n            var normalizedPath = util_1.normalizePath(path.value);\n            if (path.value.startsWith(\".\")) { // relative\n                normalizedPath = util_1.resolvePath(normalizedPath, range.source.internalPath);\n            }\n            else { // absolute\n                if (!normalizedPath.startsWith(common_1.LIBRARY_PREFIX))\n                    normalizedPath = common_1.LIBRARY_PREFIX + normalizedPath;\n            }\n            stmt.internalPath = mangleInternalPath(normalizedPath);\n        }\n        else {\n            stmt.internalPath = null;\n        }\n        stmt.isDeclare = isDeclare;\n        return stmt;\n    };\n    Node.createExportDefaultStatement = function (declaration, range) {\n        var stmt = new ExportDefaultStatement();\n        stmt.declaration = declaration;\n        stmt.range = range;\n        return stmt;\n    };\n    Node.createExportImportStatement = function (name, externalName, range) {\n        var stmt = new ExportImportStatement();\n        stmt.range = range;\n        stmt.name = name;\n        stmt.externalName = externalName;\n        return stmt;\n    };\n    Node.createExportMember = function (name, externalName, range) {\n        var elem = new ExportMember();\n        elem.range = range;\n        elem.localName = name;\n        if (!externalName)\n            externalName = name;\n        elem.exportedName = externalName;\n        return elem;\n    };\n    Node.createExpressionStatement = function (expression) {\n        var stmt = new ExpressionStatement();\n        stmt.range = expression.range;\n        stmt.expression = expression;\n        return stmt;\n    };\n    Node.createIfStatement = function (condition, ifTrue, ifFalse, range) {\n        var stmt = new IfStatement();\n        stmt.range = range;\n        stmt.condition = condition;\n        stmt.ifTrue = ifTrue;\n        stmt.ifFalse = ifFalse;\n        return stmt;\n    };\n    Node.createImportStatement = function (decls, path, range) {\n        var stmt = new ImportStatement();\n        stmt.range = range;\n        stmt.declarations = decls;\n        stmt.namespaceName = null;\n        stmt.path = path;\n        var normalizedPath = util_1.normalizePath(path.value);\n        if (path.value.startsWith(\".\")) { // relative in project\n            normalizedPath = util_1.resolvePath(normalizedPath, range.source.internalPath);\n        }\n        else { // absolute in library\n            if (!normalizedPath.startsWith(common_1.LIBRARY_PREFIX))\n                normalizedPath = common_1.LIBRARY_PREFIX + normalizedPath;\n        }\n        stmt.internalPath = mangleInternalPath(normalizedPath);\n        return stmt;\n    };\n    Node.createImportStatementWithWildcard = function (identifier, path, range) {\n        var stmt = new ImportStatement();\n        stmt.range = range;\n        stmt.declarations = null;\n        stmt.namespaceName = identifier;\n        stmt.path = path;\n        var normalizedPath = util_1.normalizePath(path.value);\n        if (path.value.startsWith(\".\")) {\n            normalizedPath = util_1.resolvePath(normalizedPath, range.source.internalPath);\n        }\n        else {\n            if (!normalizedPath.startsWith(common_1.LIBRARY_PREFIX))\n                normalizedPath = common_1.LIBRARY_PREFIX + normalizedPath;\n        }\n        stmt.internalPath = mangleInternalPath(normalizedPath);\n        return stmt;\n    };\n    Node.createImportDeclaration = function (foreignName, name, range) {\n        var elem = new ImportDeclaration();\n        elem.range = range;\n        elem.foreignName = foreignName;\n        if (!name)\n            name = foreignName;\n        elem.name = name;\n        return elem;\n    };\n    Node.createInterfaceDeclaration = function (name, typeParameters, extendsType, // can't be a function\n    members, decorators, flags, range) {\n        var stmt = new InterfaceDeclaration();\n        stmt.range = range;\n        stmt.flags = flags;\n        stmt.name = name;\n        stmt.typeParameters = typeParameters;\n        stmt.extendsType = extendsType;\n        stmt.members = members;\n        stmt.decorators = decorators;\n        return stmt;\n    };\n    Node.createFieldDeclaration = function (name, type, initializer, decorators, flags, range) {\n        var stmt = new FieldDeclaration();\n        stmt.range = range;\n        stmt.flags = flags;\n        stmt.name = name;\n        stmt.type = type;\n        stmt.initializer = initializer;\n        stmt.decorators = decorators;\n        return stmt;\n    };\n    Node.createForStatement = function (initializer, condition, incrementor, statement, range) {\n        var stmt = new ForStatement();\n        stmt.range = range;\n        stmt.initializer = initializer;\n        stmt.condition = condition;\n        stmt.incrementor = incrementor;\n        stmt.statement = statement;\n        return stmt;\n    };\n    Node.createFunctionDeclaration = function (name, typeParameters, signature, body, decorators, flags, arrowKind, range) {\n        var stmt = new FunctionDeclaration();\n        stmt.range = range;\n        stmt.flags = flags;\n        stmt.name = name;\n        stmt.typeParameters = typeParameters;\n        stmt.signature = signature;\n        stmt.body = body;\n        stmt.decorators = decorators;\n        stmt.arrowKind = arrowKind;\n        return stmt;\n    };\n    Node.createIndexSignatureDeclaration = function (keyType, valueType, range) {\n        var elem = new IndexSignatureDeclaration();\n        elem.range = range;\n        elem.keyType = keyType;\n        elem.valueType = valueType;\n        return elem;\n    };\n    Node.createMethodDeclaration = function (name, typeParameters, signature, body, decorators, flags, range) {\n        var stmt = new MethodDeclaration();\n        stmt.range = range;\n        stmt.flags = flags;\n        stmt.name = name;\n        stmt.typeParameters = typeParameters;\n        stmt.signature = signature;\n        stmt.body = body;\n        stmt.decorators = decorators;\n        return stmt;\n    };\n    Node.createNamespaceDeclaration = function (name, members, decorators, flags, range) {\n        var stmt = new NamespaceDeclaration();\n        stmt.range = range;\n        stmt.flags = flags;\n        stmt.name = name;\n        stmt.members = members;\n        stmt.decorators = decorators;\n        return stmt;\n    };\n    Node.createReturnStatement = function (value, range) {\n        var stmt = new ReturnStatement();\n        stmt.range = range;\n        stmt.value = value;\n        return stmt;\n    };\n    Node.createSwitchStatement = function (condition, cases, range) {\n        var stmt = new SwitchStatement();\n        stmt.range = range;\n        stmt.condition = condition;\n        stmt.cases = cases;\n        return stmt;\n    };\n    Node.createSwitchCase = function (label, statements, range) {\n        var elem = new SwitchCase();\n        elem.range = range;\n        elem.label = label;\n        elem.statements = statements;\n        return elem;\n    };\n    Node.createThrowStatement = function (value, range) {\n        var stmt = new ThrowStatement();\n        stmt.range = range;\n        stmt.value = value;\n        return stmt;\n    };\n    Node.createTryStatement = function (statements, catchVariable, catchStatements, finallyStatements, range) {\n        var stmt = new TryStatement();\n        stmt.range = range;\n        stmt.statements = statements;\n        stmt.catchVariable = catchVariable;\n        stmt.catchStatements = catchStatements;\n        stmt.finallyStatements = finallyStatements;\n        return stmt;\n    };\n    Node.createTypeDeclaration = function (name, typeParameters, alias, decorators, flags, range) {\n        var stmt = new TypeDeclaration();\n        stmt.range = range;\n        stmt.flags = flags;\n        stmt.name = name;\n        stmt.typeParameters = typeParameters;\n        stmt.type = alias;\n        stmt.decorators = decorators;\n        return stmt;\n    };\n    Node.createVariableStatement = function (declarations, decorators, range) {\n        var stmt = new VariableStatement();\n        stmt.range = range;\n        stmt.declarations = declarations;\n        stmt.decorators = decorators;\n        return stmt;\n    };\n    Node.createVariableDeclaration = function (name, type, initializer, decorators, flags, range) {\n        var elem = new VariableDeclaration();\n        elem.range = range;\n        elem.flags = flags;\n        elem.name = name;\n        elem.type = type;\n        elem.initializer = initializer;\n        elem.decorators = decorators; // inherited\n        return elem;\n    };\n    Node.createVoidStatement = function (expression, range) {\n        var stmt = new VoidStatement();\n        stmt.range = range;\n        stmt.expression = expression;\n        return stmt;\n    };\n    Node.createWhileStatement = function (condition, statement, range) {\n        var stmt = new WhileStatement();\n        stmt.range = range;\n        stmt.condition = condition;\n        stmt.statement = statement;\n        return stmt;\n    };\n    return Node;\n}());\nexports.Node = Node;\n// types\nvar TypeNode = /** @class */ (function (_super) {\n    __extends(TypeNode, _super);\n    function TypeNode() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /** Tests if this type has a generic component matching one of the given type parameters. */\n    TypeNode.prototype.hasGenericComponent = function (typeParameterNodes) {\n        var self = this; // TS otherwise complains\n        if (this.kind == NodeKind.NAMEDTYPE) {\n            if (!self.name.next) {\n                var typeArgumentNodes = self.typeArguments;\n                if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n                    for (var i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n                        if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes))\n                            return true;\n                    }\n                }\n                else {\n                    var name = self.name.identifier.text;\n                    for (var i = 0, k = typeParameterNodes.length; i < k; ++i) {\n                        if (typeParameterNodes[i].name.text == name)\n                            return true;\n                    }\n                }\n            }\n        }\n        else if (this.kind == NodeKind.FUNCTIONTYPE) {\n            var parameterNodes = self.parameters;\n            for (var i = 0, k = parameterNodes.length; i < k; ++i) {\n                if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes))\n                    return true;\n            }\n            if (self.returnType.hasGenericComponent(typeParameterNodes))\n                return true;\n            var explicitThisType = self.explicitThisType;\n            if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes))\n                return true;\n        }\n        else {\n            assert(false);\n        }\n        return false;\n    };\n    return TypeNode;\n}(Node));\nexports.TypeNode = TypeNode;\n/** Represents a type name. */\nvar TypeName = /** @class */ (function (_super) {\n    __extends(TypeName, _super);\n    function TypeName() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.TYPENAME;\n        return _this;\n    }\n    return TypeName;\n}(Node));\nexports.TypeName = TypeName;\n/** Represents a named type. */\nvar NamedTypeNode = /** @class */ (function (_super) {\n    __extends(NamedTypeNode, _super);\n    function NamedTypeNode() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.NAMEDTYPE;\n        return _this;\n    }\n    return NamedTypeNode;\n}(TypeNode));\nexports.NamedTypeNode = NamedTypeNode;\n/** Represents a function type. */\nvar FunctionTypeNode = /** @class */ (function (_super) {\n    __extends(FunctionTypeNode, _super);\n    function FunctionTypeNode() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.FUNCTIONTYPE;\n        return _this;\n    }\n    return FunctionTypeNode;\n}(TypeNode));\nexports.FunctionTypeNode = FunctionTypeNode;\n/** Represents a type parameter. */\nvar TypeParameterNode = /** @class */ (function (_super) {\n    __extends(TypeParameterNode, _super);\n    function TypeParameterNode() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.TYPEPARAMETER;\n        return _this;\n    }\n    return TypeParameterNode;\n}(Node));\nexports.TypeParameterNode = TypeParameterNode;\n/** Represents the kind of a parameter. */\nvar ParameterKind;\n(function (ParameterKind) {\n    /** No specific flags. */\n    ParameterKind[ParameterKind[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    /** Is an optional parameter. */\n    ParameterKind[ParameterKind[\"OPTIONAL\"] = 1] = \"OPTIONAL\";\n    /** Is a rest parameter. */\n    ParameterKind[ParameterKind[\"REST\"] = 2] = \"REST\";\n})(ParameterKind = exports.ParameterKind || (exports.ParameterKind = {}));\n/** Represents a function parameter. */\nvar ParameterNode = /** @class */ (function (_super) {\n    __extends(ParameterNode, _super);\n    function ParameterNode() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.PARAMETER;\n        /** Implicit field declaration, if applicable. */\n        _this.implicitFieldDeclaration = null;\n        /** Common flags indicating specific traits. */\n        _this.flags = common_1.CommonFlags.NONE;\n        return _this;\n    }\n    /** Tests if this node has the specified flag or flags. */\n    ParameterNode.prototype.is = function (flag) { return (this.flags & flag) == flag; };\n    /** Tests if this node has one of the specified flags. */\n    ParameterNode.prototype.isAny = function (flag) { return (this.flags & flag) != 0; };\n    /** Sets a specific flag or flags. */\n    ParameterNode.prototype.set = function (flag) { this.flags |= flag; };\n    return ParameterNode;\n}(Node));\nexports.ParameterNode = ParameterNode;\n// special\n/** Built-in decorator kinds. */\nvar DecoratorKind;\n(function (DecoratorKind) {\n    DecoratorKind[DecoratorKind[\"CUSTOM\"] = 0] = \"CUSTOM\";\n    DecoratorKind[DecoratorKind[\"GLOBAL\"] = 1] = \"GLOBAL\";\n    DecoratorKind[DecoratorKind[\"OPERATOR\"] = 2] = \"OPERATOR\";\n    DecoratorKind[DecoratorKind[\"OPERATOR_BINARY\"] = 3] = \"OPERATOR_BINARY\";\n    DecoratorKind[DecoratorKind[\"OPERATOR_PREFIX\"] = 4] = \"OPERATOR_PREFIX\";\n    DecoratorKind[DecoratorKind[\"OPERATOR_POSTFIX\"] = 5] = \"OPERATOR_POSTFIX\";\n    DecoratorKind[DecoratorKind[\"UNMANAGED\"] = 6] = \"UNMANAGED\";\n    DecoratorKind[DecoratorKind[\"SEALED\"] = 7] = \"SEALED\";\n    DecoratorKind[DecoratorKind[\"INLINE\"] = 8] = \"INLINE\";\n    DecoratorKind[DecoratorKind[\"EXTERNAL\"] = 9] = \"EXTERNAL\";\n    DecoratorKind[DecoratorKind[\"BUILTIN\"] = 10] = \"BUILTIN\";\n    DecoratorKind[DecoratorKind[\"LAZY\"] = 11] = \"LAZY\";\n    DecoratorKind[DecoratorKind[\"UNSAFE\"] = 12] = \"UNSAFE\";\n})(DecoratorKind = exports.DecoratorKind || (exports.DecoratorKind = {}));\n(function (DecoratorKind) {\n    /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n    function fromNode(nameNode) {\n        // @global, @inline, @operator, @sealed, @unmanaged\n        if (nameNode.kind == NodeKind.IDENTIFIER) {\n            var nameStr = nameNode.text;\n            assert(nameStr.length);\n            switch (nameStr.charCodeAt(0)) {\n                case 98 /* b */: {\n                    if (nameStr == \"builtin\")\n                        return DecoratorKind.BUILTIN;\n                    break;\n                }\n                case 101 /* e */: {\n                    if (nameStr == \"external\")\n                        return DecoratorKind.EXTERNAL;\n                    break;\n                }\n                case 103 /* g */: {\n                    if (nameStr == \"global\")\n                        return DecoratorKind.GLOBAL;\n                    break;\n                }\n                case 105 /* i */: {\n                    if (nameStr == \"inline\")\n                        return DecoratorKind.INLINE;\n                    break;\n                }\n                case 108 /* l */: {\n                    if (nameStr == \"lazy\")\n                        return DecoratorKind.LAZY;\n                    break;\n                }\n                case 111 /* o */: {\n                    if (nameStr == \"operator\")\n                        return DecoratorKind.OPERATOR;\n                    break;\n                }\n                case 115 /* s */: {\n                    if (nameStr == \"sealed\")\n                        return DecoratorKind.SEALED;\n                    break;\n                }\n                case 117 /* u */: {\n                    if (nameStr == \"unmanaged\")\n                        return DecoratorKind.UNMANAGED;\n                    if (nameStr == \"unsafe\")\n                        return DecoratorKind.UNSAFE;\n                    break;\n                }\n            }\n        }\n        else if (nameNode.kind == NodeKind.PROPERTYACCESS &&\n            nameNode.expression.kind == NodeKind.IDENTIFIER) {\n            var nameStr = nameNode.expression.text;\n            assert(nameStr.length);\n            var propStr = nameNode.property.text;\n            assert(propStr.length);\n            // @operator.binary, @operator.prefix, @operator.postfix\n            if (nameStr == \"operator\") {\n                switch (propStr.charCodeAt(0)) {\n                    case 98 /* b */: {\n                        if (propStr == \"binary\")\n                            return DecoratorKind.OPERATOR_BINARY;\n                        break;\n                    }\n                    case 112 /* p */: {\n                        switch (propStr) {\n                            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n                            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        return DecoratorKind.CUSTOM;\n    }\n    DecoratorKind.fromNode = fromNode;\n})(DecoratorKind = exports.DecoratorKind || (exports.DecoratorKind = {}));\n/** Represents a decorator. */\nvar DecoratorNode = /** @class */ (function (_super) {\n    __extends(DecoratorNode, _super);\n    function DecoratorNode() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.DECORATOR;\n        return _this;\n    }\n    return DecoratorNode;\n}(Node));\nexports.DecoratorNode = DecoratorNode;\n/** Comment kinds. */\nvar CommentKind;\n(function (CommentKind) {\n    /** Line comment. */\n    CommentKind[CommentKind[\"LINE\"] = 0] = \"LINE\";\n    /** Triple-slash comment. */\n    CommentKind[CommentKind[\"TRIPLE\"] = 1] = \"TRIPLE\";\n    /** Block comment. */\n    CommentKind[CommentKind[\"BLOCK\"] = 2] = \"BLOCK\";\n})(CommentKind = exports.CommentKind || (exports.CommentKind = {}));\n/** Represents a comment. */\nvar CommentNode = /** @class */ (function (_super) {\n    __extends(CommentNode, _super);\n    function CommentNode() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.COMMENT;\n        return _this;\n    }\n    return CommentNode;\n}(Node));\nexports.CommentNode = CommentNode;\n// expressions\n/** Base class of all expression nodes. */\nvar Expression = /** @class */ (function (_super) {\n    __extends(Expression, _super);\n    function Expression() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Expression;\n}(Node));\nexports.Expression = Expression;\n/** Represents an identifier expression. */\nvar IdentifierExpression = /** @class */ (function (_super) {\n    __extends(IdentifierExpression, _super);\n    function IdentifierExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.IDENTIFIER;\n        return _this;\n    }\n    return IdentifierExpression;\n}(Expression));\nexports.IdentifierExpression = IdentifierExpression;\n/** Indicates the kind of a literal. */\nvar LiteralKind;\n(function (LiteralKind) {\n    LiteralKind[LiteralKind[\"FLOAT\"] = 0] = \"FLOAT\";\n    LiteralKind[LiteralKind[\"INTEGER\"] = 1] = \"INTEGER\";\n    LiteralKind[LiteralKind[\"STRING\"] = 2] = \"STRING\";\n    LiteralKind[LiteralKind[\"REGEXP\"] = 3] = \"REGEXP\";\n    LiteralKind[LiteralKind[\"ARRAY\"] = 4] = \"ARRAY\";\n    LiteralKind[LiteralKind[\"OBJECT\"] = 5] = \"OBJECT\";\n})(LiteralKind = exports.LiteralKind || (exports.LiteralKind = {}));\n/** Base class of all literal expressions. */\nvar LiteralExpression = /** @class */ (function (_super) {\n    __extends(LiteralExpression, _super);\n    function LiteralExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.LITERAL;\n        return _this;\n    }\n    return LiteralExpression;\n}(Expression));\nexports.LiteralExpression = LiteralExpression;\n/** Represents an `[]` literal expression. */\nvar ArrayLiteralExpression = /** @class */ (function (_super) {\n    __extends(ArrayLiteralExpression, _super);\n    function ArrayLiteralExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.literalKind = LiteralKind.ARRAY;\n        return _this;\n    }\n    return ArrayLiteralExpression;\n}(LiteralExpression));\nexports.ArrayLiteralExpression = ArrayLiteralExpression;\n/** Indicates the kind of an assertion. */\nvar AssertionKind;\n(function (AssertionKind) {\n    AssertionKind[AssertionKind[\"PREFIX\"] = 0] = \"PREFIX\";\n    AssertionKind[AssertionKind[\"AS\"] = 1] = \"AS\";\n    AssertionKind[AssertionKind[\"NONNULL\"] = 2] = \"NONNULL\";\n})(AssertionKind = exports.AssertionKind || (exports.AssertionKind = {}));\n/** Represents an assertion expression. */\nvar AssertionExpression = /** @class */ (function (_super) {\n    __extends(AssertionExpression, _super);\n    function AssertionExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.ASSERTION;\n        return _this;\n    }\n    return AssertionExpression;\n}(Expression));\nexports.AssertionExpression = AssertionExpression;\n/** Represents a binary expression. */\nvar BinaryExpression = /** @class */ (function (_super) {\n    __extends(BinaryExpression, _super);\n    function BinaryExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.BINARY;\n        return _this;\n    }\n    return BinaryExpression;\n}(Expression));\nexports.BinaryExpression = BinaryExpression;\n/** Represents a call expression. */\nvar CallExpression = /** @class */ (function (_super) {\n    __extends(CallExpression, _super);\n    function CallExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.CALL;\n        return _this;\n    }\n    Object.defineProperty(CallExpression.prototype, \"typeArgumentsRange\", {\n        /** Gets the type arguments range for reporting. */\n        get: function () {\n            var typeArguments = this.typeArguments;\n            var numTypeArguments;\n            if (typeArguments && (numTypeArguments = typeArguments.length)) {\n                return tokenizer_1.Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n            }\n            return this.expression.range;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CallExpression.prototype, \"argumentsRange\", {\n        /** Gets the arguments range for reporting. */\n        get: function () {\n            var args = this.arguments;\n            var numArguments = args.length;\n            if (numArguments) {\n                return tokenizer_1.Range.join(args[0].range, args[numArguments - 1].range);\n            }\n            return this.expression.range;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CallExpression;\n}(Expression));\nexports.CallExpression = CallExpression;\n/** Represents a class expression using the 'class' keyword. */\nvar ClassExpression = /** @class */ (function (_super) {\n    __extends(ClassExpression, _super);\n    function ClassExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.CLASS;\n        return _this;\n    }\n    return ClassExpression;\n}(Expression));\nexports.ClassExpression = ClassExpression;\n/** Represents a comma expression composed of multiple expressions. */\nvar CommaExpression = /** @class */ (function (_super) {\n    __extends(CommaExpression, _super);\n    function CommaExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.COMMA;\n        return _this;\n    }\n    return CommaExpression;\n}(Expression));\nexports.CommaExpression = CommaExpression;\n/** Represents a `constructor` expression. */\nvar ConstructorExpression = /** @class */ (function (_super) {\n    __extends(ConstructorExpression, _super);\n    function ConstructorExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.CONSTRUCTOR;\n        _this.text = \"constructor\";\n        _this.symbol = common_1.CommonSymbols.constructor;\n        return _this;\n    }\n    return ConstructorExpression;\n}(IdentifierExpression));\nexports.ConstructorExpression = ConstructorExpression;\n/** Represents an element access expression, e.g., array access. */\nvar ElementAccessExpression = /** @class */ (function (_super) {\n    __extends(ElementAccessExpression, _super);\n    function ElementAccessExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.ELEMENTACCESS;\n        return _this;\n    }\n    return ElementAccessExpression;\n}(Expression));\nexports.ElementAccessExpression = ElementAccessExpression;\n/** Represents a float literal expression. */\nvar FloatLiteralExpression = /** @class */ (function (_super) {\n    __extends(FloatLiteralExpression, _super);\n    function FloatLiteralExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.literalKind = LiteralKind.FLOAT;\n        return _this;\n    }\n    return FloatLiteralExpression;\n}(LiteralExpression));\nexports.FloatLiteralExpression = FloatLiteralExpression;\n/** Represents a function expression using the 'function' keyword. */\nvar FunctionExpression = /** @class */ (function (_super) {\n    __extends(FunctionExpression, _super);\n    function FunctionExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.FUNCTION;\n        return _this;\n    }\n    return FunctionExpression;\n}(Expression));\nexports.FunctionExpression = FunctionExpression;\n/** Represents an `instanceof` expression. */\nvar InstanceOfExpression = /** @class */ (function (_super) {\n    __extends(InstanceOfExpression, _super);\n    function InstanceOfExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.INSTANCEOF;\n        return _this;\n    }\n    return InstanceOfExpression;\n}(Expression));\nexports.InstanceOfExpression = InstanceOfExpression;\n/** Represents an integer literal expression. */\nvar IntegerLiteralExpression = /** @class */ (function (_super) {\n    __extends(IntegerLiteralExpression, _super);\n    function IntegerLiteralExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.literalKind = LiteralKind.INTEGER;\n        return _this;\n    }\n    return IntegerLiteralExpression;\n}(LiteralExpression));\nexports.IntegerLiteralExpression = IntegerLiteralExpression;\n/** Represents a `new` expression. Like a call but with its own kind. */\nvar NewExpression = /** @class */ (function (_super) {\n    __extends(NewExpression, _super);\n    function NewExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.NEW;\n        return _this;\n    }\n    return NewExpression;\n}(CallExpression));\nexports.NewExpression = NewExpression;\n/** Represents a `null` expression. */\nvar NullExpression = /** @class */ (function (_super) {\n    __extends(NullExpression, _super);\n    function NullExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.NULL;\n        _this.text = \"null\";\n        _this.symbol = common_1.CommonSymbols.null_;\n        return _this;\n    }\n    return NullExpression;\n}(IdentifierExpression));\nexports.NullExpression = NullExpression;\n/** Represents an object literal expression. */\nvar ObjectLiteralExpression = /** @class */ (function (_super) {\n    __extends(ObjectLiteralExpression, _super);\n    function ObjectLiteralExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.literalKind = LiteralKind.OBJECT;\n        return _this;\n    }\n    return ObjectLiteralExpression;\n}(LiteralExpression));\nexports.ObjectLiteralExpression = ObjectLiteralExpression;\n/** Represents a parenthesized expression. */\nvar ParenthesizedExpression = /** @class */ (function (_super) {\n    __extends(ParenthesizedExpression, _super);\n    function ParenthesizedExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.PARENTHESIZED;\n        return _this;\n    }\n    return ParenthesizedExpression;\n}(Expression));\nexports.ParenthesizedExpression = ParenthesizedExpression;\n/** Represents a property access expression. */\nvar PropertyAccessExpression = /** @class */ (function (_super) {\n    __extends(PropertyAccessExpression, _super);\n    function PropertyAccessExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.PROPERTYACCESS;\n        return _this;\n    }\n    return PropertyAccessExpression;\n}(Expression));\nexports.PropertyAccessExpression = PropertyAccessExpression;\n/** Represents a regular expression literal expression. */\nvar RegexpLiteralExpression = /** @class */ (function (_super) {\n    __extends(RegexpLiteralExpression, _super);\n    function RegexpLiteralExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.literalKind = LiteralKind.REGEXP;\n        return _this;\n    }\n    return RegexpLiteralExpression;\n}(LiteralExpression));\nexports.RegexpLiteralExpression = RegexpLiteralExpression;\n/** Represents a ternary expression, i.e., short if notation. */\nvar TernaryExpression = /** @class */ (function (_super) {\n    __extends(TernaryExpression, _super);\n    function TernaryExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.TERNARY;\n        return _this;\n    }\n    return TernaryExpression;\n}(Expression));\nexports.TernaryExpression = TernaryExpression;\n/** Represents a string literal expression. */\nvar StringLiteralExpression = /** @class */ (function (_super) {\n    __extends(StringLiteralExpression, _super);\n    function StringLiteralExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.literalKind = LiteralKind.STRING;\n        return _this;\n    }\n    return StringLiteralExpression;\n}(LiteralExpression));\nexports.StringLiteralExpression = StringLiteralExpression;\n/** Represents a `super` expression. */\nvar SuperExpression = /** @class */ (function (_super) {\n    __extends(SuperExpression, _super);\n    function SuperExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.SUPER;\n        _this.text = \"super\";\n        _this.symbol = common_1.CommonSymbols.super_;\n        return _this;\n    }\n    return SuperExpression;\n}(IdentifierExpression));\nexports.SuperExpression = SuperExpression;\n/** Represents a `this` expression. */\nvar ThisExpression = /** @class */ (function (_super) {\n    __extends(ThisExpression, _super);\n    function ThisExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.THIS;\n        _this.text = \"this\";\n        _this.symbol = common_1.CommonSymbols.this_;\n        return _this;\n    }\n    return ThisExpression;\n}(IdentifierExpression));\nexports.ThisExpression = ThisExpression;\n/** Represents a `true` expression. */\nvar TrueExpression = /** @class */ (function (_super) {\n    __extends(TrueExpression, _super);\n    function TrueExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.TRUE;\n        _this.text = \"true\";\n        _this.symbol = common_1.CommonSymbols.true_;\n        return _this;\n    }\n    return TrueExpression;\n}(IdentifierExpression));\nexports.TrueExpression = TrueExpression;\n/** Represents a `false` expression. */\nvar FalseExpression = /** @class */ (function (_super) {\n    __extends(FalseExpression, _super);\n    function FalseExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.FALSE;\n        _this.text = \"false\";\n        _this.symbol = common_1.CommonSymbols.false_;\n        return _this;\n    }\n    return FalseExpression;\n}(IdentifierExpression));\nexports.FalseExpression = FalseExpression;\n/** Base class of all unary expressions. */\nvar UnaryExpression = /** @class */ (function (_super) {\n    __extends(UnaryExpression, _super);\n    function UnaryExpression() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return UnaryExpression;\n}(Expression));\nexports.UnaryExpression = UnaryExpression;\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nvar UnaryPostfixExpression = /** @class */ (function (_super) {\n    __extends(UnaryPostfixExpression, _super);\n    function UnaryPostfixExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.UNARYPOSTFIX;\n        return _this;\n    }\n    return UnaryPostfixExpression;\n}(UnaryExpression));\nexports.UnaryPostfixExpression = UnaryPostfixExpression;\n/** Represents a unary prefix expression, e.g. a negation. */\nvar UnaryPrefixExpression = /** @class */ (function (_super) {\n    __extends(UnaryPrefixExpression, _super);\n    function UnaryPrefixExpression() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.UNARYPREFIX;\n        return _this;\n    }\n    return UnaryPrefixExpression;\n}(UnaryExpression));\nexports.UnaryPrefixExpression = UnaryPrefixExpression;\n// statements\n/** Base class of all statement nodes. */\nvar Statement = /** @class */ (function (_super) {\n    __extends(Statement, _super);\n    function Statement() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Statement;\n}(Node));\nexports.Statement = Statement;\n/** Indicates the specific kind of a source. */\nvar SourceKind;\n(function (SourceKind) {\n    /** User-provided file. */\n    SourceKind[SourceKind[\"USER\"] = 0] = \"USER\";\n    /** User-provided entry file. */\n    SourceKind[SourceKind[\"USER_ENTRY\"] = 1] = \"USER_ENTRY\";\n    /** Library-provided file. */\n    SourceKind[SourceKind[\"LIBRARY\"] = 2] = \"LIBRARY\";\n    /** Library-provided entry file. */\n    SourceKind[SourceKind[\"LIBRARY_ENTRY\"] = 3] = \"LIBRARY_ENTRY\";\n})(SourceKind = exports.SourceKind || (exports.SourceKind = {}));\n/** A top-level source node. */\nvar Source = /** @class */ (function (_super) {\n    __extends(Source, _super);\n    /** Constructs a new source node. */\n    function Source(normalizedPath, text, kind) {\n        var _this = _super.call(this) || this;\n        _this.kind = NodeKind.SOURCE;\n        _this.parent = null;\n        /** Tokenizer reference. */\n        _this.tokenizer = null;\n        /** Source map index. */\n        _this.debugInfoIndex = -1;\n        /** Re-exported sources. */\n        _this.exportPaths = null;\n        _this.sourceKind = kind;\n        _this.normalizedPath = normalizedPath;\n        var internalPath = mangleInternalPath(_this.normalizedPath);\n        _this.internalPath = internalPath;\n        var pos = internalPath.lastIndexOf(common_1.PATH_DELIMITER);\n        _this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n        _this.statements = new Array();\n        _this.range = new tokenizer_1.Range(_this, 0, text.length);\n        _this.text = text;\n        return _this;\n    }\n    Object.defineProperty(Source.prototype, \"isLibrary\", {\n        get: function () {\n            var kind = this.sourceKind;\n            return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Source;\n}(Node));\nexports.Source = Source;\n/** Base class of all declaration statements. */\nvar DeclarationStatement = /** @class */ (function (_super) {\n    __extends(DeclarationStatement, _super);\n    function DeclarationStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** Array of decorators. */\n        _this.decorators = null;\n        /** Common flags indicating specific traits. */\n        _this.flags = common_1.CommonFlags.NONE;\n        return _this;\n    }\n    /** Tests if this node has the specified flag or flags. */\n    DeclarationStatement.prototype.is = function (flag) { return (this.flags & flag) == flag; };\n    /** Tests if this node has one of the specified flags. */\n    DeclarationStatement.prototype.isAny = function (flag) { return (this.flags & flag) != 0; };\n    /** Sets a specific flag or flags. */\n    DeclarationStatement.prototype.set = function (flag) { this.flags |= flag; };\n    return DeclarationStatement;\n}(Statement));\nexports.DeclarationStatement = DeclarationStatement;\n/** Represents an index signature declaration. */\nvar IndexSignatureDeclaration = /** @class */ (function (_super) {\n    __extends(IndexSignatureDeclaration, _super);\n    function IndexSignatureDeclaration() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.INDEXSIGNATUREDECLARATION;\n        return _this;\n    }\n    return IndexSignatureDeclaration;\n}(DeclarationStatement));\nexports.IndexSignatureDeclaration = IndexSignatureDeclaration;\n/** Base class of all variable-like declaration statements. */\nvar VariableLikeDeclarationStatement = /** @class */ (function (_super) {\n    __extends(VariableLikeDeclarationStatement, _super);\n    function VariableLikeDeclarationStatement() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return VariableLikeDeclarationStatement;\n}(DeclarationStatement));\nexports.VariableLikeDeclarationStatement = VariableLikeDeclarationStatement;\n/** Represents a block statement. */\nvar BlockStatement = /** @class */ (function (_super) {\n    __extends(BlockStatement, _super);\n    function BlockStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.BLOCK;\n        return _this;\n    }\n    return BlockStatement;\n}(Statement));\nexports.BlockStatement = BlockStatement;\n/** Represents a `break` statement. */\nvar BreakStatement = /** @class */ (function (_super) {\n    __extends(BreakStatement, _super);\n    function BreakStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.BREAK;\n        return _this;\n    }\n    return BreakStatement;\n}(Statement));\nexports.BreakStatement = BreakStatement;\n/** Represents a `class` declaration. */\nvar ClassDeclaration = /** @class */ (function (_super) {\n    __extends(ClassDeclaration, _super);\n    function ClassDeclaration() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.CLASSDECLARATION;\n        return _this;\n    }\n    Object.defineProperty(ClassDeclaration.prototype, \"isGeneric\", {\n        get: function () {\n            var typeParameters = this.typeParameters;\n            return typeParameters != null && typeParameters.length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ClassDeclaration;\n}(DeclarationStatement));\nexports.ClassDeclaration = ClassDeclaration;\n/** Represents a `continue` statement. */\nvar ContinueStatement = /** @class */ (function (_super) {\n    __extends(ContinueStatement, _super);\n    function ContinueStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.CONTINUE;\n        return _this;\n    }\n    return ContinueStatement;\n}(Statement));\nexports.ContinueStatement = ContinueStatement;\n/** Represents a `do` statement. */\nvar DoStatement = /** @class */ (function (_super) {\n    __extends(DoStatement, _super);\n    function DoStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.DO;\n        return _this;\n    }\n    return DoStatement;\n}(Statement));\nexports.DoStatement = DoStatement;\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nvar EmptyStatement = /** @class */ (function (_super) {\n    __extends(EmptyStatement, _super);\n    function EmptyStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.EMPTY;\n        return _this;\n    }\n    return EmptyStatement;\n}(Statement));\nexports.EmptyStatement = EmptyStatement;\n/** Represents an `enum` declaration. */\nvar EnumDeclaration = /** @class */ (function (_super) {\n    __extends(EnumDeclaration, _super);\n    function EnumDeclaration() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.ENUMDECLARATION;\n        return _this;\n    }\n    return EnumDeclaration;\n}(DeclarationStatement));\nexports.EnumDeclaration = EnumDeclaration;\n/** Represents a value of an `enum` declaration. */\nvar EnumValueDeclaration = /** @class */ (function (_super) {\n    __extends(EnumValueDeclaration, _super);\n    function EnumValueDeclaration() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.ENUMVALUEDECLARATION;\n        return _this;\n    }\n    return EnumValueDeclaration;\n}(VariableLikeDeclarationStatement));\nexports.EnumValueDeclaration = EnumValueDeclaration;\n/** Represents an `export import` statement of an interface. */\nvar ExportImportStatement = /** @class */ (function (_super) {\n    __extends(ExportImportStatement, _super);\n    function ExportImportStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.EXPORTIMPORT;\n        return _this;\n    }\n    return ExportImportStatement;\n}(Node));\nexports.ExportImportStatement = ExportImportStatement;\n/** Represents a member of an `export` statement. */\nvar ExportMember = /** @class */ (function (_super) {\n    __extends(ExportMember, _super);\n    function ExportMember() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.EXPORTMEMBER;\n        return _this;\n    }\n    return ExportMember;\n}(Node));\nexports.ExportMember = ExportMember;\n/** Represents an `export` statement. */\nvar ExportStatement = /** @class */ (function (_super) {\n    __extends(ExportStatement, _super);\n    function ExportStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.EXPORT;\n        return _this;\n    }\n    return ExportStatement;\n}(Statement));\nexports.ExportStatement = ExportStatement;\n/** Represents an `export default` statement. */\nvar ExportDefaultStatement = /** @class */ (function (_super) {\n    __extends(ExportDefaultStatement, _super);\n    function ExportDefaultStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.EXPORTDEFAULT;\n        return _this;\n    }\n    return ExportDefaultStatement;\n}(Statement));\nexports.ExportDefaultStatement = ExportDefaultStatement;\n/** Represents an expression that is used as a statement. */\nvar ExpressionStatement = /** @class */ (function (_super) {\n    __extends(ExpressionStatement, _super);\n    function ExpressionStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.EXPRESSION;\n        return _this;\n    }\n    return ExpressionStatement;\n}(Statement));\nexports.ExpressionStatement = ExpressionStatement;\n/** Represents a field declaration within a `class`. */\nvar FieldDeclaration = /** @class */ (function (_super) {\n    __extends(FieldDeclaration, _super);\n    function FieldDeclaration() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.FIELDDECLARATION;\n        /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n        _this.parameterIndex = -1;\n        return _this;\n    }\n    return FieldDeclaration;\n}(VariableLikeDeclarationStatement));\nexports.FieldDeclaration = FieldDeclaration;\n/** Represents a `for` statement. */\nvar ForStatement = /** @class */ (function (_super) {\n    __extends(ForStatement, _super);\n    function ForStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.FOR;\n        return _this;\n    }\n    return ForStatement;\n}(Statement));\nexports.ForStatement = ForStatement;\n/** Indicates the kind of an array function. */\nvar ArrowKind;\n(function (ArrowKind) {\n    /** Not an arrow function. */\n    ArrowKind[ArrowKind[\"NONE\"] = 0] = \"NONE\";\n    /** Parenthesized parameter list. */\n    ArrowKind[ArrowKind[\"ARROW_PARENTHESIZED\"] = 1] = \"ARROW_PARENTHESIZED\";\n    /** Single parameter without parenthesis. */\n    ArrowKind[ArrowKind[\"ARROW_SINGLE\"] = 2] = \"ARROW_SINGLE\";\n})(ArrowKind = exports.ArrowKind || (exports.ArrowKind = {}));\n/** Represents a `function` declaration. */\nvar FunctionDeclaration = /** @class */ (function (_super) {\n    __extends(FunctionDeclaration, _super);\n    function FunctionDeclaration() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.FUNCTIONDECLARATION;\n        return _this;\n    }\n    Object.defineProperty(FunctionDeclaration.prototype, \"isGeneric\", {\n        get: function () {\n            var typeParameters = this.typeParameters;\n            return typeParameters != null && typeParameters.length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Clones this function declaration. */\n    FunctionDeclaration.prototype.clone = function () {\n        return Node.createFunctionDeclaration(this.name, this.typeParameters, this.signature, this.body, this.decorators, this.flags, this.arrowKind, this.range);\n    };\n    return FunctionDeclaration;\n}(DeclarationStatement));\nexports.FunctionDeclaration = FunctionDeclaration;\n/** Represents an `if` statement. */\nvar IfStatement = /** @class */ (function (_super) {\n    __extends(IfStatement, _super);\n    function IfStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.IF;\n        return _this;\n    }\n    return IfStatement;\n}(Statement));\nexports.IfStatement = IfStatement;\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nvar ImportDeclaration = /** @class */ (function (_super) {\n    __extends(ImportDeclaration, _super);\n    function ImportDeclaration() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.IMPORTDECLARATION;\n        return _this;\n    }\n    return ImportDeclaration;\n}(DeclarationStatement));\nexports.ImportDeclaration = ImportDeclaration;\n/** Represents an `import` statement. */\nvar ImportStatement = /** @class */ (function (_super) {\n    __extends(ImportStatement, _super);\n    function ImportStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.IMPORT;\n        return _this;\n    }\n    return ImportStatement;\n}(Statement));\nexports.ImportStatement = ImportStatement;\n/** Represents an `interfarce` declaration. */\nvar InterfaceDeclaration = /** @class */ (function (_super) {\n    __extends(InterfaceDeclaration, _super);\n    function InterfaceDeclaration() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.INTERFACEDECLARATION;\n        return _this;\n    }\n    return InterfaceDeclaration;\n}(ClassDeclaration));\nexports.InterfaceDeclaration = InterfaceDeclaration;\n/** Represents a method declaration within a `class`. */\nvar MethodDeclaration = /** @class */ (function (_super) {\n    __extends(MethodDeclaration, _super);\n    function MethodDeclaration() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.METHODDECLARATION;\n        return _this;\n    }\n    return MethodDeclaration;\n}(FunctionDeclaration));\nexports.MethodDeclaration = MethodDeclaration;\n/** Represents a `namespace` declaration. */\nvar NamespaceDeclaration = /** @class */ (function (_super) {\n    __extends(NamespaceDeclaration, _super);\n    function NamespaceDeclaration() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.NAMESPACEDECLARATION;\n        return _this;\n    }\n    return NamespaceDeclaration;\n}(DeclarationStatement));\nexports.NamespaceDeclaration = NamespaceDeclaration;\n/** Represents a `return` statement. */\nvar ReturnStatement = /** @class */ (function (_super) {\n    __extends(ReturnStatement, _super);\n    function ReturnStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.RETURN;\n        return _this;\n    }\n    return ReturnStatement;\n}(Statement));\nexports.ReturnStatement = ReturnStatement;\n/** Represents a single `case` within a `switch` statement. */\nvar SwitchCase = /** @class */ (function (_super) {\n    __extends(SwitchCase, _super);\n    function SwitchCase() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.SWITCHCASE;\n        return _this;\n    }\n    return SwitchCase;\n}(Node));\nexports.SwitchCase = SwitchCase;\n/** Represents a `switch` statement. */\nvar SwitchStatement = /** @class */ (function (_super) {\n    __extends(SwitchStatement, _super);\n    function SwitchStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.SWITCH;\n        return _this;\n    }\n    return SwitchStatement;\n}(Statement));\nexports.SwitchStatement = SwitchStatement;\n/** Represents a `throw` statement. */\nvar ThrowStatement = /** @class */ (function (_super) {\n    __extends(ThrowStatement, _super);\n    function ThrowStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.THROW;\n        return _this;\n    }\n    return ThrowStatement;\n}(Statement));\nexports.ThrowStatement = ThrowStatement;\n/** Represents a `try` statement. */\nvar TryStatement = /** @class */ (function (_super) {\n    __extends(TryStatement, _super);\n    function TryStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.TRY;\n        return _this;\n    }\n    return TryStatement;\n}(Statement));\nexports.TryStatement = TryStatement;\n/** Represents a `type` declaration. */\nvar TypeDeclaration = /** @class */ (function (_super) {\n    __extends(TypeDeclaration, _super);\n    function TypeDeclaration() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.TYPEDECLARATION;\n        return _this;\n    }\n    return TypeDeclaration;\n}(DeclarationStatement));\nexports.TypeDeclaration = TypeDeclaration;\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nvar VariableDeclaration = /** @class */ (function (_super) {\n    __extends(VariableDeclaration, _super);\n    function VariableDeclaration() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.VARIABLEDECLARATION;\n        return _this;\n    }\n    return VariableDeclaration;\n}(VariableLikeDeclarationStatement));\nexports.VariableDeclaration = VariableDeclaration;\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nvar VariableStatement = /** @class */ (function (_super) {\n    __extends(VariableStatement, _super);\n    function VariableStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.VARIABLE;\n        return _this;\n    }\n    return VariableStatement;\n}(Statement));\nexports.VariableStatement = VariableStatement;\n/** Represents a void statement dropping an expression's value. */\nvar VoidStatement = /** @class */ (function (_super) {\n    __extends(VoidStatement, _super);\n    function VoidStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.VOID;\n        return _this;\n    }\n    return VoidStatement;\n}(Statement));\nexports.VoidStatement = VoidStatement;\n/** Represents a `while` statement. */\nvar WhileStatement = /** @class */ (function (_super) {\n    __extends(WhileStatement, _super);\n    function WhileStatement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.kind = NodeKind.WHILE;\n        return _this;\n    }\n    return WhileStatement;\n}(Statement));\nexports.WhileStatement = WhileStatement;\n/** Finds the first decorator matching the specified kind. */\nfunction findDecorator(kind, decorators) {\n    if (decorators) {\n        for (var i = 0, k = decorators.length; i < k; ++i) {\n            var decorator = decorators[i];\n            if (decorator.decoratorKind == kind)\n                return decorator;\n        }\n    }\n    return null;\n}\nexports.findDecorator = findDecorator;\n/** Mangles an external to an internal path. */\nfunction mangleInternalPath(path) {\n    if (path.endsWith(\".ts\"))\n        path = path.substring(0, path.length - 3);\n    return path;\n}\nexports.mangleInternalPath = mangleInternalPath;\n/** Tests if the specified type node represents an omitted type. */\nfunction isTypeOmitted(type) {\n    if (type.kind == NodeKind.NAMEDTYPE) {\n        var name = type.name;\n        return !(name.next || name.identifier.text.length);\n    }\n    return false;\n}\nexports.isTypeOmitted = isTypeOmitted;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * Common constants.\n * @module common\n */ /***/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** Indicates traits of a {@link Node} or {@link Element}. */\nvar CommonFlags;\n(function (CommonFlags) {\n    /** No flags set. */\n    CommonFlags[CommonFlags[\"NONE\"] = 0] = \"NONE\";\n    // Basic modifiers\n    /** Has an `import` modifier. */\n    CommonFlags[CommonFlags[\"IMPORT\"] = 1] = \"IMPORT\";\n    /** Has an `export` modifier. */\n    CommonFlags[CommonFlags[\"EXPORT\"] = 2] = \"EXPORT\";\n    /** Has a `declare` modifier. */\n    CommonFlags[CommonFlags[\"DECLARE\"] = 4] = \"DECLARE\";\n    /** Has a `const` modifier. */\n    CommonFlags[CommonFlags[\"CONST\"] = 8] = \"CONST\";\n    /** Has a `let` modifier. */\n    CommonFlags[CommonFlags[\"LET\"] = 16] = \"LET\";\n    /** Has a `static` modifier. */\n    CommonFlags[CommonFlags[\"STATIC\"] = 32] = \"STATIC\";\n    /** Has a `readonly` modifier. */\n    CommonFlags[CommonFlags[\"READONLY\"] = 64] = \"READONLY\";\n    /** Has an `abstract` modifier. */\n    CommonFlags[CommonFlags[\"ABSTRACT\"] = 128] = \"ABSTRACT\";\n    /** Has a `public` modifier. */\n    CommonFlags[CommonFlags[\"PUBLIC\"] = 256] = \"PUBLIC\";\n    /** Has a `private` modifier. */\n    CommonFlags[CommonFlags[\"PRIVATE\"] = 512] = \"PRIVATE\";\n    /** Has a `protected` modifier. */\n    CommonFlags[CommonFlags[\"PROTECTED\"] = 1024] = \"PROTECTED\";\n    /** Has a `get` modifier. */\n    CommonFlags[CommonFlags[\"GET\"] = 2048] = \"GET\";\n    /** Has a `set` modifier. */\n    CommonFlags[CommonFlags[\"SET\"] = 4096] = \"SET\";\n    /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n    CommonFlags[CommonFlags[\"DEFINITE_ASSIGNMENT\"] = 8192] = \"DEFINITE_ASSIGNMENT\";\n    // Extended modifiers usually derived from basic modifiers\n    /** Is ambient, that is either declared or nested in a declared element. */\n    CommonFlags[CommonFlags[\"AMBIENT\"] = 16384] = \"AMBIENT\";\n    /** Is generic. */\n    CommonFlags[CommonFlags[\"GENERIC\"] = 32768] = \"GENERIC\";\n    /** Is part of a generic context. */\n    CommonFlags[CommonFlags[\"GENERIC_CONTEXT\"] = 65536] = \"GENERIC_CONTEXT\";\n    /** Is an instance member. */\n    CommonFlags[CommonFlags[\"INSTANCE\"] = 131072] = \"INSTANCE\";\n    /** Is a constructor. */\n    CommonFlags[CommonFlags[\"CONSTRUCTOR\"] = 262144] = \"CONSTRUCTOR\";\n    /** Is a module export. */\n    CommonFlags[CommonFlags[\"MODULE_EXPORT\"] = 524288] = \"MODULE_EXPORT\";\n    /** Is a module import. */\n    CommonFlags[CommonFlags[\"MODULE_IMPORT\"] = 1048576] = \"MODULE_IMPORT\";\n    // Compilation states\n    /** Is resolved. */\n    CommonFlags[CommonFlags[\"RESOLVED\"] = 2097152] = \"RESOLVED\";\n    /** Is compiled. */\n    CommonFlags[CommonFlags[\"COMPILED\"] = 4194304] = \"COMPILED\";\n    /** Has a constant value and is therefore inlined. */\n    CommonFlags[CommonFlags[\"INLINED\"] = 8388608] = \"INLINED\";\n    /** Is scoped. */\n    CommonFlags[CommonFlags[\"SCOPED\"] = 16777216] = \"SCOPED\";\n    /** Is a trampoline. */\n    CommonFlags[CommonFlags[\"TRAMPOLINE\"] = 33554432] = \"TRAMPOLINE\";\n    /** Is a virtual method. */\n    CommonFlags[CommonFlags[\"VIRTUAL\"] = 67108864] = \"VIRTUAL\";\n    /** Is the main function. */\n    CommonFlags[CommonFlags[\"MAIN\"] = 134217728] = \"MAIN\";\n    // Other\n    /** Is quoted. */\n    CommonFlags[CommonFlags[\"QUOTED\"] = 268435456] = \"QUOTED\";\n})(CommonFlags = exports.CommonFlags || (exports.CommonFlags = {}));\n/** Path delimiter inserted between file system levels. */\nexports.PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexports.PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexports.GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexports.SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexports.INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexports.STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexports.INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexports.LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexports.LIBRARY_PREFIX = exports.LIBRARY_SUBST + exports.PATH_DELIMITER;\n/** Path index suffix. */\nexports.INDEX_SUFFIX = exports.PATH_DELIMITER + \"index\";\n/** Common compiler symbols. */\nvar CommonSymbols;\n(function (CommonSymbols) {\n    // special\n    CommonSymbols.EMPTY = \"\";\n    // types\n    CommonSymbols.i8 = \"i8\";\n    CommonSymbols.i16 = \"i16\";\n    CommonSymbols.i32 = \"i32\";\n    CommonSymbols.i64 = \"i64\";\n    CommonSymbols.isize = \"isize\";\n    CommonSymbols.u8 = \"u8\";\n    CommonSymbols.u16 = \"u16\";\n    CommonSymbols.u32 = \"u32\";\n    CommonSymbols.u64 = \"u64\";\n    CommonSymbols.usize = \"usize\";\n    CommonSymbols.bool = \"bool\";\n    CommonSymbols.f32 = \"f32\";\n    CommonSymbols.f64 = \"f64\";\n    CommonSymbols.v128 = \"v128\";\n    CommonSymbols.anyref = \"anyref\";\n    CommonSymbols.i8x16 = \"i8x16\";\n    CommonSymbols.u8x16 = \"u8x16\";\n    CommonSymbols.i16x8 = \"i16x8\";\n    CommonSymbols.u16x8 = \"u16x8\";\n    CommonSymbols.i32x4 = \"i32x4\";\n    CommonSymbols.u32x4 = \"u32x4\";\n    CommonSymbols.i64x2 = \"i64x2\";\n    CommonSymbols.u64x2 = \"u64x2\";\n    CommonSymbols.f32x4 = \"f32x4\";\n    CommonSymbols.f64x2 = \"f64x2\";\n    CommonSymbols.void_ = \"void\";\n    CommonSymbols.number = \"number\";\n    CommonSymbols.boolean = \"boolean\";\n    CommonSymbols.string = \"string\";\n    CommonSymbols.native = \"native\";\n    CommonSymbols.indexof = \"indexof\";\n    CommonSymbols.valueof = \"valueof\";\n    CommonSymbols.returnof = \"returnof\";\n    // aliases\n    CommonSymbols.null_ = \"null\";\n    CommonSymbols.true_ = \"true\";\n    CommonSymbols.false_ = \"false\";\n    // objects\n    CommonSymbols.this_ = \"this\";\n    CommonSymbols.super_ = \"super\";\n    CommonSymbols.constructor = \"constructor\";\n    // constants\n    CommonSymbols.ASC_TARGET = \"ASC_TARGET\";\n    CommonSymbols.ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n    CommonSymbols.ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n    CommonSymbols.ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n    CommonSymbols.ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n    CommonSymbols.ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n    CommonSymbols.ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n    CommonSymbols.ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n    CommonSymbols.ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n    CommonSymbols.ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n    CommonSymbols.ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n    CommonSymbols.ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n    CommonSymbols.ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n    CommonSymbols.ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n    CommonSymbols.ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n    // classes\n    CommonSymbols.I8 = \"I8\";\n    CommonSymbols.I16 = \"I16\";\n    CommonSymbols.I32 = \"I32\";\n    CommonSymbols.I64 = \"I64\";\n    CommonSymbols.Isize = \"Isize\";\n    CommonSymbols.U8 = \"U8\";\n    CommonSymbols.U16 = \"U16\";\n    CommonSymbols.U32 = \"U32\";\n    CommonSymbols.U64 = \"U64\";\n    CommonSymbols.Usize = \"Usize\";\n    CommonSymbols.Bool = \"Bool\";\n    CommonSymbols.F32 = \"F32\";\n    CommonSymbols.F64 = \"F64\";\n    CommonSymbols.V128 = \"V128\";\n    CommonSymbols.Anyref = \"Anyref\";\n    CommonSymbols.String = \"String\";\n    CommonSymbols.Array = \"Array\";\n    CommonSymbols.FixedArray = \"FixedArray\";\n    CommonSymbols.Set = \"Set\";\n    CommonSymbols.Map = \"Map\";\n    CommonSymbols.ArrayBufferView = \"ArrayBufferView\";\n    CommonSymbols.ArrayBuffer = \"ArrayBuffer\";\n    CommonSymbols.Math = \"Math\";\n    CommonSymbols.Mathf = \"Mathf\";\n    CommonSymbols.Int8Array = \"Int8Array\";\n    CommonSymbols.Int16Array = \"Int16Array\";\n    CommonSymbols.Int32Array = \"Int32Array\";\n    CommonSymbols.Int64Array = \"Int64Array\";\n    CommonSymbols.Uint8Array = \"Uint8Array\";\n    CommonSymbols.Uint8ClampedArray = \"Uint8ClampedArray\";\n    CommonSymbols.Uint16Array = \"Uint16Array\";\n    CommonSymbols.Uint32Array = \"Uint32Array\";\n    CommonSymbols.Uint64Array = \"Uint64Array\";\n    CommonSymbols.Float32Array = \"Float32Array\";\n    CommonSymbols.Float64Array = \"Float64Array\";\n    // runtime\n    CommonSymbols.abort = \"abort\";\n    CommonSymbols.pow = \"pow\";\n    CommonSymbols.mod = \"mod\";\n    CommonSymbols.alloc = \"__alloc\";\n    CommonSymbols.realloc = \"__realloc\";\n    CommonSymbols.free = \"__free\";\n    CommonSymbols.retain = \"__retain\";\n    CommonSymbols.release = \"__release\";\n    CommonSymbols.collect = \"__collect\";\n    CommonSymbols.typeinfo = \"__typeinfo\";\n    CommonSymbols.instanceof_ = \"__instanceof\";\n    CommonSymbols.visit = \"__visit\";\n    CommonSymbols.allocArray = \"__allocArray\";\n})(CommonSymbols = exports.CommonSymbols || (exports.CommonSymbols = {}));\n// shared\nvar feature_1 = require(\"../std/assembly/shared/feature\");\nexports.Feature = feature_1.Feature;\nvar target_1 = require(\"../std/assembly/shared/target\");\nexports.Target = target_1.Target;\nvar typeinfo_1 = require(\"../std/assembly/shared/typeinfo\");\nexports.Typeinfo = typeinfo_1.Typeinfo;\nexports.TypeinfoFlags = typeinfo_1.TypeinfoFlags;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n */ /***/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* tslint:disable:max-line-length */\n/** Enum of available diagnostic codes. */\nvar DiagnosticCode;\n(function (DiagnosticCode) {\n    DiagnosticCode[DiagnosticCode[\"Operation_not_supported\"] = 100] = \"Operation_not_supported\";\n    DiagnosticCode[DiagnosticCode[\"Operation_is_unsafe\"] = 101] = \"Operation_is_unsafe\";\n    DiagnosticCode[DiagnosticCode[\"User_defined_0\"] = 102] = \"User_defined_0\";\n    DiagnosticCode[DiagnosticCode[\"Conversion_from_type_0_to_1_requires_an_explicit_cast\"] = 200] = \"Conversion_from_type_0_to_1_requires_an_explicit_cast\";\n    DiagnosticCode[DiagnosticCode[\"Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit\"] = 201] = \"Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit\";\n    DiagnosticCode[DiagnosticCode[\"Type_0_cannot_be_changed_to_type_1\"] = 202] = \"Type_0_cannot_be_changed_to_type_1\";\n    DiagnosticCode[DiagnosticCode[\"Type_0_cannot_be_reinterpreted_as_type_1\"] = 203] = \"Type_0_cannot_be_reinterpreted_as_type_1\";\n    DiagnosticCode[DiagnosticCode[\"Basic_type_0_cannot_be_nullable\"] = 204] = \"Basic_type_0_cannot_be_nullable\";\n    DiagnosticCode[DiagnosticCode[\"Cannot_export_a_mutable_global\"] = 205] = \"Cannot_export_a_mutable_global\";\n    DiagnosticCode[DiagnosticCode[\"Mutable_value_cannot_be_inlined\"] = 206] = \"Mutable_value_cannot_be_inlined\";\n    DiagnosticCode[DiagnosticCode[\"Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa\"] = 207] = \"Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa\";\n    DiagnosticCode[DiagnosticCode[\"Unmanaged_classes_cannot_implement_interfaces\"] = 208] = \"Unmanaged_classes_cannot_implement_interfaces\";\n    DiagnosticCode[DiagnosticCode[\"Invalid_regular_expression_flags\"] = 209] = \"Invalid_regular_expression_flags\";\n    DiagnosticCode[DiagnosticCode[\"Implementation_0_must_match_the_signature_1\"] = 210] = \"Implementation_0_must_match_the_signature_1\";\n    DiagnosticCode[DiagnosticCode[\"Class_0_is_sealed_and_cannot_be_extended\"] = 211] = \"Class_0_is_sealed_and_cannot_be_extended\";\n    DiagnosticCode[DiagnosticCode[\"Decorator_0_is_not_valid_here\"] = 212] = \"Decorator_0_is_not_valid_here\";\n    DiagnosticCode[DiagnosticCode[\"Duplicate_decorator\"] = 213] = \"Duplicate_decorator\";\n    DiagnosticCode[DiagnosticCode[\"An_allocator_must_be_present_to_use_0\"] = 214] = \"An_allocator_must_be_present_to_use_0\";\n    DiagnosticCode[DiagnosticCode[\"Optional_parameter_must_have_an_initializer\"] = 215] = \"Optional_parameter_must_have_an_initializer\";\n    DiagnosticCode[DiagnosticCode[\"Constructor_of_class_0_must_not_require_any_arguments\"] = 216] = \"Constructor_of_class_0_must_not_require_any_arguments\";\n    DiagnosticCode[DiagnosticCode[\"Function_0_cannot_be_inlined_into_itself\"] = 217] = \"Function_0_cannot_be_inlined_into_itself\";\n    DiagnosticCode[DiagnosticCode[\"Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set\"] = 218] = \"Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set\";\n    DiagnosticCode[DiagnosticCode[\"Optional_properties_are_not_supported\"] = 219] = \"Optional_properties_are_not_supported\";\n    DiagnosticCode[DiagnosticCode[\"Expression_must_be_a_compile_time_constant\"] = 220] = \"Expression_must_be_a_compile_time_constant\";\n    DiagnosticCode[DiagnosticCode[\"Module_cannot_have_multiple_start_functions\"] = 221] = \"Module_cannot_have_multiple_start_functions\";\n    DiagnosticCode[DiagnosticCode[\"_0_must_be_a_value_between_1_and_2_inclusive\"] = 222] = \"_0_must_be_a_value_between_1_and_2_inclusive\";\n    DiagnosticCode[DiagnosticCode[\"_0_must_be_a_power_of_two\"] = 223] = \"_0_must_be_a_power_of_two\";\n    DiagnosticCode[DiagnosticCode[\"Expression_is_unsafe\"] = 224] = \"Expression_is_unsafe\";\n    DiagnosticCode[DiagnosticCode[\"Expression_is_never_null\"] = 225] = \"Expression_is_never_null\";\n    DiagnosticCode[DiagnosticCode[\"Unterminated_string_literal\"] = 1002] = \"Unterminated_string_literal\";\n    DiagnosticCode[DiagnosticCode[\"Identifier_expected\"] = 1003] = \"Identifier_expected\";\n    DiagnosticCode[DiagnosticCode[\"_0_expected\"] = 1005] = \"_0_expected\";\n    DiagnosticCode[DiagnosticCode[\"A_file_cannot_have_a_reference_to_itself\"] = 1006] = \"A_file_cannot_have_a_reference_to_itself\";\n    DiagnosticCode[DiagnosticCode[\"Trailing_comma_not_allowed\"] = 1009] = \"Trailing_comma_not_allowed\";\n    DiagnosticCode[DiagnosticCode[\"Unexpected_token\"] = 1012] = \"Unexpected_token\";\n    DiagnosticCode[DiagnosticCode[\"A_rest_parameter_must_be_last_in_a_parameter_list\"] = 1014] = \"A_rest_parameter_must_be_last_in_a_parameter_list\";\n    DiagnosticCode[DiagnosticCode[\"Parameter_cannot_have_question_mark_and_initializer\"] = 1015] = \"Parameter_cannot_have_question_mark_and_initializer\";\n    DiagnosticCode[DiagnosticCode[\"A_required_parameter_cannot_follow_an_optional_parameter\"] = 1016] = \"A_required_parameter_cannot_follow_an_optional_parameter\";\n    DiagnosticCode[DiagnosticCode[\"Statements_are_not_allowed_in_ambient_contexts\"] = 1036] = \"Statements_are_not_allowed_in_ambient_contexts\";\n    DiagnosticCode[DiagnosticCode[\"Initializers_are_not_allowed_in_ambient_contexts\"] = 1039] = \"Initializers_are_not_allowed_in_ambient_contexts\";\n    DiagnosticCode[DiagnosticCode[\"_0_modifier_cannot_be_used_here\"] = 1042] = \"_0_modifier_cannot_be_used_here\";\n    DiagnosticCode[DiagnosticCode[\"A_rest_parameter_cannot_be_optional\"] = 1047] = \"A_rest_parameter_cannot_be_optional\";\n    DiagnosticCode[DiagnosticCode[\"A_rest_parameter_cannot_have_an_initializer\"] = 1048] = \"A_rest_parameter_cannot_have_an_initializer\";\n    DiagnosticCode[DiagnosticCode[\"A_set_accessor_must_have_exactly_one_parameter\"] = 1049] = \"A_set_accessor_must_have_exactly_one_parameter\";\n    DiagnosticCode[DiagnosticCode[\"A_set_accessor_parameter_cannot_have_an_initializer\"] = 1052] = \"A_set_accessor_parameter_cannot_have_an_initializer\";\n    DiagnosticCode[DiagnosticCode[\"A_get_accessor_cannot_have_parameters\"] = 1054] = \"A_get_accessor_cannot_have_parameters\";\n    DiagnosticCode[DiagnosticCode[\"Enum_member_must_have_initializer\"] = 1061] = \"Enum_member_must_have_initializer\";\n    DiagnosticCode[DiagnosticCode[\"Type_parameters_cannot_appear_on_a_constructor_declaration\"] = 1092] = \"Type_parameters_cannot_appear_on_a_constructor_declaration\";\n    DiagnosticCode[DiagnosticCode[\"Type_annotation_cannot_appear_on_a_constructor_declaration\"] = 1093] = \"Type_annotation_cannot_appear_on_a_constructor_declaration\";\n    DiagnosticCode[DiagnosticCode[\"An_accessor_cannot_have_type_parameters\"] = 1094] = \"An_accessor_cannot_have_type_parameters\";\n    DiagnosticCode[DiagnosticCode[\"A_set_accessor_cannot_have_a_return_type_annotation\"] = 1095] = \"A_set_accessor_cannot_have_a_return_type_annotation\";\n    DiagnosticCode[DiagnosticCode[\"Type_parameter_list_cannot_be_empty\"] = 1098] = \"Type_parameter_list_cannot_be_empty\";\n    DiagnosticCode[DiagnosticCode[\"A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement\"] = 1104] = \"A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement\";\n    DiagnosticCode[DiagnosticCode[\"A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement\"] = 1105] = \"A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement\";\n    DiagnosticCode[DiagnosticCode[\"A_return_statement_can_only_be_used_within_a_function_body\"] = 1108] = \"A_return_statement_can_only_be_used_within_a_function_body\";\n    DiagnosticCode[DiagnosticCode[\"Expression_expected\"] = 1109] = \"Expression_expected\";\n    DiagnosticCode[DiagnosticCode[\"Type_expected\"] = 1110] = \"Type_expected\";\n    DiagnosticCode[DiagnosticCode[\"A_default_clause_cannot_appear_more_than_once_in_a_switch_statement\"] = 1113] = \"A_default_clause_cannot_appear_more_than_once_in_a_switch_statement\";\n    DiagnosticCode[DiagnosticCode[\"Duplicate_label_0\"] = 1114] = \"Duplicate_label_0\";\n    DiagnosticCode[DiagnosticCode[\"An_export_assignment_cannot_have_modifiers\"] = 1120] = \"An_export_assignment_cannot_have_modifiers\";\n    DiagnosticCode[DiagnosticCode[\"Octal_literals_are_not_allowed_in_strict_mode\"] = 1121] = \"Octal_literals_are_not_allowed_in_strict_mode\";\n    DiagnosticCode[DiagnosticCode[\"Digit_expected\"] = 1124] = \"Digit_expected\";\n    DiagnosticCode[DiagnosticCode[\"Hexadecimal_digit_expected\"] = 1125] = \"Hexadecimal_digit_expected\";\n    DiagnosticCode[DiagnosticCode[\"Unexpected_end_of_text\"] = 1126] = \"Unexpected_end_of_text\";\n    DiagnosticCode[DiagnosticCode[\"Invalid_character\"] = 1127] = \"Invalid_character\";\n    DiagnosticCode[DiagnosticCode[\"_case_or_default_expected\"] = 1130] = \"_case_or_default_expected\";\n    DiagnosticCode[DiagnosticCode[\"_super_must_be_followed_by_an_argument_list_or_member_access\"] = 1034] = \"_super_must_be_followed_by_an_argument_list_or_member_access\";\n    DiagnosticCode[DiagnosticCode[\"A_declare_modifier_cannot_be_used_in_an_already_ambient_context\"] = 1038] = \"A_declare_modifier_cannot_be_used_in_an_already_ambient_context\";\n    DiagnosticCode[DiagnosticCode[\"Type_argument_expected\"] = 1140] = \"Type_argument_expected\";\n    DiagnosticCode[DiagnosticCode[\"String_literal_expected\"] = 1141] = \"String_literal_expected\";\n    DiagnosticCode[DiagnosticCode[\"Line_break_not_permitted_here\"] = 1142] = \"Line_break_not_permitted_here\";\n    DiagnosticCode[DiagnosticCode[\"Declaration_expected\"] = 1146] = \"Declaration_expected\";\n    DiagnosticCode[DiagnosticCode[\"_const_declarations_must_be_initialized\"] = 1155] = \"_const_declarations_must_be_initialized\";\n    DiagnosticCode[DiagnosticCode[\"Unterminated_regular_expression_literal\"] = 1161] = \"Unterminated_regular_expression_literal\";\n    DiagnosticCode[DiagnosticCode[\"Interface_declaration_cannot_have_implements_clause\"] = 1176] = \"Interface_declaration_cannot_have_implements_clause\";\n    DiagnosticCode[DiagnosticCode[\"Binary_digit_expected\"] = 1177] = \"Binary_digit_expected\";\n    DiagnosticCode[DiagnosticCode[\"Octal_digit_expected\"] = 1178] = \"Octal_digit_expected\";\n    DiagnosticCode[DiagnosticCode[\"An_implementation_cannot_be_declared_in_ambient_contexts\"] = 1183] = \"An_implementation_cannot_be_declared_in_ambient_contexts\";\n    DiagnosticCode[DiagnosticCode[\"An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive\"] = 1198] = \"An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive\";\n    DiagnosticCode[DiagnosticCode[\"Unterminated_Unicode_escape_sequence\"] = 1199] = \"Unterminated_Unicode_escape_sequence\";\n    DiagnosticCode[DiagnosticCode[\"Decorators_are_not_valid_here\"] = 1206] = \"Decorators_are_not_valid_here\";\n    DiagnosticCode[DiagnosticCode[\"_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration\"] = 1242] = \"_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration\";\n    DiagnosticCode[DiagnosticCode[\"Method_0_cannot_have_an_implementation_because_it_is_marked_abstract\"] = 1245] = \"Method_0_cannot_have_an_implementation_because_it_is_marked_abstract\";\n    DiagnosticCode[DiagnosticCode[\"A_definite_assignment_assertion_is_not_permitted_in_this_context\"] = 1255] = \"A_definite_assignment_assertion_is_not_permitted_in_this_context\";\n    DiagnosticCode[DiagnosticCode[\"A_class_may_only_extend_another_class\"] = 1311] = \"A_class_may_only_extend_another_class\";\n    DiagnosticCode[DiagnosticCode[\"A_parameter_property_cannot_be_declared_using_a_rest_parameter\"] = 1317] = \"A_parameter_property_cannot_be_declared_using_a_rest_parameter\";\n    DiagnosticCode[DiagnosticCode[\"Duplicate_identifier_0\"] = 2300] = \"Duplicate_identifier_0\";\n    DiagnosticCode[DiagnosticCode[\"Cannot_find_name_0\"] = 2304] = \"Cannot_find_name_0\";\n    DiagnosticCode[DiagnosticCode[\"Module_0_has_no_exported_member_1\"] = 2305] = \"Module_0_has_no_exported_member_1\";\n    DiagnosticCode[DiagnosticCode[\"Generic_type_0_requires_1_type_argument_s\"] = 2314] = \"Generic_type_0_requires_1_type_argument_s\";\n    DiagnosticCode[DiagnosticCode[\"Type_0_is_not_generic\"] = 2315] = \"Type_0_is_not_generic\";\n    DiagnosticCode[DiagnosticCode[\"Type_0_is_not_assignable_to_type_1\"] = 2322] = \"Type_0_is_not_assignable_to_type_1\";\n    DiagnosticCode[DiagnosticCode[\"Index_signature_is_missing_in_type_0\"] = 2329] = \"Index_signature_is_missing_in_type_0\";\n    DiagnosticCode[DiagnosticCode[\"_this_cannot_be_referenced_in_current_location\"] = 2332] = \"_this_cannot_be_referenced_in_current_location\";\n    DiagnosticCode[DiagnosticCode[\"_super_can_only_be_referenced_in_a_derived_class\"] = 2335] = \"_super_can_only_be_referenced_in_a_derived_class\";\n    DiagnosticCode[DiagnosticCode[\"Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors\"] = 2337] = \"Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors\";\n    DiagnosticCode[DiagnosticCode[\"Property_0_does_not_exist_on_type_1\"] = 2339] = \"Property_0_does_not_exist_on_type_1\";\n    DiagnosticCode[DiagnosticCode[\"Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures\"] = 2349] = \"Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures\";\n    DiagnosticCode[DiagnosticCode[\"Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature\"] = 2351] = \"Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature\";\n    DiagnosticCode[DiagnosticCode[\"A_function_whose_declared_type_is_not_void_must_return_a_value\"] = 2355] = \"A_function_whose_declared_type_is_not_void_must_return_a_value\";\n    DiagnosticCode[DiagnosticCode[\"The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access\"] = 2357] = \"The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access\";\n    DiagnosticCode[DiagnosticCode[\"The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access\"] = 2364] = \"The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access\";\n    DiagnosticCode[DiagnosticCode[\"Operator_0_cannot_be_applied_to_types_1_and_2\"] = 2365] = \"Operator_0_cannot_be_applied_to_types_1_and_2\";\n    DiagnosticCode[DiagnosticCode[\"A_super_call_must_be_the_first_statement_in_the_constructor\"] = 2376] = \"A_super_call_must_be_the_first_statement_in_the_constructor\";\n    DiagnosticCode[DiagnosticCode[\"Constructors_for_derived_classes_must_contain_a_super_call\"] = 2377] = \"Constructors_for_derived_classes_must_contain_a_super_call\";\n    DiagnosticCode[DiagnosticCode[\"_get_and_set_accessor_must_have_the_same_type\"] = 2380] = \"_get_and_set_accessor_must_have_the_same_type\";\n    DiagnosticCode[DiagnosticCode[\"Constructor_implementation_is_missing\"] = 2390] = \"Constructor_implementation_is_missing\";\n    DiagnosticCode[DiagnosticCode[\"Function_implementation_is_missing_or_not_immediately_following_the_declaration\"] = 2391] = \"Function_implementation_is_missing_or_not_immediately_following_the_declaration\";\n    DiagnosticCode[DiagnosticCode[\"Multiple_constructor_implementations_are_not_allowed\"] = 2392] = \"Multiple_constructor_implementations_are_not_allowed\";\n    DiagnosticCode[DiagnosticCode[\"Duplicate_function_implementation\"] = 2393] = \"Duplicate_function_implementation\";\n    DiagnosticCode[DiagnosticCode[\"Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local\"] = 2395] = \"Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local\";\n    DiagnosticCode[DiagnosticCode[\"A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged\"] = 2434] = \"A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged\";\n    DiagnosticCode[DiagnosticCode[\"Type_0_has_no_property_1\"] = 2460] = \"Type_0_has_no_property_1\";\n    DiagnosticCode[DiagnosticCode[\"The_0_operator_cannot_be_applied_to_type_1\"] = 2469] = \"The_0_operator_cannot_be_applied_to_type_1\";\n    DiagnosticCode[DiagnosticCode[\"In_const_enum_declarations_member_initializer_must_be_constant_expression\"] = 2474] = \"In_const_enum_declarations_member_initializer_must_be_constant_expression\";\n    DiagnosticCode[DiagnosticCode[\"Export_declaration_conflicts_with_exported_declaration_of_0\"] = 2484] = \"Export_declaration_conflicts_with_exported_declaration_of_0\";\n    DiagnosticCode[DiagnosticCode[\"Object_is_possibly_null\"] = 2531] = \"Object_is_possibly_null\";\n    DiagnosticCode[DiagnosticCode[\"Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property\"] = 2540] = \"Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property\";\n    DiagnosticCode[DiagnosticCode[\"The_target_of_an_assignment_must_be_a_variable_or_a_property_access\"] = 2541] = \"The_target_of_an_assignment_must_be_a_variable_or_a_property_access\";\n    DiagnosticCode[DiagnosticCode[\"Index_signature_in_type_0_only_permits_reading\"] = 2542] = \"Index_signature_in_type_0_only_permits_reading\";\n    DiagnosticCode[DiagnosticCode[\"Expected_0_arguments_but_got_1\"] = 2554] = \"Expected_0_arguments_but_got_1\";\n    DiagnosticCode[DiagnosticCode[\"Expected_at_least_0_arguments_but_got_1\"] = 2555] = \"Expected_at_least_0_arguments_but_got_1\";\n    DiagnosticCode[DiagnosticCode[\"Expected_0_type_arguments_but_got_1\"] = 2558] = \"Expected_0_type_arguments_but_got_1\";\n    DiagnosticCode[DiagnosticCode[\"A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums\"] = 2651] = \"A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums\";\n    DiagnosticCode[DiagnosticCode[\"Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration\"] = 2673] = \"Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration\";\n    DiagnosticCode[DiagnosticCode[\"Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration\"] = 2674] = \"Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration\";\n    DiagnosticCode[DiagnosticCode[\"Namespace_0_has_no_exported_member_1\"] = 2694] = \"Namespace_0_has_no_exported_member_1\";\n    DiagnosticCode[DiagnosticCode[\"Required_type_parameters_may_not_follow_optional_type_parameters\"] = 2706] = \"Required_type_parameters_may_not_follow_optional_type_parameters\";\n    DiagnosticCode[DiagnosticCode[\"Duplicate_property_0\"] = 2718] = \"Duplicate_property_0\";\n    DiagnosticCode[DiagnosticCode[\"Type_0_has_no_call_signatures\"] = 2757] = \"Type_0_has_no_call_signatures\";\n    DiagnosticCode[DiagnosticCode[\"File_0_not_found\"] = 6054] = \"File_0_not_found\";\n    DiagnosticCode[DiagnosticCode[\"Numeric_separators_are_not_allowed_here\"] = 6188] = \"Numeric_separators_are_not_allowed_here\";\n    DiagnosticCode[DiagnosticCode[\"Multiple_consecutive_numeric_separators_are_not_permitted\"] = 6189] = \"Multiple_consecutive_numeric_separators_are_not_permitted\";\n    DiagnosticCode[DiagnosticCode[\"_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class\"] = 17009] = \"_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class\";\n    DiagnosticCode[DiagnosticCode[\"_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class\"] = 17011] = \"_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class\";\n})(DiagnosticCode = exports.DiagnosticCode || (exports.DiagnosticCode = {}));\n/** Translates a diagnostic code to its respective string. */\nfunction diagnosticCodeToString(code) {\n    switch (code) {\n        case 100: return \"Operation not supported.\";\n        case 101: return \"Operation is unsafe.\";\n        case 102: return \"User-defined: {0}\";\n        case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n        case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n        case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n        case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n        case 204: return \"Basic type '{0}' cannot be nullable.\";\n        case 205: return \"Cannot export a mutable global.\";\n        case 206: return \"Mutable value cannot be inlined.\";\n        case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n        case 208: return \"Unmanaged classes cannot implement interfaces.\";\n        case 209: return \"Invalid regular expression flags.\";\n        case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n        case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n        case 212: return \"Decorator '{0}' is not valid here.\";\n        case 213: return \"Duplicate decorator.\";\n        case 214: return \"An allocator must be present to use '{0}'.\";\n        case 215: return \"Optional parameter must have an initializer.\";\n        case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n        case 217: return \"Function '{0}' cannot be inlined into itself.\";\n        case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n        case 219: return \"Optional properties are not supported.\";\n        case 220: return \"Expression must be a compile-time constant.\";\n        case 221: return \"Module cannot have multiple start functions.\";\n        case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n        case 223: return \"'{0}' must be a power of two.\";\n        case 224: return \"Expression is unsafe.\";\n        case 225: return \"Expression is never 'null'.\";\n        case 1002: return \"Unterminated string literal.\";\n        case 1003: return \"Identifier expected.\";\n        case 1005: return \"'{0}' expected.\";\n        case 1006: return \"A file cannot have a reference to itself.\";\n        case 1009: return \"Trailing comma not allowed.\";\n        case 1012: return \"Unexpected token.\";\n        case 1014: return \"A rest parameter must be last in a parameter list.\";\n        case 1015: return \"Parameter cannot have question mark and initializer.\";\n        case 1016: return \"A required parameter cannot follow an optional parameter.\";\n        case 1036: return \"Statements are not allowed in ambient contexts.\";\n        case 1039: return \"Initializers are not allowed in ambient contexts.\";\n        case 1042: return \"'{0}' modifier cannot be used here.\";\n        case 1047: return \"A rest parameter cannot be optional.\";\n        case 1048: return \"A rest parameter cannot have an initializer.\";\n        case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n        case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n        case 1054: return \"A 'get' accessor cannot have parameters.\";\n        case 1061: return \"Enum member must have initializer.\";\n        case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n        case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n        case 1094: return \"An accessor cannot have type parameters.\";\n        case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n        case 1098: return \"Type parameter list cannot be empty.\";\n        case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n        case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n        case 1108: return \"A 'return' statement can only be used within a function body.\";\n        case 1109: return \"Expression expected.\";\n        case 1110: return \"Type expected.\";\n        case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n        case 1114: return \"Duplicate label '{0}'.\";\n        case 1120: return \"An export assignment cannot have modifiers.\";\n        case 1121: return \"Octal literals are not allowed in strict mode.\";\n        case 1124: return \"Digit expected.\";\n        case 1125: return \"Hexadecimal digit expected.\";\n        case 1126: return \"Unexpected end of text.\";\n        case 1127: return \"Invalid character.\";\n        case 1130: return \"'case' or 'default' expected.\";\n        case 1034: return \"'super' must be followed by an argument list or member access.\";\n        case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n        case 1140: return \"Type argument expected.\";\n        case 1141: return \"String literal expected.\";\n        case 1142: return \"Line break not permitted here.\";\n        case 1146: return \"Declaration expected.\";\n        case 1155: return \"'const' declarations must be initialized.\";\n        case 1161: return \"Unterminated regular expression literal.\";\n        case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n        case 1177: return \"Binary digit expected.\";\n        case 1178: return \"Octal digit expected.\";\n        case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n        case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n        case 1199: return \"Unterminated Unicode escape sequence.\";\n        case 1206: return \"Decorators are not valid here.\";\n        case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n        case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n        case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n        case 1311: return \"A class may only extend another class.\";\n        case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n        case 2300: return \"Duplicate identifier '{0}'.\";\n        case 2304: return \"Cannot find name '{0}'.\";\n        case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n        case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n        case 2315: return \"Type '{0}' is not generic.\";\n        case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n        case 2329: return \"Index signature is missing in type '{0}'.\";\n        case 2332: return \"'this' cannot be referenced in current location.\";\n        case 2335: return \"'super' can only be referenced in a derived class.\";\n        case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n        case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n        case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n        case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n        case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n        case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n        case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n        case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n        case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n        case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n        case 2380: return \"'get' and 'set' accessor must have the same type.\";\n        case 2390: return \"Constructor implementation is missing.\";\n        case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n        case 2392: return \"Multiple constructor implementations are not allowed.\";\n        case 2393: return \"Duplicate function implementation.\";\n        case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n        case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n        case 2460: return \"Type '{0}' has no property '{1}'.\";\n        case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n        case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n        case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n        case 2531: return \"Object is possibly 'null'.\";\n        case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n        case 2541: return \"The target of an assignment must be a variable or a property access.\";\n        case 2542: return \"Index signature in type '{0}' only permits reading.\";\n        case 2554: return \"Expected {0} arguments, but got {1}.\";\n        case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n        case 2558: return \"Expected {0} type arguments, but got {1}.\";\n        case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n        case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n        case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n        case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n        case 2706: return \"Required type parameters may not follow optional type parameters.\";\n        case 2718: return \"Duplicate property '{0}'.\";\n        case 2757: return \"Type '{0}' has no call signatures.\";\n        case 6054: return \"File '{0}' not found.\";\n        case 6188: return \"Numeric separators are not allowed here.\";\n        case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n        case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n        case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n        default: return \"\";\n    }\n}\nexports.diagnosticCodeToString = diagnosticCodeToString;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ25vc3RpY01lc3NhZ2VzLmdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaWFnbm9zdGljTWVzc2FnZXMuZ2VuZXJhdGVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0csQ0FBQSxLQUFLOztBQUVSLG9DQUFvQztBQUVwQywwQ0FBMEM7QUFDMUMsSUFBWSxjQXdJWDtBQXhJRCxXQUFZLGNBQWM7SUFDeEIsMkZBQTZCLENBQUE7SUFDN0IsbUZBQXlCLENBQUE7SUFDekIseUVBQW9CLENBQUE7SUFDcEIsdUpBQTJELENBQUE7SUFDM0QsaU9BQWdHLENBQUE7SUFDaEcsaUhBQXdDLENBQUE7SUFDeEMsNkhBQThDLENBQUE7SUFDOUMsMkdBQXFDLENBQUE7SUFDckMseUdBQW9DLENBQUE7SUFDcEMsMkdBQXFDLENBQUE7SUFDckMseUtBQW9FLENBQUE7SUFDcEUsdUlBQW1ELENBQUE7SUFDbkQsNkdBQXNDLENBQUE7SUFDdEMsbUlBQWlELENBQUE7SUFDakQsNkhBQThDLENBQUE7SUFDOUMsdUdBQW1DLENBQUE7SUFDbkMsbUZBQXlCLENBQUE7SUFDekIsdUhBQTJDLENBQUE7SUFDM0MsbUlBQWlELENBQUE7SUFDakQsdUpBQTJELENBQUE7SUFDM0QsNkhBQThDLENBQUE7SUFDOUMsMkxBQTZFLENBQUE7SUFDN0UsdUhBQTJDLENBQUE7SUFDM0MsaUlBQWdELENBQUE7SUFDaEQsbUlBQWlELENBQUE7SUFDakQscUlBQWtELENBQUE7SUFDbEQsK0ZBQStCLENBQUE7SUFDL0IscUZBQTBCLENBQUE7SUFDMUIsNkZBQThCLENBQUE7SUFDOUIsb0dBQWtDLENBQUE7SUFDbEMsb0ZBQTBCLENBQUE7SUFDMUIsb0VBQWtCLENBQUE7SUFDbEIsOEhBQStDLENBQUE7SUFDL0Msa0dBQWlDLENBQUE7SUFDakMsOEVBQXVCLENBQUE7SUFDdkIsZ0pBQXdELENBQUE7SUFDeEQsb0pBQTBELENBQUE7SUFDMUQsOEpBQStELENBQUE7SUFDL0QsMElBQXFELENBQUE7SUFDckQsOElBQXVELENBQUE7SUFDdkQsNEdBQXNDLENBQUE7SUFDdEMsb0hBQTBDLENBQUE7SUFDMUMsb0lBQWtELENBQUE7SUFDbEQsMElBQXFELENBQUE7SUFDckQsb0pBQTBELENBQUE7SUFDMUQsd0hBQTRDLENBQUE7SUFDNUMsZ0hBQXdDLENBQUE7SUFDeEMsa0tBQWlFLENBQUE7SUFDakUsa0tBQWlFLENBQUE7SUFDakUsNEhBQThDLENBQUE7SUFDOUMsb0pBQTBELENBQUE7SUFDMUQsb0hBQTBDLENBQUE7SUFDMUMsd01BQW9GLENBQUE7SUFDcEYsc05BQTJGLENBQUE7SUFDM0Ysa0tBQWlFLENBQUE7SUFDakUsb0ZBQTBCLENBQUE7SUFDMUIsd0VBQW9CLENBQUE7SUFDcEIsb0xBQTBFLENBQUE7SUFDMUUsZ0ZBQXdCLENBQUE7SUFDeEIsa0lBQWlELENBQUE7SUFDakQsd0lBQW9ELENBQUE7SUFDcEQsMEVBQXFCLENBQUE7SUFDckIsa0dBQWlDLENBQUE7SUFDakMsMEZBQTZCLENBQUE7SUFDN0IsZ0ZBQXdCLENBQUE7SUFDeEIsZ0dBQWdDLENBQUE7SUFDaEMsc0tBQW1FLENBQUE7SUFDbkUsNEtBQXNFLENBQUE7SUFDdEUsMEZBQTZCLENBQUE7SUFDN0IsNEZBQThCLENBQUE7SUFDOUIsd0dBQW9DLENBQUE7SUFDcEMsc0ZBQTJCLENBQUE7SUFDM0IsNEhBQThDLENBQUE7SUFDOUMsNEhBQThDLENBQUE7SUFDOUMsb0pBQTBELENBQUE7SUFDMUQsd0ZBQTRCLENBQUE7SUFDNUIsc0ZBQTJCLENBQUE7SUFDM0IsOEpBQStELENBQUE7SUFDL0Qsb01BQWtGLENBQUE7SUFDbEYsc0hBQTJDLENBQUE7SUFDM0Msd0dBQW9DLENBQUE7SUFDcEMsc01BQW1GLENBQUE7SUFDbkYsc0xBQTJFLENBQUE7SUFDM0UsOEtBQXVFLENBQUE7SUFDdkUsd0hBQTRDLENBQUE7SUFDNUMsMEtBQXFFLENBQUE7SUFDckUsMEZBQTZCLENBQUE7SUFDN0Isa0ZBQXlCLENBQUE7SUFDekIsZ0hBQXdDLENBQUE7SUFDeEMsZ0lBQWdELENBQUE7SUFDaEQsd0ZBQTRCLENBQUE7SUFDNUIsa0hBQXlDLENBQUE7SUFDekMsc0hBQTJDLENBQUE7SUFDM0MsMElBQXFELENBQUE7SUFDckQsOElBQXVELENBQUE7SUFDdkQsd09BQW9HLENBQUE7SUFDcEcsb0hBQTBDLENBQUE7SUFDMUMsMFBBQTZHLENBQUE7SUFDN0csOExBQStFLENBQUE7SUFDL0UsMEtBQXFFLENBQUE7SUFDckUsZ09BQWdHLENBQUE7SUFDaEcsME5BQTZGLENBQUE7SUFDN0Ysd0lBQW9ELENBQUE7SUFDcEQsb0tBQWtFLENBQUE7SUFDbEUsa0tBQWlFLENBQUE7SUFDakUsd0lBQW9ELENBQUE7SUFDcEQsd0hBQTRDLENBQUE7SUFDNUMsNE1BQXNGLENBQUE7SUFDdEYsc0pBQTJELENBQUE7SUFDM0QsZ0hBQXdDLENBQUE7SUFDeEMsZ05BQXdGLENBQUE7SUFDeEYsME9BQXFHLENBQUE7SUFDckcsOEZBQStCLENBQUE7SUFDL0Isa0lBQWlELENBQUE7SUFDakQsZ01BQWdGLENBQUE7SUFDaEYsb0tBQWtFLENBQUE7SUFDbEUsNEZBQThCLENBQUE7SUFDOUIsb0xBQTBFLENBQUE7SUFDMUUsb0xBQTBFLENBQUE7SUFDMUUsMElBQXFELENBQUE7SUFDckQsMEdBQXFDLENBQUE7SUFDckMsNEhBQThDLENBQUE7SUFDOUMsb0hBQTBDLENBQUE7SUFDMUMsMFNBQXFJLENBQUE7SUFDckksa05BQXlGLENBQUE7SUFDekYsc05BQTJGLENBQUE7SUFDM0Ysc0hBQTJDLENBQUE7SUFDM0MsOEtBQXVFLENBQUE7SUFDdkUsc0ZBQTJCLENBQUE7SUFDM0Isd0dBQW9DLENBQUE7SUFDcEMsOEVBQXVCLENBQUE7SUFDdkIsNEhBQThDLENBQUE7SUFDOUMsZ0tBQWdFLENBQUE7SUFDaEUsaU5BQXlGLENBQUE7SUFDekYsK09BQXdHLENBQUE7QUFDMUcsQ0FBQyxFQXhJVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQXdJekI7QUFFRCw2REFBNkQ7QUFDN0QsU0FBZ0Isc0JBQXNCLENBQUMsSUFBb0I7SUFDekQsUUFBUSxJQUFJLEVBQUU7UUFDWixLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sMEJBQTBCLENBQUM7UUFDNUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLHNCQUFzQixDQUFDO1FBQ3hDLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxtQkFBbUIsQ0FBQztRQUNyQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sZ0VBQWdFLENBQUM7UUFDbEYsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLHFHQUFxRyxDQUFDO1FBQ3ZILEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyw2Q0FBNkMsQ0FBQztRQUMvRCxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sbURBQW1ELENBQUM7UUFDckUsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLHNDQUFzQyxDQUFDO1FBQ3hELEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxpQ0FBaUMsQ0FBQztRQUNuRCxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sa0NBQWtDLENBQUM7UUFDcEQsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLGlFQUFpRSxDQUFDO1FBQ25GLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxnREFBZ0QsQ0FBQztRQUNsRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sbUNBQW1DLENBQUM7UUFDckQsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLHNEQUFzRCxDQUFDO1FBQ3hFLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTywrQ0FBK0MsQ0FBQztRQUNqRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sb0NBQW9DLENBQUM7UUFDdEQsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLHNCQUFzQixDQUFDO1FBQ3hDLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyw0Q0FBNEMsQ0FBQztRQUM5RCxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sOENBQThDLENBQUM7UUFDaEUsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLDREQUE0RCxDQUFDO1FBQzlFLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTywrQ0FBK0MsQ0FBQztRQUNqRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sZ0ZBQWdGLENBQUM7UUFDbEcsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLHdDQUF3QyxDQUFDO1FBQzFELEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyw2Q0FBNkMsQ0FBQztRQUMvRCxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sOENBQThDLENBQUM7UUFDaEUsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLDBEQUEwRCxDQUFDO1FBQzVFLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTywrQkFBK0IsQ0FBQztRQUNqRCxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sdUJBQXVCLENBQUM7UUFDekMsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLDZCQUE2QixDQUFDO1FBQy9DLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyw4QkFBOEIsQ0FBQztRQUNqRCxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sc0JBQXNCLENBQUM7UUFDekMsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLGlCQUFpQixDQUFDO1FBQ3BDLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTywyQ0FBMkMsQ0FBQztRQUM5RCxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sNkJBQTZCLENBQUM7UUFDaEQsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLG1CQUFtQixDQUFDO1FBQ3RDLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxvREFBb0QsQ0FBQztRQUN2RSxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sc0RBQXNELENBQUM7UUFDekUsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLDJEQUEyRCxDQUFDO1FBQzlFLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxpREFBaUQsQ0FBQztRQUNwRSxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sbURBQW1ELENBQUM7UUFDdEUsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLHFDQUFxQyxDQUFDO1FBQ3hELEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxzQ0FBc0MsQ0FBQztRQUN6RCxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sOENBQThDLENBQUM7UUFDakUsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLG1EQUFtRCxDQUFDO1FBQ3RFLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyx3REFBd0QsQ0FBQztRQUMzRSxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sMENBQTBDLENBQUM7UUFDN0QsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLG9DQUFvQyxDQUFDO1FBQ3ZELEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyw2REFBNkQsQ0FBQztRQUNoRixLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sNkRBQTZELENBQUM7UUFDaEYsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLDBDQUEwQyxDQUFDO1FBQzdELEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyx3REFBd0QsQ0FBQztRQUMzRSxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sc0NBQXNDLENBQUM7UUFDekQsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLGtGQUFrRixDQUFDO1FBQ3JHLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyx5RkFBeUYsQ0FBQztRQUM1RyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sK0RBQStELENBQUM7UUFDbEYsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLHNCQUFzQixDQUFDO1FBQ3pDLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxnQkFBZ0IsQ0FBQztRQUNuQyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sMEVBQTBFLENBQUM7UUFDN0YsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLHdCQUF3QixDQUFDO1FBQzNDLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyw2Q0FBNkMsQ0FBQztRQUNoRSxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sZ0RBQWdELENBQUM7UUFDbkUsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLGlCQUFpQixDQUFDO1FBQ3BDLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyw2QkFBNkIsQ0FBQztRQUNoRCxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8seUJBQXlCLENBQUM7UUFDNUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLG9CQUFvQixDQUFDO1FBQ3ZDLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTywrQkFBK0IsQ0FBQztRQUNsRCxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sZ0VBQWdFLENBQUM7UUFDbkYsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLG9FQUFvRSxDQUFDO1FBQ3ZGLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyx5QkFBeUIsQ0FBQztRQUM1QyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sMEJBQTBCLENBQUM7UUFDN0MsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLGdDQUFnQyxDQUFDO1FBQ25ELEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyx1QkFBdUIsQ0FBQztRQUMxQyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sMkNBQTJDLENBQUM7UUFDOUQsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLDBDQUEwQyxDQUFDO1FBQzdELEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyx3REFBd0QsQ0FBQztRQUMzRSxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sd0JBQXdCLENBQUM7UUFDM0MsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLHVCQUF1QixDQUFDO1FBQzFDLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTywyREFBMkQsQ0FBQztRQUM5RSxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sOEVBQThFLENBQUM7UUFDakcsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLHVDQUF1QyxDQUFDO1FBQzFELEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxnQ0FBZ0MsQ0FBQztRQUNuRCxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sa0ZBQWtGLENBQUM7UUFDckcsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLDJFQUEyRSxDQUFDO1FBQzlGLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyx1RUFBdUUsQ0FBQztRQUMxRixLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sd0NBQXdDLENBQUM7UUFDM0QsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLGlFQUFpRSxDQUFDO1FBQ3BGLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyw2QkFBNkIsQ0FBQztRQUNoRCxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8seUJBQXlCLENBQUM7UUFDNUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLDRDQUE0QyxDQUFDO1FBQy9ELEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxtREFBbUQsQ0FBQztRQUN0RSxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sNEJBQTRCLENBQUM7UUFDL0MsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLDZDQUE2QyxDQUFDO1FBQ2hFLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTywyQ0FBMkMsQ0FBQztRQUM5RCxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sa0RBQWtELENBQUM7UUFDckUsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLG9EQUFvRCxDQUFDO1FBQ3ZFLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxnR0FBZ0csQ0FBQztRQUNuSCxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sOENBQThDLENBQUM7UUFDakUsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLDhHQUE4RyxDQUFDO1FBQ2pJLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyw2RUFBNkUsQ0FBQztRQUNoRyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sbUVBQW1FLENBQUM7UUFDdEYsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLDRGQUE0RixDQUFDO1FBQy9HLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyx5RkFBeUYsQ0FBQztRQUM1RyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sNERBQTRELENBQUM7UUFDL0UsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLGdFQUFnRSxDQUFDO1FBQ25GLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTywrREFBK0QsQ0FBQztRQUNsRixLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sbURBQW1ELENBQUM7UUFDdEUsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLHdDQUF3QyxDQUFDO1FBQzNELEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxrRkFBa0YsQ0FBQztRQUNyRyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sdURBQXVELENBQUM7UUFDMUUsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLG9DQUFvQyxDQUFDO1FBQ3ZELEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyx3RkFBd0YsQ0FBQztRQUMzRyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8saUdBQWlHLENBQUM7UUFDcEgsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLG1DQUFtQyxDQUFDO1FBQ3RELEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxxREFBcUQsQ0FBQztRQUN4RSxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sOEVBQThFLENBQUM7UUFDakcsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLGtFQUFrRSxDQUFDO1FBQ3JGLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyw0QkFBNEIsQ0FBQztRQUMvQyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sMEVBQTBFLENBQUM7UUFDN0YsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLHNFQUFzRSxDQUFDO1FBQ3pGLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxxREFBcUQsQ0FBQztRQUN4RSxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sc0NBQXNDLENBQUM7UUFDekQsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLCtDQUErQyxDQUFDO1FBQ2xFLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTywyQ0FBMkMsQ0FBQztRQUM5RCxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sa0lBQWtJLENBQUM7UUFDckosS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLHlGQUF5RixDQUFDO1FBQzVHLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTywyRkFBMkYsQ0FBQztRQUM5RyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sK0NBQStDLENBQUM7UUFDbEUsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLG1FQUFtRSxDQUFDO1FBQ3RGLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTywyQkFBMkIsQ0FBQztRQUM5QyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sb0NBQW9DLENBQUM7UUFDdkQsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLHVCQUF1QixDQUFDO1FBQzFDLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTywwQ0FBMEMsQ0FBQztRQUM3RCxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sNERBQTRELENBQUM7UUFDL0UsS0FBSyxLQUFLLENBQUMsQ0FBQyxPQUFPLHVGQUF1RixDQUFDO1FBQzNHLEtBQUssS0FBSyxDQUFDLENBQUMsT0FBTyxzR0FBc0csQ0FBQztRQUMxSCxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUNwQjtBQUNILENBQUM7QUEzSUQsd0RBMklDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZW5lcmF0ZWQgZnJvbSBkaWFnbm9zdGljc01lc3NhZ2VzLmpzb24uIERvIG5vdCBlZGl0LlxuICogQG1vZHVsZSBkaWFnbm9zdGljc1xuICovLyoqKi9cblxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXG5cbi8qKiBFbnVtIG9mIGF2YWlsYWJsZSBkaWFnbm9zdGljIGNvZGVzLiAqL1xuZXhwb3J0IGVudW0gRGlhZ25vc3RpY0NvZGUge1xuICBPcGVyYXRpb25fbm90X3N1cHBvcnRlZCA9IDEwMCxcbiAgT3BlcmF0aW9uX2lzX3Vuc2FmZSA9IDEwMSxcbiAgVXNlcl9kZWZpbmVkXzAgPSAxMDIsXG4gIENvbnZlcnNpb25fZnJvbV90eXBlXzBfdG9fMV9yZXF1aXJlc19hbl9leHBsaWNpdF9jYXN0ID0gMjAwLFxuICBDb252ZXJzaW9uX2Zyb21fdHlwZV8wX3RvXzFfd2lsbF9yZXF1aXJlX2FuX2V4cGxpY2l0X2Nhc3Rfd2hlbl9zd2l0Y2hpbmdfYmV0d2Vlbl8zMl82NF9iaXQgPSAyMDEsXG4gIFR5cGVfMF9jYW5ub3RfYmVfY2hhbmdlZF90b190eXBlXzEgPSAyMDIsXG4gIFR5cGVfMF9jYW5ub3RfYmVfcmVpbnRlcnByZXRlZF9hc190eXBlXzEgPSAyMDMsXG4gIEJhc2ljX3R5cGVfMF9jYW5ub3RfYmVfbnVsbGFibGUgPSAyMDQsXG4gIENhbm5vdF9leHBvcnRfYV9tdXRhYmxlX2dsb2JhbCA9IDIwNSxcbiAgTXV0YWJsZV92YWx1ZV9jYW5ub3RfYmVfaW5saW5lZCA9IDIwNixcbiAgVW5tYW5hZ2VkX2NsYXNzZXNfY2Fubm90X2V4dGVuZF9tYW5hZ2VkX2NsYXNzZXNfYW5kX3ZpY2VfdmVyc2EgPSAyMDcsXG4gIFVubWFuYWdlZF9jbGFzc2VzX2Nhbm5vdF9pbXBsZW1lbnRfaW50ZXJmYWNlcyA9IDIwOCxcbiAgSW52YWxpZF9yZWd1bGFyX2V4cHJlc3Npb25fZmxhZ3MgPSAyMDksXG4gIEltcGxlbWVudGF0aW9uXzBfbXVzdF9tYXRjaF90aGVfc2lnbmF0dXJlXzEgPSAyMTAsXG4gIENsYXNzXzBfaXNfc2VhbGVkX2FuZF9jYW5ub3RfYmVfZXh0ZW5kZWQgPSAyMTEsXG4gIERlY29yYXRvcl8wX2lzX25vdF92YWxpZF9oZXJlID0gMjEyLFxuICBEdXBsaWNhdGVfZGVjb3JhdG9yID0gMjEzLFxuICBBbl9hbGxvY2F0b3JfbXVzdF9iZV9wcmVzZW50X3RvX3VzZV8wID0gMjE0LFxuICBPcHRpb25hbF9wYXJhbWV0ZXJfbXVzdF9oYXZlX2FuX2luaXRpYWxpemVyID0gMjE1LFxuICBDb25zdHJ1Y3Rvcl9vZl9jbGFzc18wX211c3Rfbm90X3JlcXVpcmVfYW55X2FyZ3VtZW50cyA9IDIxNixcbiAgRnVuY3Rpb25fMF9jYW5ub3RfYmVfaW5saW5lZF9pbnRvX2l0c2VsZiA9IDIxNyxcbiAgQ2Fubm90X2FjY2Vzc19tZXRob2RfMF93aXRob3V0X2NhbGxpbmdfaXRfYXNfaXRfcmVxdWlyZXNfdGhpc190b19iZV9zZXQgPSAyMTgsXG4gIE9wdGlvbmFsX3Byb3BlcnRpZXNfYXJlX25vdF9zdXBwb3J0ZWQgPSAyMTksXG4gIEV4cHJlc3Npb25fbXVzdF9iZV9hX2NvbXBpbGVfdGltZV9jb25zdGFudCA9IDIyMCxcbiAgTW9kdWxlX2Nhbm5vdF9oYXZlX211bHRpcGxlX3N0YXJ0X2Z1bmN0aW9ucyA9IDIyMSxcbiAgXzBfbXVzdF9iZV9hX3ZhbHVlX2JldHdlZW5fMV9hbmRfMl9pbmNsdXNpdmUgPSAyMjIsXG4gIF8wX211c3RfYmVfYV9wb3dlcl9vZl90d28gPSAyMjMsXG4gIEV4cHJlc3Npb25faXNfdW5zYWZlID0gMjI0LFxuICBFeHByZXNzaW9uX2lzX25ldmVyX251bGwgPSAyMjUsXG4gIFVudGVybWluYXRlZF9zdHJpbmdfbGl0ZXJhbCA9IDEwMDIsXG4gIElkZW50aWZpZXJfZXhwZWN0ZWQgPSAxMDAzLFxuICBfMF9leHBlY3RlZCA9IDEwMDUsXG4gIEFfZmlsZV9jYW5ub3RfaGF2ZV9hX3JlZmVyZW5jZV90b19pdHNlbGYgPSAxMDA2LFxuICBUcmFpbGluZ19jb21tYV9ub3RfYWxsb3dlZCA9IDEwMDksXG4gIFVuZXhwZWN0ZWRfdG9rZW4gPSAxMDEyLFxuICBBX3Jlc3RfcGFyYW1ldGVyX211c3RfYmVfbGFzdF9pbl9hX3BhcmFtZXRlcl9saXN0ID0gMTAxNCxcbiAgUGFyYW1ldGVyX2Nhbm5vdF9oYXZlX3F1ZXN0aW9uX21hcmtfYW5kX2luaXRpYWxpemVyID0gMTAxNSxcbiAgQV9yZXF1aXJlZF9wYXJhbWV0ZXJfY2Fubm90X2ZvbGxvd19hbl9vcHRpb25hbF9wYXJhbWV0ZXIgPSAxMDE2LFxuICBTdGF0ZW1lbnRzX2FyZV9ub3RfYWxsb3dlZF9pbl9hbWJpZW50X2NvbnRleHRzID0gMTAzNixcbiAgSW5pdGlhbGl6ZXJzX2FyZV9ub3RfYWxsb3dlZF9pbl9hbWJpZW50X2NvbnRleHRzID0gMTAzOSxcbiAgXzBfbW9kaWZpZXJfY2Fubm90X2JlX3VzZWRfaGVyZSA9IDEwNDIsXG4gIEFfcmVzdF9wYXJhbWV0ZXJfY2Fubm90X2JlX29wdGlvbmFsID0gMTA0NyxcbiAgQV9yZXN0X3BhcmFtZXRlcl9jYW5ub3RfaGF2ZV9hbl9pbml0aWFsaXplciA9IDEwNDgsXG4gIEFfc2V0X2FjY2Vzc29yX211c3RfaGF2ZV9leGFjdGx5X29uZV9wYXJhbWV0ZXIgPSAxMDQ5LFxuICBBX3NldF9hY2Nlc3Nvcl9wYXJhbWV0ZXJfY2Fubm90X2hhdmVfYW5faW5pdGlhbGl6ZXIgPSAxMDUyLFxuICBBX2dldF9hY2Nlc3Nvcl9jYW5ub3RfaGF2ZV9wYXJhbWV0ZXJzID0gMTA1NCxcbiAgRW51bV9tZW1iZXJfbXVzdF9oYXZlX2luaXRpYWxpemVyID0gMTA2MSxcbiAgVHlwZV9wYXJhbWV0ZXJzX2Nhbm5vdF9hcHBlYXJfb25fYV9jb25zdHJ1Y3Rvcl9kZWNsYXJhdGlvbiA9IDEwOTIsXG4gIFR5cGVfYW5ub3RhdGlvbl9jYW5ub3RfYXBwZWFyX29uX2FfY29uc3RydWN0b3JfZGVjbGFyYXRpb24gPSAxMDkzLFxuICBBbl9hY2Nlc3Nvcl9jYW5ub3RfaGF2ZV90eXBlX3BhcmFtZXRlcnMgPSAxMDk0LFxuICBBX3NldF9hY2Nlc3Nvcl9jYW5ub3RfaGF2ZV9hX3JldHVybl90eXBlX2Fubm90YXRpb24gPSAxMDk1LFxuICBUeXBlX3BhcmFtZXRlcl9saXN0X2Nhbm5vdF9iZV9lbXB0eSA9IDEwOTgsXG4gIEFfY29udGludWVfc3RhdGVtZW50X2Nhbl9vbmx5X2JlX3VzZWRfd2l0aGluX2FuX2VuY2xvc2luZ19pdGVyYXRpb25fc3RhdGVtZW50ID0gMTEwNCxcbiAgQV9icmVha19zdGF0ZW1lbnRfY2FuX29ubHlfYmVfdXNlZF93aXRoaW5fYW5fZW5jbG9zaW5nX2l0ZXJhdGlvbl9vcl9zd2l0Y2hfc3RhdGVtZW50ID0gMTEwNSxcbiAgQV9yZXR1cm5fc3RhdGVtZW50X2Nhbl9vbmx5X2JlX3VzZWRfd2l0aGluX2FfZnVuY3Rpb25fYm9keSA9IDExMDgsXG4gIEV4cHJlc3Npb25fZXhwZWN0ZWQgPSAxMTA5LFxuICBUeXBlX2V4cGVjdGVkID0gMTExMCxcbiAgQV9kZWZhdWx0X2NsYXVzZV9jYW5ub3RfYXBwZWFyX21vcmVfdGhhbl9vbmNlX2luX2Ffc3dpdGNoX3N0YXRlbWVudCA9IDExMTMsXG4gIER1cGxpY2F0ZV9sYWJlbF8wID0gMTExNCxcbiAgQW5fZXhwb3J0X2Fzc2lnbm1lbnRfY2Fubm90X2hhdmVfbW9kaWZpZXJzID0gMTEyMCxcbiAgT2N0YWxfbGl0ZXJhbHNfYXJlX25vdF9hbGxvd2VkX2luX3N0cmljdF9tb2RlID0gMTEyMSxcbiAgRGlnaXRfZXhwZWN0ZWQgPSAxMTI0LFxuICBIZXhhZGVjaW1hbF9kaWdpdF9leHBlY3RlZCA9IDExMjUsXG4gIFVuZXhwZWN0ZWRfZW5kX29mX3RleHQgPSAxMTI2LFxuICBJbnZhbGlkX2NoYXJhY3RlciA9IDExMjcsXG4gIF9jYXNlX29yX2RlZmF1bHRfZXhwZWN0ZWQgPSAxMTMwLFxuICBfc3VwZXJfbXVzdF9iZV9mb2xsb3dlZF9ieV9hbl9hcmd1bWVudF9saXN0X29yX21lbWJlcl9hY2Nlc3MgPSAxMDM0LFxuICBBX2RlY2xhcmVfbW9kaWZpZXJfY2Fubm90X2JlX3VzZWRfaW5fYW5fYWxyZWFkeV9hbWJpZW50X2NvbnRleHQgPSAxMDM4LFxuICBUeXBlX2FyZ3VtZW50X2V4cGVjdGVkID0gMTE0MCxcbiAgU3RyaW5nX2xpdGVyYWxfZXhwZWN0ZWQgPSAxMTQxLFxuICBMaW5lX2JyZWFrX25vdF9wZXJtaXR0ZWRfaGVyZSA9IDExNDIsXG4gIERlY2xhcmF0aW9uX2V4cGVjdGVkID0gMTE0NixcbiAgX2NvbnN0X2RlY2xhcmF0aW9uc19tdXN0X2JlX2luaXRpYWxpemVkID0gMTE1NSxcbiAgVW50ZXJtaW5hdGVkX3JlZ3VsYXJfZXhwcmVzc2lvbl9saXRlcmFsID0gMTE2MSxcbiAgSW50ZXJmYWNlX2RlY2xhcmF0aW9uX2Nhbm5vdF9oYXZlX2ltcGxlbWVudHNfY2xhdXNlID0gMTE3NixcbiAgQmluYXJ5X2RpZ2l0X2V4cGVjdGVkID0gMTE3NyxcbiAgT2N0YWxfZGlnaXRfZXhwZWN0ZWQgPSAxMTc4LFxuICBBbl9pbXBsZW1lbnRhdGlvbl9jYW5ub3RfYmVfZGVjbGFyZWRfaW5fYW1iaWVudF9jb250ZXh0cyA9IDExODMsXG4gIEFuX2V4dGVuZGVkX1VuaWNvZGVfZXNjYXBlX3ZhbHVlX211c3RfYmVfYmV0d2Vlbl8weDBfYW5kXzB4MTBGRkZGX2luY2x1c2l2ZSA9IDExOTgsXG4gIFVudGVybWluYXRlZF9Vbmljb2RlX2VzY2FwZV9zZXF1ZW5jZSA9IDExOTksXG4gIERlY29yYXRvcnNfYXJlX25vdF92YWxpZF9oZXJlID0gMTIwNixcbiAgX2Fic3RyYWN0X21vZGlmaWVyX2Nhbl9vbmx5X2FwcGVhcl9vbl9hX2NsYXNzX21ldGhvZF9vcl9wcm9wZXJ0eV9kZWNsYXJhdGlvbiA9IDEyNDIsXG4gIE1ldGhvZF8wX2Nhbm5vdF9oYXZlX2FuX2ltcGxlbWVudGF0aW9uX2JlY2F1c2VfaXRfaXNfbWFya2VkX2Fic3RyYWN0ID0gMTI0NSxcbiAgQV9kZWZpbml0ZV9hc3NpZ25tZW50X2Fzc2VydGlvbl9pc19ub3RfcGVybWl0dGVkX2luX3RoaXNfY29udGV4dCA9IDEyNTUsXG4gIEFfY2xhc3NfbWF5X29ubHlfZXh0ZW5kX2Fub3RoZXJfY2xhc3MgPSAxMzExLFxuICBBX3BhcmFtZXRlcl9wcm9wZXJ0eV9jYW5ub3RfYmVfZGVjbGFyZWRfdXNpbmdfYV9yZXN0X3BhcmFtZXRlciA9IDEzMTcsXG4gIER1cGxpY2F0ZV9pZGVudGlmaWVyXzAgPSAyMzAwLFxuICBDYW5ub3RfZmluZF9uYW1lXzAgPSAyMzA0LFxuICBNb2R1bGVfMF9oYXNfbm9fZXhwb3J0ZWRfbWVtYmVyXzEgPSAyMzA1LFxuICBHZW5lcmljX3R5cGVfMF9yZXF1aXJlc18xX3R5cGVfYXJndW1lbnRfcyA9IDIzMTQsXG4gIFR5cGVfMF9pc19ub3RfZ2VuZXJpYyA9IDIzMTUsXG4gIFR5cGVfMF9pc19ub3RfYXNzaWduYWJsZV90b190eXBlXzEgPSAyMzIyLFxuICBJbmRleF9zaWduYXR1cmVfaXNfbWlzc2luZ19pbl90eXBlXzAgPSAyMzI5LFxuICBfdGhpc19jYW5ub3RfYmVfcmVmZXJlbmNlZF9pbl9jdXJyZW50X2xvY2F0aW9uID0gMjMzMixcbiAgX3N1cGVyX2Nhbl9vbmx5X2JlX3JlZmVyZW5jZWRfaW5fYV9kZXJpdmVkX2NsYXNzID0gMjMzNSxcbiAgU3VwZXJfY2FsbHNfYXJlX25vdF9wZXJtaXR0ZWRfb3V0c2lkZV9jb25zdHJ1Y3RvcnNfb3JfaW5fbmVzdGVkX2Z1bmN0aW9uc19pbnNpZGVfY29uc3RydWN0b3JzID0gMjMzNyxcbiAgUHJvcGVydHlfMF9kb2VzX25vdF9leGlzdF9vbl90eXBlXzEgPSAyMzM5LFxuICBDYW5ub3RfaW52b2tlX2FuX2V4cHJlc3Npb25fd2hvc2VfdHlwZV9sYWNrc19hX2NhbGxfc2lnbmF0dXJlX1R5cGVfMF9oYXNfbm9fY29tcGF0aWJsZV9jYWxsX3NpZ25hdHVyZXMgPSAyMzQ5LFxuICBDYW5ub3RfdXNlX25ld193aXRoX2FuX2V4cHJlc3Npb25fd2hvc2VfdHlwZV9sYWNrc19hX2NvbnN0cnVjdF9zaWduYXR1cmUgPSAyMzUxLFxuICBBX2Z1bmN0aW9uX3dob3NlX2RlY2xhcmVkX3R5cGVfaXNfbm90X3ZvaWRfbXVzdF9yZXR1cm5fYV92YWx1ZSA9IDIzNTUsXG4gIFRoZV9vcGVyYW5kX29mX2FuX2luY3JlbWVudF9vcl9kZWNyZW1lbnRfb3BlcmF0b3JfbXVzdF9iZV9hX3ZhcmlhYmxlX29yX2FfcHJvcGVydHlfYWNjZXNzID0gMjM1NyxcbiAgVGhlX2xlZnRfaGFuZF9zaWRlX29mX2FuX2Fzc2lnbm1lbnRfZXhwcmVzc2lvbl9tdXN0X2JlX2FfdmFyaWFibGVfb3JfYV9wcm9wZXJ0eV9hY2Nlc3MgPSAyMzY0LFxuICBPcGVyYXRvcl8wX2Nhbm5vdF9iZV9hcHBsaWVkX3RvX3R5cGVzXzFfYW5kXzIgPSAyMzY1LFxuICBBX3N1cGVyX2NhbGxfbXVzdF9iZV90aGVfZmlyc3Rfc3RhdGVtZW50X2luX3RoZV9jb25zdHJ1Y3RvciA9IDIzNzYsXG4gIENvbnN0cnVjdG9yc19mb3JfZGVyaXZlZF9jbGFzc2VzX211c3RfY29udGFpbl9hX3N1cGVyX2NhbGwgPSAyMzc3LFxuICBfZ2V0X2FuZF9zZXRfYWNjZXNzb3JfbXVzdF9oYXZlX3RoZV9zYW1lX3R5cGUgPSAyMzgwLFxuICBDb25zdHJ1Y3Rvcl9pbXBsZW1lbnRhdGlvbl9pc19taXNzaW5nID0gMjM5MCxcbiAgRnVuY3Rpb25faW1wbGVtZW50YXRpb25faXNfbWlzc2luZ19vcl9ub3RfaW1tZWRpYXRlbHlfZm9sbG93aW5nX3RoZV9kZWNsYXJhdGlvbiA9IDIzOTEsXG4gIE11bHRpcGxlX2NvbnN0cnVjdG9yX2ltcGxlbWVudGF0aW9uc19hcmVfbm90X2FsbG93ZWQgPSAyMzkyLFxuICBEdXBsaWNhdGVfZnVuY3Rpb25faW1wbGVtZW50YXRpb24gPSAyMzkzLFxuICBJbmRpdmlkdWFsX2RlY2xhcmF0aW9uc19pbl9tZXJnZWRfZGVjbGFyYXRpb25fMF9tdXN0X2JlX2FsbF9leHBvcnRlZF9vcl9hbGxfbG9jYWwgPSAyMzk1LFxuICBBX25hbWVzcGFjZV9kZWNsYXJhdGlvbl9jYW5ub3RfYmVfbG9jYXRlZF9wcmlvcl90b19hX2NsYXNzX29yX2Z1bmN0aW9uX3dpdGhfd2hpY2hfaXRfaXNfbWVyZ2VkID0gMjQzNCxcbiAgVHlwZV8wX2hhc19ub19wcm9wZXJ0eV8xID0gMjQ2MCxcbiAgVGhlXzBfb3BlcmF0b3JfY2Fubm90X2JlX2FwcGxpZWRfdG9fdHlwZV8xID0gMjQ2OSxcbiAgSW5fY29uc3RfZW51bV9kZWNsYXJhdGlvbnNfbWVtYmVyX2luaXRpYWxpemVyX211c3RfYmVfY29uc3RhbnRfZXhwcmVzc2lvbiA9IDI0NzQsXG4gIEV4cG9ydF9kZWNsYXJhdGlvbl9jb25mbGljdHNfd2l0aF9leHBvcnRlZF9kZWNsYXJhdGlvbl9vZl8wID0gMjQ4NCxcbiAgT2JqZWN0X2lzX3Bvc3NpYmx5X251bGwgPSAyNTMxLFxuICBDYW5ub3RfYXNzaWduX3RvXzBfYmVjYXVzZV9pdF9pc19hX2NvbnN0YW50X29yX2FfcmVhZF9vbmx5X3Byb3BlcnR5ID0gMjU0MCxcbiAgVGhlX3RhcmdldF9vZl9hbl9hc3NpZ25tZW50X211c3RfYmVfYV92YXJpYWJsZV9vcl9hX3Byb3BlcnR5X2FjY2VzcyA9IDI1NDEsXG4gIEluZGV4X3NpZ25hdHVyZV9pbl90eXBlXzBfb25seV9wZXJtaXRzX3JlYWRpbmcgPSAyNTQyLFxuICBFeHBlY3RlZF8wX2FyZ3VtZW50c19idXRfZ290XzEgPSAyNTU0LFxuICBFeHBlY3RlZF9hdF9sZWFzdF8wX2FyZ3VtZW50c19idXRfZ290XzEgPSAyNTU1LFxuICBFeHBlY3RlZF8wX3R5cGVfYXJndW1lbnRzX2J1dF9nb3RfMSA9IDI1NTgsXG4gIEFfbWVtYmVyX2luaXRpYWxpemVyX2luX2FfZW51bV9kZWNsYXJhdGlvbl9jYW5ub3RfcmVmZXJlbmNlX21lbWJlcnNfZGVjbGFyZWRfYWZ0ZXJfaXRfaW5jbHVkaW5nX21lbWJlcnNfZGVmaW5lZF9pbl9vdGhlcl9lbnVtcyA9IDI2NTEsXG4gIENvbnN0cnVjdG9yX29mX2NsYXNzXzBfaXNfcHJpdmF0ZV9hbmRfb25seV9hY2Nlc3NpYmxlX3dpdGhpbl90aGVfY2xhc3NfZGVjbGFyYXRpb24gPSAyNjczLFxuICBDb25zdHJ1Y3Rvcl9vZl9jbGFzc18wX2lzX3Byb3RlY3RlZF9hbmRfb25seV9hY2Nlc3NpYmxlX3dpdGhpbl90aGVfY2xhc3NfZGVjbGFyYXRpb24gPSAyNjc0LFxuICBOYW1lc3BhY2VfMF9oYXNfbm9fZXhwb3J0ZWRfbWVtYmVyXzEgPSAyNjk0LFxuICBSZXF1aXJlZF90eXBlX3BhcmFtZXRlcnNfbWF5X25vdF9mb2xsb3dfb3B0aW9uYWxfdHlwZV9wYXJhbWV0ZXJzID0gMjcwNixcbiAgRHVwbGljYXRlX3Byb3BlcnR5XzAgPSAyNzE4LFxuICBUeXBlXzBfaGFzX25vX2NhbGxfc2lnbmF0dXJlcyA9IDI3NTcsXG4gIEZpbGVfMF9ub3RfZm91bmQgPSA2MDU0LFxuICBOdW1lcmljX3NlcGFyYXRvcnNfYXJlX25vdF9hbGxvd2VkX2hlcmUgPSA2MTg4LFxuICBNdWx0aXBsZV9jb25zZWN1dGl2ZV9udW1lcmljX3NlcGFyYXRvcnNfYXJlX25vdF9wZXJtaXR0ZWQgPSA2MTg5LFxuICBfc3VwZXJfbXVzdF9iZV9jYWxsZWRfYmVmb3JlX2FjY2Vzc2luZ190aGlzX2luX3RoZV9jb25zdHJ1Y3Rvcl9vZl9hX2Rlcml2ZWRfY2xhc3MgPSAxNzAwOSxcbiAgX3N1cGVyX211c3RfYmVfY2FsbGVkX2JlZm9yZV9hY2Nlc3NpbmdfYV9wcm9wZXJ0eV9vZl9zdXBlcl9pbl90aGVfY29uc3RydWN0b3Jfb2ZfYV9kZXJpdmVkX2NsYXNzID0gMTcwMTFcbn1cblxuLyoqIFRyYW5zbGF0ZXMgYSBkaWFnbm9zdGljIGNvZGUgdG8gaXRzIHJlc3BlY3RpdmUgc3RyaW5nLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpYWdub3N0aWNDb2RlVG9TdHJpbmcoY29kZTogRGlhZ25vc3RpY0NvZGUpOiBzdHJpbmcge1xuICBzd2l0Y2ggKGNvZGUpIHtcbiAgICBjYXNlIDEwMDogcmV0dXJuIFwiT3BlcmF0aW9uIG5vdCBzdXBwb3J0ZWQuXCI7XG4gICAgY2FzZSAxMDE6IHJldHVybiBcIk9wZXJhdGlvbiBpcyB1bnNhZmUuXCI7XG4gICAgY2FzZSAxMDI6IHJldHVybiBcIlVzZXItZGVmaW5lZDogezB9XCI7XG4gICAgY2FzZSAyMDA6IHJldHVybiBcIkNvbnZlcnNpb24gZnJvbSB0eXBlICd7MH0nIHRvICd7MX0nIHJlcXVpcmVzIGFuIGV4cGxpY2l0IGNhc3QuXCI7XG4gICAgY2FzZSAyMDE6IHJldHVybiBcIkNvbnZlcnNpb24gZnJvbSB0eXBlICd7MH0nIHRvICd7MX0nIHdpbGwgcmVxdWlyZSBhbiBleHBsaWNpdCBjYXN0IHdoZW4gc3dpdGNoaW5nIGJldHdlZW4gMzIvNjQtYml0LlwiO1xuICAgIGNhc2UgMjAyOiByZXR1cm4gXCJUeXBlICd7MH0nIGNhbm5vdCBiZSBjaGFuZ2VkIHRvIHR5cGUgJ3sxfScuXCI7XG4gICAgY2FzZSAyMDM6IHJldHVybiBcIlR5cGUgJ3swfScgY2Fubm90IGJlIHJlaW50ZXJwcmV0ZWQgYXMgdHlwZSAnezF9Jy5cIjtcbiAgICBjYXNlIDIwNDogcmV0dXJuIFwiQmFzaWMgdHlwZSAnezB9JyBjYW5ub3QgYmUgbnVsbGFibGUuXCI7XG4gICAgY2FzZSAyMDU6IHJldHVybiBcIkNhbm5vdCBleHBvcnQgYSBtdXRhYmxlIGdsb2JhbC5cIjtcbiAgICBjYXNlIDIwNjogcmV0dXJuIFwiTXV0YWJsZSB2YWx1ZSBjYW5ub3QgYmUgaW5saW5lZC5cIjtcbiAgICBjYXNlIDIwNzogcmV0dXJuIFwiVW5tYW5hZ2VkIGNsYXNzZXMgY2Fubm90IGV4dGVuZCBtYW5hZ2VkIGNsYXNzZXMgYW5kIHZpY2UtdmVyc2EuXCI7XG4gICAgY2FzZSAyMDg6IHJldHVybiBcIlVubWFuYWdlZCBjbGFzc2VzIGNhbm5vdCBpbXBsZW1lbnQgaW50ZXJmYWNlcy5cIjtcbiAgICBjYXNlIDIwOTogcmV0dXJuIFwiSW52YWxpZCByZWd1bGFyIGV4cHJlc3Npb24gZmxhZ3MuXCI7XG4gICAgY2FzZSAyMTA6IHJldHVybiBcIkltcGxlbWVudGF0aW9uICd7MH0nIG11c3QgbWF0Y2ggdGhlIHNpZ25hdHVyZSAnezF9Jy5cIjtcbiAgICBjYXNlIDIxMTogcmV0dXJuIFwiQ2xhc3MgJ3swfScgaXMgc2VhbGVkIGFuZCBjYW5ub3QgYmUgZXh0ZW5kZWQuXCI7XG4gICAgY2FzZSAyMTI6IHJldHVybiBcIkRlY29yYXRvciAnezB9JyBpcyBub3QgdmFsaWQgaGVyZS5cIjtcbiAgICBjYXNlIDIxMzogcmV0dXJuIFwiRHVwbGljYXRlIGRlY29yYXRvci5cIjtcbiAgICBjYXNlIDIxNDogcmV0dXJuIFwiQW4gYWxsb2NhdG9yIG11c3QgYmUgcHJlc2VudCB0byB1c2UgJ3swfScuXCI7XG4gICAgY2FzZSAyMTU6IHJldHVybiBcIk9wdGlvbmFsIHBhcmFtZXRlciBtdXN0IGhhdmUgYW4gaW5pdGlhbGl6ZXIuXCI7XG4gICAgY2FzZSAyMTY6IHJldHVybiBcIkNvbnN0cnVjdG9yIG9mIGNsYXNzICd7MH0nIG11c3Qgbm90IHJlcXVpcmUgYW55IGFyZ3VtZW50cy5cIjtcbiAgICBjYXNlIDIxNzogcmV0dXJuIFwiRnVuY3Rpb24gJ3swfScgY2Fubm90IGJlIGlubGluZWQgaW50byBpdHNlbGYuXCI7XG4gICAgY2FzZSAyMTg6IHJldHVybiBcIkNhbm5vdCBhY2Nlc3MgbWV0aG9kICd7MH0nIHdpdGhvdXQgY2FsbGluZyBpdCBhcyBpdCByZXF1aXJlcyAndGhpcycgdG8gYmUgc2V0LlwiO1xuICAgIGNhc2UgMjE5OiByZXR1cm4gXCJPcHRpb25hbCBwcm9wZXJ0aWVzIGFyZSBub3Qgc3VwcG9ydGVkLlwiO1xuICAgIGNhc2UgMjIwOiByZXR1cm4gXCJFeHByZXNzaW9uIG11c3QgYmUgYSBjb21waWxlLXRpbWUgY29uc3RhbnQuXCI7XG4gICAgY2FzZSAyMjE6IHJldHVybiBcIk1vZHVsZSBjYW5ub3QgaGF2ZSBtdWx0aXBsZSBzdGFydCBmdW5jdGlvbnMuXCI7XG4gICAgY2FzZSAyMjI6IHJldHVybiBcIid7MH0nIG11c3QgYmUgYSB2YWx1ZSBiZXR3ZWVuICd7MX0nIGFuZCAnezJ9JyBpbmNsdXNpdmUuXCI7XG4gICAgY2FzZSAyMjM6IHJldHVybiBcIid7MH0nIG11c3QgYmUgYSBwb3dlciBvZiB0d28uXCI7XG4gICAgY2FzZSAyMjQ6IHJldHVybiBcIkV4cHJlc3Npb24gaXMgdW5zYWZlLlwiO1xuICAgIGNhc2UgMjI1OiByZXR1cm4gXCJFeHByZXNzaW9uIGlzIG5ldmVyICdudWxsJy5cIjtcbiAgICBjYXNlIDEwMDI6IHJldHVybiBcIlVudGVybWluYXRlZCBzdHJpbmcgbGl0ZXJhbC5cIjtcbiAgICBjYXNlIDEwMDM6IHJldHVybiBcIklkZW50aWZpZXIgZXhwZWN0ZWQuXCI7XG4gICAgY2FzZSAxMDA1OiByZXR1cm4gXCInezB9JyBleHBlY3RlZC5cIjtcbiAgICBjYXNlIDEwMDY6IHJldHVybiBcIkEgZmlsZSBjYW5ub3QgaGF2ZSBhIHJlZmVyZW5jZSB0byBpdHNlbGYuXCI7XG4gICAgY2FzZSAxMDA5OiByZXR1cm4gXCJUcmFpbGluZyBjb21tYSBub3QgYWxsb3dlZC5cIjtcbiAgICBjYXNlIDEwMTI6IHJldHVybiBcIlVuZXhwZWN0ZWQgdG9rZW4uXCI7XG4gICAgY2FzZSAxMDE0OiByZXR1cm4gXCJBIHJlc3QgcGFyYW1ldGVyIG11c3QgYmUgbGFzdCBpbiBhIHBhcmFtZXRlciBsaXN0LlwiO1xuICAgIGNhc2UgMTAxNTogcmV0dXJuIFwiUGFyYW1ldGVyIGNhbm5vdCBoYXZlIHF1ZXN0aW9uIG1hcmsgYW5kIGluaXRpYWxpemVyLlwiO1xuICAgIGNhc2UgMTAxNjogcmV0dXJuIFwiQSByZXF1aXJlZCBwYXJhbWV0ZXIgY2Fubm90IGZvbGxvdyBhbiBvcHRpb25hbCBwYXJhbWV0ZXIuXCI7XG4gICAgY2FzZSAxMDM2OiByZXR1cm4gXCJTdGF0ZW1lbnRzIGFyZSBub3QgYWxsb3dlZCBpbiBhbWJpZW50IGNvbnRleHRzLlwiO1xuICAgIGNhc2UgMTAzOTogcmV0dXJuIFwiSW5pdGlhbGl6ZXJzIGFyZSBub3QgYWxsb3dlZCBpbiBhbWJpZW50IGNvbnRleHRzLlwiO1xuICAgIGNhc2UgMTA0MjogcmV0dXJuIFwiJ3swfScgbW9kaWZpZXIgY2Fubm90IGJlIHVzZWQgaGVyZS5cIjtcbiAgICBjYXNlIDEwNDc6IHJldHVybiBcIkEgcmVzdCBwYXJhbWV0ZXIgY2Fubm90IGJlIG9wdGlvbmFsLlwiO1xuICAgIGNhc2UgMTA0ODogcmV0dXJuIFwiQSByZXN0IHBhcmFtZXRlciBjYW5ub3QgaGF2ZSBhbiBpbml0aWFsaXplci5cIjtcbiAgICBjYXNlIDEwNDk6IHJldHVybiBcIkEgJ3NldCcgYWNjZXNzb3IgbXVzdCBoYXZlIGV4YWN0bHkgb25lIHBhcmFtZXRlci5cIjtcbiAgICBjYXNlIDEwNTI6IHJldHVybiBcIkEgJ3NldCcgYWNjZXNzb3IgcGFyYW1ldGVyIGNhbm5vdCBoYXZlIGFuIGluaXRpYWxpemVyLlwiO1xuICAgIGNhc2UgMTA1NDogcmV0dXJuIFwiQSAnZ2V0JyBhY2Nlc3NvciBjYW5ub3QgaGF2ZSBwYXJhbWV0ZXJzLlwiO1xuICAgIGNhc2UgMTA2MTogcmV0dXJuIFwiRW51bSBtZW1iZXIgbXVzdCBoYXZlIGluaXRpYWxpemVyLlwiO1xuICAgIGNhc2UgMTA5MjogcmV0dXJuIFwiVHlwZSBwYXJhbWV0ZXJzIGNhbm5vdCBhcHBlYXIgb24gYSBjb25zdHJ1Y3RvciBkZWNsYXJhdGlvbi5cIjtcbiAgICBjYXNlIDEwOTM6IHJldHVybiBcIlR5cGUgYW5ub3RhdGlvbiBjYW5ub3QgYXBwZWFyIG9uIGEgY29uc3RydWN0b3IgZGVjbGFyYXRpb24uXCI7XG4gICAgY2FzZSAxMDk0OiByZXR1cm4gXCJBbiBhY2Nlc3NvciBjYW5ub3QgaGF2ZSB0eXBlIHBhcmFtZXRlcnMuXCI7XG4gICAgY2FzZSAxMDk1OiByZXR1cm4gXCJBICdzZXQnIGFjY2Vzc29yIGNhbm5vdCBoYXZlIGEgcmV0dXJuIHR5cGUgYW5ub3RhdGlvbi5cIjtcbiAgICBjYXNlIDEwOTg6IHJldHVybiBcIlR5cGUgcGFyYW1ldGVyIGxpc3QgY2Fubm90IGJlIGVtcHR5LlwiO1xuICAgIGNhc2UgMTEwNDogcmV0dXJuIFwiQSAnY29udGludWUnIHN0YXRlbWVudCBjYW4gb25seSBiZSB1c2VkIHdpdGhpbiBhbiBlbmNsb3NpbmcgaXRlcmF0aW9uIHN0YXRlbWVudC5cIjtcbiAgICBjYXNlIDExMDU6IHJldHVybiBcIkEgJ2JyZWFrJyBzdGF0ZW1lbnQgY2FuIG9ubHkgYmUgdXNlZCB3aXRoaW4gYW4gZW5jbG9zaW5nIGl0ZXJhdGlvbiBvciBzd2l0Y2ggc3RhdGVtZW50LlwiO1xuICAgIGNhc2UgMTEwODogcmV0dXJuIFwiQSAncmV0dXJuJyBzdGF0ZW1lbnQgY2FuIG9ubHkgYmUgdXNlZCB3aXRoaW4gYSBmdW5jdGlvbiBib2R5LlwiO1xuICAgIGNhc2UgMTEwOTogcmV0dXJuIFwiRXhwcmVzc2lvbiBleHBlY3RlZC5cIjtcbiAgICBjYXNlIDExMTA6IHJldHVybiBcIlR5cGUgZXhwZWN0ZWQuXCI7XG4gICAgY2FzZSAxMTEzOiByZXR1cm4gXCJBICdkZWZhdWx0JyBjbGF1c2UgY2Fubm90IGFwcGVhciBtb3JlIHRoYW4gb25jZSBpbiBhICdzd2l0Y2gnIHN0YXRlbWVudC5cIjtcbiAgICBjYXNlIDExMTQ6IHJldHVybiBcIkR1cGxpY2F0ZSBsYWJlbCAnezB9Jy5cIjtcbiAgICBjYXNlIDExMjA6IHJldHVybiBcIkFuIGV4cG9ydCBhc3NpZ25tZW50IGNhbm5vdCBoYXZlIG1vZGlmaWVycy5cIjtcbiAgICBjYXNlIDExMjE6IHJldHVybiBcIk9jdGFsIGxpdGVyYWxzIGFyZSBub3QgYWxsb3dlZCBpbiBzdHJpY3QgbW9kZS5cIjtcbiAgICBjYXNlIDExMjQ6IHJldHVybiBcIkRpZ2l0IGV4cGVjdGVkLlwiO1xuICAgIGNhc2UgMTEyNTogcmV0dXJuIFwiSGV4YWRlY2ltYWwgZGlnaXQgZXhwZWN0ZWQuXCI7XG4gICAgY2FzZSAxMTI2OiByZXR1cm4gXCJVbmV4cGVjdGVkIGVuZCBvZiB0ZXh0LlwiO1xuICAgIGNhc2UgMTEyNzogcmV0dXJuIFwiSW52YWxpZCBjaGFyYWN0ZXIuXCI7XG4gICAgY2FzZSAxMTMwOiByZXR1cm4gXCInY2FzZScgb3IgJ2RlZmF1bHQnIGV4cGVjdGVkLlwiO1xuICAgIGNhc2UgMTAzNDogcmV0dXJuIFwiJ3N1cGVyJyBtdXN0IGJlIGZvbGxvd2VkIGJ5IGFuIGFyZ3VtZW50IGxpc3Qgb3IgbWVtYmVyIGFjY2Vzcy5cIjtcbiAgICBjYXNlIDEwMzg6IHJldHVybiBcIkEgJ2RlY2xhcmUnIG1vZGlmaWVyIGNhbm5vdCBiZSB1c2VkIGluIGFuIGFscmVhZHkgYW1iaWVudCBjb250ZXh0LlwiO1xuICAgIGNhc2UgMTE0MDogcmV0dXJuIFwiVHlwZSBhcmd1bWVudCBleHBlY3RlZC5cIjtcbiAgICBjYXNlIDExNDE6IHJldHVybiBcIlN0cmluZyBsaXRlcmFsIGV4cGVjdGVkLlwiO1xuICAgIGNhc2UgMTE0MjogcmV0dXJuIFwiTGluZSBicmVhayBub3QgcGVybWl0dGVkIGhlcmUuXCI7XG4gICAgY2FzZSAxMTQ2OiByZXR1cm4gXCJEZWNsYXJhdGlvbiBleHBlY3RlZC5cIjtcbiAgICBjYXNlIDExNTU6IHJldHVybiBcIidjb25zdCcgZGVjbGFyYXRpb25zIG11c3QgYmUgaW5pdGlhbGl6ZWQuXCI7XG4gICAgY2FzZSAxMTYxOiByZXR1cm4gXCJVbnRlcm1pbmF0ZWQgcmVndWxhciBleHByZXNzaW9uIGxpdGVyYWwuXCI7XG4gICAgY2FzZSAxMTc2OiByZXR1cm4gXCJJbnRlcmZhY2UgZGVjbGFyYXRpb24gY2Fubm90IGhhdmUgJ2ltcGxlbWVudHMnIGNsYXVzZS5cIjtcbiAgICBjYXNlIDExNzc6IHJldHVybiBcIkJpbmFyeSBkaWdpdCBleHBlY3RlZC5cIjtcbiAgICBjYXNlIDExNzg6IHJldHVybiBcIk9jdGFsIGRpZ2l0IGV4cGVjdGVkLlwiO1xuICAgIGNhc2UgMTE4MzogcmV0dXJuIFwiQW4gaW1wbGVtZW50YXRpb24gY2Fubm90IGJlIGRlY2xhcmVkIGluIGFtYmllbnQgY29udGV4dHMuXCI7XG4gICAgY2FzZSAxMTk4OiByZXR1cm4gXCJBbiBleHRlbmRlZCBVbmljb2RlIGVzY2FwZSB2YWx1ZSBtdXN0IGJlIGJldHdlZW4gMHgwIGFuZCAweDEwRkZGRiBpbmNsdXNpdmUuXCI7XG4gICAgY2FzZSAxMTk5OiByZXR1cm4gXCJVbnRlcm1pbmF0ZWQgVW5pY29kZSBlc2NhcGUgc2VxdWVuY2UuXCI7XG4gICAgY2FzZSAxMjA2OiByZXR1cm4gXCJEZWNvcmF0b3JzIGFyZSBub3QgdmFsaWQgaGVyZS5cIjtcbiAgICBjYXNlIDEyNDI6IHJldHVybiBcIidhYnN0cmFjdCcgbW9kaWZpZXIgY2FuIG9ubHkgYXBwZWFyIG9uIGEgY2xhc3MsIG1ldGhvZCwgb3IgcHJvcGVydHkgZGVjbGFyYXRpb24uXCI7XG4gICAgY2FzZSAxMjQ1OiByZXR1cm4gXCJNZXRob2QgJ3swfScgY2Fubm90IGhhdmUgYW4gaW1wbGVtZW50YXRpb24gYmVjYXVzZSBpdCBpcyBtYXJrZWQgYWJzdHJhY3QuXCI7XG4gICAgY2FzZSAxMjU1OiByZXR1cm4gXCJBIGRlZmluaXRlIGFzc2lnbm1lbnQgYXNzZXJ0aW9uICchJyBpcyBub3QgcGVybWl0dGVkIGluIHRoaXMgY29udGV4dC5cIjtcbiAgICBjYXNlIDEzMTE6IHJldHVybiBcIkEgY2xhc3MgbWF5IG9ubHkgZXh0ZW5kIGFub3RoZXIgY2xhc3MuXCI7XG4gICAgY2FzZSAxMzE3OiByZXR1cm4gXCJBIHBhcmFtZXRlciBwcm9wZXJ0eSBjYW5ub3QgYmUgZGVjbGFyZWQgdXNpbmcgYSByZXN0IHBhcmFtZXRlci5cIjtcbiAgICBjYXNlIDIzMDA6IHJldHVybiBcIkR1cGxpY2F0ZSBpZGVudGlmaWVyICd7MH0nLlwiO1xuICAgIGNhc2UgMjMwNDogcmV0dXJuIFwiQ2Fubm90IGZpbmQgbmFtZSAnezB9Jy5cIjtcbiAgICBjYXNlIDIzMDU6IHJldHVybiBcIk1vZHVsZSAnezB9JyBoYXMgbm8gZXhwb3J0ZWQgbWVtYmVyICd7MX0nLlwiO1xuICAgIGNhc2UgMjMxNDogcmV0dXJuIFwiR2VuZXJpYyB0eXBlICd7MH0nIHJlcXVpcmVzIHsxfSB0eXBlIGFyZ3VtZW50KHMpLlwiO1xuICAgIGNhc2UgMjMxNTogcmV0dXJuIFwiVHlwZSAnezB9JyBpcyBub3QgZ2VuZXJpYy5cIjtcbiAgICBjYXNlIDIzMjI6IHJldHVybiBcIlR5cGUgJ3swfScgaXMgbm90IGFzc2lnbmFibGUgdG8gdHlwZSAnezF9Jy5cIjtcbiAgICBjYXNlIDIzMjk6IHJldHVybiBcIkluZGV4IHNpZ25hdHVyZSBpcyBtaXNzaW5nIGluIHR5cGUgJ3swfScuXCI7XG4gICAgY2FzZSAyMzMyOiByZXR1cm4gXCIndGhpcycgY2Fubm90IGJlIHJlZmVyZW5jZWQgaW4gY3VycmVudCBsb2NhdGlvbi5cIjtcbiAgICBjYXNlIDIzMzU6IHJldHVybiBcIidzdXBlcicgY2FuIG9ubHkgYmUgcmVmZXJlbmNlZCBpbiBhIGRlcml2ZWQgY2xhc3MuXCI7XG4gICAgY2FzZSAyMzM3OiByZXR1cm4gXCJTdXBlciBjYWxscyBhcmUgbm90IHBlcm1pdHRlZCBvdXRzaWRlIGNvbnN0cnVjdG9ycyBvciBpbiBuZXN0ZWQgZnVuY3Rpb25zIGluc2lkZSBjb25zdHJ1Y3RvcnMuXCI7XG4gICAgY2FzZSAyMzM5OiByZXR1cm4gXCJQcm9wZXJ0eSAnezB9JyBkb2VzIG5vdCBleGlzdCBvbiB0eXBlICd7MX0nLlwiO1xuICAgIGNhc2UgMjM0OTogcmV0dXJuIFwiQ2Fubm90IGludm9rZSBhbiBleHByZXNzaW9uIHdob3NlIHR5cGUgbGFja3MgYSBjYWxsIHNpZ25hdHVyZS4gVHlwZSAnezB9JyBoYXMgbm8gY29tcGF0aWJsZSBjYWxsIHNpZ25hdHVyZXMuXCI7XG4gICAgY2FzZSAyMzUxOiByZXR1cm4gXCJDYW5ub3QgdXNlICduZXcnIHdpdGggYW4gZXhwcmVzc2lvbiB3aG9zZSB0eXBlIGxhY2tzIGEgY29uc3RydWN0IHNpZ25hdHVyZS5cIjtcbiAgICBjYXNlIDIzNTU6IHJldHVybiBcIkEgZnVuY3Rpb24gd2hvc2UgZGVjbGFyZWQgdHlwZSBpcyBub3QgJ3ZvaWQnIG11c3QgcmV0dXJuIGEgdmFsdWUuXCI7XG4gICAgY2FzZSAyMzU3OiByZXR1cm4gXCJUaGUgb3BlcmFuZCBvZiBhbiBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IG9wZXJhdG9yIG11c3QgYmUgYSB2YXJpYWJsZSBvciBhIHByb3BlcnR5IGFjY2Vzcy5cIjtcbiAgICBjYXNlIDIzNjQ6IHJldHVybiBcIlRoZSBsZWZ0LWhhbmQgc2lkZSBvZiBhbiBhc3NpZ25tZW50IGV4cHJlc3Npb24gbXVzdCBiZSBhIHZhcmlhYmxlIG9yIGEgcHJvcGVydHkgYWNjZXNzLlwiO1xuICAgIGNhc2UgMjM2NTogcmV0dXJuIFwiT3BlcmF0b3IgJ3swfScgY2Fubm90IGJlIGFwcGxpZWQgdG8gdHlwZXMgJ3sxfScgYW5kICd7Mn0nLlwiO1xuICAgIGNhc2UgMjM3NjogcmV0dXJuIFwiQSAnc3VwZXInIGNhbGwgbXVzdCBiZSB0aGUgZmlyc3Qgc3RhdGVtZW50IGluIHRoZSBjb25zdHJ1Y3Rvci5cIjtcbiAgICBjYXNlIDIzNzc6IHJldHVybiBcIkNvbnN0cnVjdG9ycyBmb3IgZGVyaXZlZCBjbGFzc2VzIG11c3QgY29udGFpbiBhICdzdXBlcicgY2FsbC5cIjtcbiAgICBjYXNlIDIzODA6IHJldHVybiBcIidnZXQnIGFuZCAnc2V0JyBhY2Nlc3NvciBtdXN0IGhhdmUgdGhlIHNhbWUgdHlwZS5cIjtcbiAgICBjYXNlIDIzOTA6IHJldHVybiBcIkNvbnN0cnVjdG9yIGltcGxlbWVudGF0aW9uIGlzIG1pc3NpbmcuXCI7XG4gICAgY2FzZSAyMzkxOiByZXR1cm4gXCJGdW5jdGlvbiBpbXBsZW1lbnRhdGlvbiBpcyBtaXNzaW5nIG9yIG5vdCBpbW1lZGlhdGVseSBmb2xsb3dpbmcgdGhlIGRlY2xhcmF0aW9uLlwiO1xuICAgIGNhc2UgMjM5MjogcmV0dXJuIFwiTXVsdGlwbGUgY29uc3RydWN0b3IgaW1wbGVtZW50YXRpb25zIGFyZSBub3QgYWxsb3dlZC5cIjtcbiAgICBjYXNlIDIzOTM6IHJldHVybiBcIkR1cGxpY2F0ZSBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbi5cIjtcbiAgICBjYXNlIDIzOTU6IHJldHVybiBcIkluZGl2aWR1YWwgZGVjbGFyYXRpb25zIGluIG1lcmdlZCBkZWNsYXJhdGlvbiAnezB9JyBtdXN0IGJlIGFsbCBleHBvcnRlZCBvciBhbGwgbG9jYWwuXCI7XG4gICAgY2FzZSAyNDM0OiByZXR1cm4gXCJBIG5hbWVzcGFjZSBkZWNsYXJhdGlvbiBjYW5ub3QgYmUgbG9jYXRlZCBwcmlvciB0byBhIGNsYXNzIG9yIGZ1bmN0aW9uIHdpdGggd2hpY2ggaXQgaXMgbWVyZ2VkLlwiO1xuICAgIGNhc2UgMjQ2MDogcmV0dXJuIFwiVHlwZSAnezB9JyBoYXMgbm8gcHJvcGVydHkgJ3sxfScuXCI7XG4gICAgY2FzZSAyNDY5OiByZXR1cm4gXCJUaGUgJ3swfScgb3BlcmF0b3IgY2Fubm90IGJlIGFwcGxpZWQgdG8gdHlwZSAnezF9Jy5cIjtcbiAgICBjYXNlIDI0NzQ6IHJldHVybiBcIkluICdjb25zdCcgZW51bSBkZWNsYXJhdGlvbnMgbWVtYmVyIGluaXRpYWxpemVyIG11c3QgYmUgY29uc3RhbnQgZXhwcmVzc2lvbi5cIjtcbiAgICBjYXNlIDI0ODQ6IHJldHVybiBcIkV4cG9ydCBkZWNsYXJhdGlvbiBjb25mbGljdHMgd2l0aCBleHBvcnRlZCBkZWNsYXJhdGlvbiBvZiAnezB9Jy5cIjtcbiAgICBjYXNlIDI1MzE6IHJldHVybiBcIk9iamVjdCBpcyBwb3NzaWJseSAnbnVsbCcuXCI7XG4gICAgY2FzZSAyNTQwOiByZXR1cm4gXCJDYW5ub3QgYXNzaWduIHRvICd7MH0nIGJlY2F1c2UgaXQgaXMgYSBjb25zdGFudCBvciBhIHJlYWQtb25seSBwcm9wZXJ0eS5cIjtcbiAgICBjYXNlIDI1NDE6IHJldHVybiBcIlRoZSB0YXJnZXQgb2YgYW4gYXNzaWdubWVudCBtdXN0IGJlIGEgdmFyaWFibGUgb3IgYSBwcm9wZXJ0eSBhY2Nlc3MuXCI7XG4gICAgY2FzZSAyNTQyOiByZXR1cm4gXCJJbmRleCBzaWduYXR1cmUgaW4gdHlwZSAnezB9JyBvbmx5IHBlcm1pdHMgcmVhZGluZy5cIjtcbiAgICBjYXNlIDI1NTQ6IHJldHVybiBcIkV4cGVjdGVkIHswfSBhcmd1bWVudHMsIGJ1dCBnb3QgezF9LlwiO1xuICAgIGNhc2UgMjU1NTogcmV0dXJuIFwiRXhwZWN0ZWQgYXQgbGVhc3QgezB9IGFyZ3VtZW50cywgYnV0IGdvdCB7MX0uXCI7XG4gICAgY2FzZSAyNTU4OiByZXR1cm4gXCJFeHBlY3RlZCB7MH0gdHlwZSBhcmd1bWVudHMsIGJ1dCBnb3QgezF9LlwiO1xuICAgIGNhc2UgMjY1MTogcmV0dXJuIFwiQSBtZW1iZXIgaW5pdGlhbGl6ZXIgaW4gYSBlbnVtIGRlY2xhcmF0aW9uIGNhbm5vdCByZWZlcmVuY2UgbWVtYmVycyBkZWNsYXJlZCBhZnRlciBpdCwgaW5jbHVkaW5nIG1lbWJlcnMgZGVmaW5lZCBpbiBvdGhlciBlbnVtcy5cIjtcbiAgICBjYXNlIDI2NzM6IHJldHVybiBcIkNvbnN0cnVjdG9yIG9mIGNsYXNzICd7MH0nIGlzIHByaXZhdGUgYW5kIG9ubHkgYWNjZXNzaWJsZSB3aXRoaW4gdGhlIGNsYXNzIGRlY2xhcmF0aW9uLlwiO1xuICAgIGNhc2UgMjY3NDogcmV0dXJuIFwiQ29uc3RydWN0b3Igb2YgY2xhc3MgJ3swfScgaXMgcHJvdGVjdGVkIGFuZCBvbmx5IGFjY2Vzc2libGUgd2l0aGluIHRoZSBjbGFzcyBkZWNsYXJhdGlvbi5cIjtcbiAgICBjYXNlIDI2OTQ6IHJldHVybiBcIk5hbWVzcGFjZSAnezB9JyBoYXMgbm8gZXhwb3J0ZWQgbWVtYmVyICd7MX0nLlwiO1xuICAgIGNhc2UgMjcwNjogcmV0dXJuIFwiUmVxdWlyZWQgdHlwZSBwYXJhbWV0ZXJzIG1heSBub3QgZm9sbG93IG9wdGlvbmFsIHR5cGUgcGFyYW1ldGVycy5cIjtcbiAgICBjYXNlIDI3MTg6IHJldHVybiBcIkR1cGxpY2F0ZSBwcm9wZXJ0eSAnezB9Jy5cIjtcbiAgICBjYXNlIDI3NTc6IHJldHVybiBcIlR5cGUgJ3swfScgaGFzIG5vIGNhbGwgc2lnbmF0dXJlcy5cIjtcbiAgICBjYXNlIDYwNTQ6IHJldHVybiBcIkZpbGUgJ3swfScgbm90IGZvdW5kLlwiO1xuICAgIGNhc2UgNjE4ODogcmV0dXJuIFwiTnVtZXJpYyBzZXBhcmF0b3JzIGFyZSBub3QgYWxsb3dlZCBoZXJlLlwiO1xuICAgIGNhc2UgNjE4OTogcmV0dXJuIFwiTXVsdGlwbGUgY29uc2VjdXRpdmUgbnVtZXJpYyBzZXBhcmF0b3JzIGFyZSBub3QgcGVybWl0dGVkLlwiO1xuICAgIGNhc2UgMTcwMDk6IHJldHVybiBcIidzdXBlcicgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIGFjY2Vzc2luZyAndGhpcycgaW4gdGhlIGNvbnN0cnVjdG9yIG9mIGEgZGVyaXZlZCBjbGFzcy5cIjtcbiAgICBjYXNlIDE3MDExOiByZXR1cm4gXCInc3VwZXInIG11c3QgYmUgY2FsbGVkIGJlZm9yZSBhY2Nlc3NpbmcgYSBwcm9wZXJ0eSBvZiAnc3VwZXInIGluIHRoZSBjb25zdHJ1Y3RvciBvZiBhIGRlcml2ZWQgY2xhc3MuXCI7XG4gICAgZGVmYXVsdDogcmV0dXJuIFwiXCI7XG4gIH1cbn1cbiJdfQ==","\"use strict\";\n/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n */ /***/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar diagnosticMessages_generated_1 = require(\"./diagnosticMessages.generated\");\nvar util_1 = require(\"./util\");\nvar diagnosticMessages_generated_2 = require(\"./diagnosticMessages.generated\");\nexports.DiagnosticCode = diagnosticMessages_generated_2.DiagnosticCode;\nexports.diagnosticCodeToString = diagnosticMessages_generated_2.diagnosticCodeToString;\n/** Indicates the category of a {@link DiagnosticMessage}. */\nvar DiagnosticCategory;\n(function (DiagnosticCategory) {\n    /** Informatory message. */\n    DiagnosticCategory[DiagnosticCategory[\"INFO\"] = 0] = \"INFO\";\n    /** Warning message. */\n    DiagnosticCategory[DiagnosticCategory[\"WARNING\"] = 1] = \"WARNING\";\n    /** Error message. */\n    DiagnosticCategory[DiagnosticCategory[\"ERROR\"] = 2] = \"ERROR\";\n})(DiagnosticCategory = exports.DiagnosticCategory || (exports.DiagnosticCategory = {}));\n/** Returns the string representation of the specified diagnostic category. */\nfunction diagnosticCategoryToString(category) {\n    switch (category) {\n        case DiagnosticCategory.INFO: return \"INFO\";\n        case DiagnosticCategory.WARNING: return \"WARNING\";\n        case DiagnosticCategory.ERROR: return \"ERROR\";\n        default: {\n            assert(false);\n            return \"\";\n        }\n    }\n}\nexports.diagnosticCategoryToString = diagnosticCategoryToString;\n/** ANSI escape sequence for blue foreground. */\nexports.COLOR_BLUE = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexports.COLOR_YELLOW = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexports.COLOR_RED = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexports.COLOR_RESET = \"\\u001b[0m\";\n/** Returns the ANSI escape sequence for the specified category. */\nfunction diagnosticCategoryToColor(category) {\n    switch (category) {\n        case DiagnosticCategory.INFO: return exports.COLOR_BLUE;\n        case DiagnosticCategory.WARNING: return exports.COLOR_YELLOW;\n        case DiagnosticCategory.ERROR: return exports.COLOR_RED;\n        default: {\n            assert(false);\n            return \"\";\n        }\n    }\n}\nexports.diagnosticCategoryToColor = diagnosticCategoryToColor;\n/** Represents a diagnostic message. */\nvar DiagnosticMessage = /** @class */ (function () {\n    /** Constructs a new diagnostic message. */\n    function DiagnosticMessage(code, category, message) {\n        /** Respective source range, if any. */\n        this.range = null;\n        /** Related range, if any. */\n        this.relatedRange = null;\n        this.code = code;\n        this.category = category;\n        this.message = message;\n    }\n    /** Creates a new diagnostic message of the specified category. */\n    DiagnosticMessage.create = function (code, category, arg0, arg1, arg2) {\n        if (arg0 === void 0) { arg0 = null; }\n        if (arg1 === void 0) { arg1 = null; }\n        if (arg2 === void 0) { arg2 = null; }\n        var message = diagnosticMessages_generated_1.diagnosticCodeToString(code);\n        if (arg0 != null)\n            message = message.replace(\"{0}\", arg0);\n        if (arg1 != null)\n            message = message.replace(\"{1}\", arg1);\n        if (arg2 != null)\n            message = message.replace(\"{2}\", arg2);\n        return new DiagnosticMessage(code, category, message);\n    };\n    /** Creates a new informatory diagnostic message. */\n    DiagnosticMessage.createInfo = function (code, arg0, arg1) {\n        if (arg0 === void 0) { arg0 = null; }\n        if (arg1 === void 0) { arg1 = null; }\n        return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n    };\n    /** Creates a new warning diagnostic message. */\n    DiagnosticMessage.createWarning = function (code, arg0, arg1) {\n        if (arg0 === void 0) { arg0 = null; }\n        if (arg1 === void 0) { arg1 = null; }\n        return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n    };\n    /** Creates a new error diagnostic message. */\n    DiagnosticMessage.createError = function (code, arg0, arg1) {\n        if (arg0 === void 0) { arg0 = null; }\n        if (arg1 === void 0) { arg1 = null; }\n        return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n    };\n    /** Adds a source range to this message. */\n    DiagnosticMessage.prototype.withRange = function (range) {\n        this.range = range;\n        return this;\n    };\n    /** Adds a related source range to this message. */\n    DiagnosticMessage.prototype.withRelatedRange = function (range) {\n        this.relatedRange = range;\n        return this;\n    };\n    /** Converts this message to a string. */\n    DiagnosticMessage.prototype.toString = function () {\n        if (this.range) {\n            return (diagnosticCategoryToString(this.category) +\n                \" \" +\n                this.code.toString(10) +\n                \": \\\"\" +\n                this.message +\n                \"\\\" in \" +\n                this.range.source.normalizedPath +\n                \":\" +\n                this.range.line.toString(10) +\n                \":\" +\n                this.range.column.toString(10));\n        }\n        return (diagnosticCategoryToString(this.category) +\n            \" \" +\n            this.code.toString(10) +\n            \": \" +\n            this.message);\n    };\n    return DiagnosticMessage;\n}());\nexports.DiagnosticMessage = DiagnosticMessage;\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nfunction formatDiagnosticMessage(message, useColors, showContext) {\n    if (useColors === void 0) { useColors = false; }\n    if (showContext === void 0) { showContext = false; }\n    // general information\n    var sb = [];\n    if (useColors)\n        sb.push(diagnosticCategoryToColor(message.category));\n    sb.push(diagnosticCategoryToString(message.category));\n    if (useColors)\n        sb.push(exports.COLOR_RESET);\n    sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n    sb.push(message.code.toString(10));\n    sb.push(\": \");\n    sb.push(message.message);\n    // include range information if available\n    if (message.range) {\n        // include context information if requested\n        var range = message.range;\n        if (showContext) {\n            sb.push(\"\\n\");\n            sb.push(formatDiagnosticContext(range, useColors));\n        }\n        sb.push(\"\\n\");\n        sb.push(\" in \");\n        sb.push(range.source.normalizedPath);\n        sb.push(\"(\");\n        sb.push(range.line.toString(10));\n        sb.push(\",\");\n        sb.push(range.column.toString(10));\n        sb.push(\")\");\n        var relatedRange = message.relatedRange;\n        if (relatedRange) {\n            if (showContext) {\n                sb.push(\"\\n\");\n                sb.push(formatDiagnosticContext(relatedRange, useColors));\n            }\n            sb.push(\"\\n\");\n            sb.push(\" in \");\n            sb.push(range.source.normalizedPath);\n            sb.push(\"(\");\n            sb.push(range.line.toString(10));\n            sb.push(\",\");\n            sb.push(range.column.toString(10));\n            sb.push(\")\");\n        }\n    }\n    return sb.join(\"\");\n}\nexports.formatDiagnosticMessage = formatDiagnosticMessage;\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nfunction formatDiagnosticContext(range, useColors) {\n    if (useColors === void 0) { useColors = false; }\n    var text = range.source.text;\n    var len = text.length;\n    var start = range.start;\n    var end = range.end;\n    while (start > 0 && !util_1.isLineBreak(text.charCodeAt(start - 1)))\n        start--;\n    while (end < len && !util_1.isLineBreak(text.charCodeAt(end)))\n        end++;\n    var sb = [\n        \"\\n \",\n        text.substring(start, end),\n        \"\\n \"\n    ];\n    while (start < range.start) {\n        sb.push(\" \");\n        start++;\n    }\n    if (useColors)\n        sb.push(exports.COLOR_RED);\n    if (range.start == range.end) {\n        sb.push(\"^\");\n    }\n    else {\n        while (start++ < range.end) {\n            if (util_1.isLineBreak(text.charCodeAt(start))) {\n                sb.push(start == range.start + 1 ? \"^\" : \"~\");\n                break;\n            }\n            sb.push(\"~\");\n        }\n    }\n    if (useColors)\n        sb.push(exports.COLOR_RESET);\n    return sb.join(\"\");\n}\nexports.formatDiagnosticContext = formatDiagnosticContext;\n/** Base class of all diagnostic emitters. */\nvar DiagnosticEmitter = /** @class */ (function () {\n    /** Initializes this diagnostic emitter. */\n    function DiagnosticEmitter(diagnostics) {\n        if (diagnostics === void 0) { diagnostics = null; }\n        this.diagnostics = diagnostics ? diagnostics : new Array();\n    }\n    /** Emits a diagnostic message of the specified category. */\n    DiagnosticEmitter.prototype.emitDiagnostic = function (code, category, range, relatedRange, arg0, arg1, arg2) {\n        if (arg0 === void 0) { arg0 = null; }\n        if (arg1 === void 0) { arg1 = null; }\n        if (arg2 === void 0) { arg2 = null; }\n        var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n        if (relatedRange)\n            message.relatedRange = relatedRange;\n        this.diagnostics.push(message);\n        // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n        // console.log(<string>new Error(\"stack\").stack);\n    };\n    /** Emits an informatory diagnostic message. */\n    DiagnosticEmitter.prototype.info = function (code, range, arg0, arg1, arg2) {\n        if (arg0 === void 0) { arg0 = null; }\n        if (arg1 === void 0) { arg1 = null; }\n        if (arg2 === void 0) { arg2 = null; }\n        this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n    };\n    /** Emits an informatory diagnostic message with a related range. */\n    DiagnosticEmitter.prototype.infoRelated = function (code, range, relatedRange, arg0, arg1, arg2) {\n        if (arg0 === void 0) { arg0 = null; }\n        if (arg1 === void 0) { arg1 = null; }\n        if (arg2 === void 0) { arg2 = null; }\n        this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n    };\n    /** Emits a warning diagnostic message. */\n    DiagnosticEmitter.prototype.warning = function (code, range, arg0, arg1, arg2) {\n        if (arg0 === void 0) { arg0 = null; }\n        if (arg1 === void 0) { arg1 = null; }\n        if (arg2 === void 0) { arg2 = null; }\n        this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n    };\n    /** Emits a warning diagnostic message with a related range. */\n    DiagnosticEmitter.prototype.warningRelated = function (code, range, relatedRange, arg0, arg1, arg2) {\n        if (arg0 === void 0) { arg0 = null; }\n        if (arg1 === void 0) { arg1 = null; }\n        if (arg2 === void 0) { arg2 = null; }\n        this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n    };\n    /** Emits an error diagnostic message. */\n    DiagnosticEmitter.prototype.error = function (code, range, arg0, arg1, arg2) {\n        if (arg0 === void 0) { arg0 = null; }\n        if (arg1 === void 0) { arg1 = null; }\n        if (arg2 === void 0) { arg2 = null; }\n        this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n    };\n    /** Emits an error diagnostic message with a related range. */\n    DiagnosticEmitter.prototype.errorRelated = function (code, range, relatedRange, arg0, arg1, arg2) {\n        if (arg0 === void 0) { arg0 = null; }\n        if (arg1 === void 0) { arg1 = null; }\n        if (arg2 === void 0) { arg2 = null; }\n        this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n    };\n    return DiagnosticEmitter;\n}());\nexports.DiagnosticEmitter = DiagnosticEmitter;\n//# sourceMappingURL=data:application/json;base64,","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","\"use strict\";\n/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n */ /***/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar diagnostics_1 = require(\"./diagnostics\");\nvar ast_1 = require(\"./ast\");\nvar util_1 = require(\"./util\");\n/** Named token types. */\nvar Token;\n(function (Token) {\n    // keywords\n    // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n    Token[Token[\"ABSTRACT\"] = 0] = \"ABSTRACT\";\n    Token[Token[\"AS\"] = 1] = \"AS\";\n    Token[Token[\"ASYNC\"] = 2] = \"ASYNC\";\n    Token[Token[\"AWAIT\"] = 3] = \"AWAIT\";\n    Token[Token[\"BREAK\"] = 4] = \"BREAK\";\n    Token[Token[\"CASE\"] = 5] = \"CASE\";\n    Token[Token[\"CATCH\"] = 6] = \"CATCH\";\n    Token[Token[\"CLASS\"] = 7] = \"CLASS\";\n    Token[Token[\"CONST\"] = 8] = \"CONST\";\n    Token[Token[\"CONTINUE\"] = 9] = \"CONTINUE\";\n    Token[Token[\"CONSTRUCTOR\"] = 10] = \"CONSTRUCTOR\";\n    Token[Token[\"DEBUGGER\"] = 11] = \"DEBUGGER\";\n    Token[Token[\"DECLARE\"] = 12] = \"DECLARE\";\n    Token[Token[\"DEFAULT\"] = 13] = \"DEFAULT\";\n    Token[Token[\"DELETE\"] = 14] = \"DELETE\";\n    Token[Token[\"DO\"] = 15] = \"DO\";\n    Token[Token[\"ELSE\"] = 16] = \"ELSE\";\n    Token[Token[\"ENUM\"] = 17] = \"ENUM\";\n    Token[Token[\"EXPORT\"] = 18] = \"EXPORT\";\n    Token[Token[\"EXTENDS\"] = 19] = \"EXTENDS\";\n    Token[Token[\"FALSE\"] = 20] = \"FALSE\";\n    Token[Token[\"FINALLY\"] = 21] = \"FINALLY\";\n    Token[Token[\"FOR\"] = 22] = \"FOR\";\n    Token[Token[\"FROM\"] = 23] = \"FROM\";\n    Token[Token[\"FUNCTION\"] = 24] = \"FUNCTION\";\n    Token[Token[\"GET\"] = 25] = \"GET\";\n    Token[Token[\"IF\"] = 26] = \"IF\";\n    Token[Token[\"IMPLEMENTS\"] = 27] = \"IMPLEMENTS\";\n    Token[Token[\"IMPORT\"] = 28] = \"IMPORT\";\n    Token[Token[\"IN\"] = 29] = \"IN\";\n    Token[Token[\"INSTANCEOF\"] = 30] = \"INSTANCEOF\";\n    Token[Token[\"INTERFACE\"] = 31] = \"INTERFACE\";\n    Token[Token[\"IS\"] = 32] = \"IS\";\n    Token[Token[\"KEYOF\"] = 33] = \"KEYOF\";\n    Token[Token[\"LET\"] = 34] = \"LET\";\n    Token[Token[\"MODULE\"] = 35] = \"MODULE\";\n    Token[Token[\"NAMESPACE\"] = 36] = \"NAMESPACE\";\n    Token[Token[\"NEW\"] = 37] = \"NEW\";\n    Token[Token[\"NULL\"] = 38] = \"NULL\";\n    Token[Token[\"OF\"] = 39] = \"OF\";\n    Token[Token[\"PACKAGE\"] = 40] = \"PACKAGE\";\n    Token[Token[\"PRIVATE\"] = 41] = \"PRIVATE\";\n    Token[Token[\"PROTECTED\"] = 42] = \"PROTECTED\";\n    Token[Token[\"PUBLIC\"] = 43] = \"PUBLIC\";\n    Token[Token[\"READONLY\"] = 44] = \"READONLY\";\n    Token[Token[\"RETURN\"] = 45] = \"RETURN\";\n    Token[Token[\"SET\"] = 46] = \"SET\";\n    Token[Token[\"STATIC\"] = 47] = \"STATIC\";\n    Token[Token[\"SUPER\"] = 48] = \"SUPER\";\n    Token[Token[\"SWITCH\"] = 49] = \"SWITCH\";\n    Token[Token[\"THIS\"] = 50] = \"THIS\";\n    Token[Token[\"THROW\"] = 51] = \"THROW\";\n    Token[Token[\"TRUE\"] = 52] = \"TRUE\";\n    Token[Token[\"TRY\"] = 53] = \"TRY\";\n    Token[Token[\"TYPE\"] = 54] = \"TYPE\";\n    Token[Token[\"TYPEOF\"] = 55] = \"TYPEOF\";\n    Token[Token[\"VAR\"] = 56] = \"VAR\";\n    Token[Token[\"VOID\"] = 57] = \"VOID\";\n    Token[Token[\"WHILE\"] = 58] = \"WHILE\";\n    Token[Token[\"WITH\"] = 59] = \"WITH\";\n    Token[Token[\"YIELD\"] = 60] = \"YIELD\";\n    // punctuation\n    Token[Token[\"OPENBRACE\"] = 61] = \"OPENBRACE\";\n    Token[Token[\"CLOSEBRACE\"] = 62] = \"CLOSEBRACE\";\n    Token[Token[\"OPENPAREN\"] = 63] = \"OPENPAREN\";\n    Token[Token[\"CLOSEPAREN\"] = 64] = \"CLOSEPAREN\";\n    Token[Token[\"OPENBRACKET\"] = 65] = \"OPENBRACKET\";\n    Token[Token[\"CLOSEBRACKET\"] = 66] = \"CLOSEBRACKET\";\n    Token[Token[\"DOT\"] = 67] = \"DOT\";\n    Token[Token[\"DOT_DOT_DOT\"] = 68] = \"DOT_DOT_DOT\";\n    Token[Token[\"SEMICOLON\"] = 69] = \"SEMICOLON\";\n    Token[Token[\"COMMA\"] = 70] = \"COMMA\";\n    Token[Token[\"LESSTHAN\"] = 71] = \"LESSTHAN\";\n    Token[Token[\"GREATERTHAN\"] = 72] = \"GREATERTHAN\";\n    Token[Token[\"LESSTHAN_EQUALS\"] = 73] = \"LESSTHAN_EQUALS\";\n    Token[Token[\"GREATERTHAN_EQUALS\"] = 74] = \"GREATERTHAN_EQUALS\";\n    Token[Token[\"EQUALS_EQUALS\"] = 75] = \"EQUALS_EQUALS\";\n    Token[Token[\"EXCLAMATION_EQUALS\"] = 76] = \"EXCLAMATION_EQUALS\";\n    Token[Token[\"EQUALS_EQUALS_EQUALS\"] = 77] = \"EQUALS_EQUALS_EQUALS\";\n    Token[Token[\"EXCLAMATION_EQUALS_EQUALS\"] = 78] = \"EXCLAMATION_EQUALS_EQUALS\";\n    Token[Token[\"EQUALS_GREATERTHAN\"] = 79] = \"EQUALS_GREATERTHAN\";\n    Token[Token[\"PLUS\"] = 80] = \"PLUS\";\n    Token[Token[\"MINUS\"] = 81] = \"MINUS\";\n    Token[Token[\"ASTERISK_ASTERISK\"] = 82] = \"ASTERISK_ASTERISK\";\n    Token[Token[\"ASTERISK\"] = 83] = \"ASTERISK\";\n    Token[Token[\"SLASH\"] = 84] = \"SLASH\";\n    Token[Token[\"PERCENT\"] = 85] = \"PERCENT\";\n    Token[Token[\"PLUS_PLUS\"] = 86] = \"PLUS_PLUS\";\n    Token[Token[\"MINUS_MINUS\"] = 87] = \"MINUS_MINUS\";\n    Token[Token[\"LESSTHAN_LESSTHAN\"] = 88] = \"LESSTHAN_LESSTHAN\";\n    Token[Token[\"GREATERTHAN_GREATERTHAN\"] = 89] = \"GREATERTHAN_GREATERTHAN\";\n    Token[Token[\"GREATERTHAN_GREATERTHAN_GREATERTHAN\"] = 90] = \"GREATERTHAN_GREATERTHAN_GREATERTHAN\";\n    Token[Token[\"AMPERSAND\"] = 91] = \"AMPERSAND\";\n    Token[Token[\"BAR\"] = 92] = \"BAR\";\n    Token[Token[\"CARET\"] = 93] = \"CARET\";\n    Token[Token[\"EXCLAMATION\"] = 94] = \"EXCLAMATION\";\n    Token[Token[\"TILDE\"] = 95] = \"TILDE\";\n    Token[Token[\"AMPERSAND_AMPERSAND\"] = 96] = \"AMPERSAND_AMPERSAND\";\n    Token[Token[\"BAR_BAR\"] = 97] = \"BAR_BAR\";\n    Token[Token[\"QUESTION\"] = 98] = \"QUESTION\";\n    Token[Token[\"COLON\"] = 99] = \"COLON\";\n    Token[Token[\"EQUALS\"] = 100] = \"EQUALS\";\n    Token[Token[\"PLUS_EQUALS\"] = 101] = \"PLUS_EQUALS\";\n    Token[Token[\"MINUS_EQUALS\"] = 102] = \"MINUS_EQUALS\";\n    Token[Token[\"ASTERISK_EQUALS\"] = 103] = \"ASTERISK_EQUALS\";\n    Token[Token[\"ASTERISK_ASTERISK_EQUALS\"] = 104] = \"ASTERISK_ASTERISK_EQUALS\";\n    Token[Token[\"SLASH_EQUALS\"] = 105] = \"SLASH_EQUALS\";\n    Token[Token[\"PERCENT_EQUALS\"] = 106] = \"PERCENT_EQUALS\";\n    Token[Token[\"LESSTHAN_LESSTHAN_EQUALS\"] = 107] = \"LESSTHAN_LESSTHAN_EQUALS\";\n    Token[Token[\"GREATERTHAN_GREATERTHAN_EQUALS\"] = 108] = \"GREATERTHAN_GREATERTHAN_EQUALS\";\n    Token[Token[\"GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS\"] = 109] = \"GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS\";\n    Token[Token[\"AMPERSAND_EQUALS\"] = 110] = \"AMPERSAND_EQUALS\";\n    Token[Token[\"BAR_EQUALS\"] = 111] = \"BAR_EQUALS\";\n    Token[Token[\"CARET_EQUALS\"] = 112] = \"CARET_EQUALS\";\n    Token[Token[\"AT\"] = 113] = \"AT\";\n    // literals\n    Token[Token[\"IDENTIFIER\"] = 114] = \"IDENTIFIER\";\n    Token[Token[\"STRINGLITERAL\"] = 115] = \"STRINGLITERAL\";\n    Token[Token[\"INTEGERLITERAL\"] = 116] = \"INTEGERLITERAL\";\n    Token[Token[\"FLOATLITERAL\"] = 117] = \"FLOATLITERAL\";\n    // meta\n    Token[Token[\"INVALID\"] = 118] = \"INVALID\";\n    Token[Token[\"ENDOFFILE\"] = 119] = \"ENDOFFILE\";\n})(Token = exports.Token || (exports.Token = {}));\nvar IdentifierHandling;\n(function (IdentifierHandling) {\n    IdentifierHandling[IdentifierHandling[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    IdentifierHandling[IdentifierHandling[\"PREFER\"] = 1] = \"PREFER\";\n    IdentifierHandling[IdentifierHandling[\"ALWAYS\"] = 2] = \"ALWAYS\";\n})(IdentifierHandling = exports.IdentifierHandling || (exports.IdentifierHandling = {}));\nfunction tokenFromKeyword(text) {\n    assert(text.length);\n    switch (text.charCodeAt(0)) {\n        case 97 /* a */: {\n            switch (text) {\n                case \"abstract\": return Token.ABSTRACT;\n                case \"as\": return Token.AS;\n                case \"async\": return Token.ASYNC;\n                case \"await\": return Token.AWAIT;\n            }\n            break;\n        }\n        case 98 /* b */: {\n            switch (text) {\n                case \"break\": return Token.BREAK;\n            }\n            break;\n        }\n        case 99 /* c */: {\n            switch (text) {\n                case \"case\": return Token.CASE;\n                case \"catch\": return Token.CATCH;\n                case \"class\": return Token.CLASS;\n                case \"continue\": return Token.CONTINUE;\n                case \"const\": return Token.CONST;\n                case \"constructor\": return Token.CONSTRUCTOR;\n            }\n            break;\n        }\n        case 100 /* d */: {\n            switch (text) {\n                case \"debugger\": return Token.DEBUGGER;\n                case \"declare\": return Token.DECLARE;\n                case \"default\": return Token.DEFAULT;\n                case \"delete\": return Token.DELETE;\n                case \"do\": return Token.DO;\n            }\n            break;\n        }\n        case 101 /* e */: {\n            switch (text) {\n                case \"else\": return Token.ELSE;\n                case \"enum\": return Token.ENUM;\n                case \"export\": return Token.EXPORT;\n                case \"extends\": return Token.EXTENDS;\n            }\n            break;\n        }\n        case 102 /* f */: {\n            switch (text) {\n                case \"false\": return Token.FALSE;\n                case \"finally\": return Token.FINALLY;\n                case \"for\": return Token.FOR;\n                case \"from\": return Token.FROM;\n                case \"function\": return Token.FUNCTION;\n            }\n            break;\n        }\n        case 103 /* g */: {\n            switch (text) {\n                case \"get\": return Token.GET;\n            }\n            break;\n        }\n        case 105 /* i */: {\n            switch (text) {\n                case \"if\": return Token.IF;\n                case \"implements\": return Token.IMPLEMENTS;\n                case \"import\": return Token.IMPORT;\n                case \"in\": return Token.IN;\n                case \"instanceof\": return Token.INSTANCEOF;\n                case \"interface\": return Token.INTERFACE;\n                case \"is\": return Token.IS;\n            }\n            break;\n        }\n        case 107 /* k */: {\n            switch (text) {\n                case \"keyof\": return Token.KEYOF;\n            }\n            break;\n        }\n        case 108 /* l */: {\n            switch (text) {\n                case \"let\": return Token.LET;\n            }\n            break;\n        }\n        case 109 /* m */: {\n            switch (text) {\n                case \"module\": return Token.MODULE;\n            }\n            break;\n        }\n        case 110 /* n */: {\n            switch (text) {\n                case \"namespace\": return Token.NAMESPACE;\n                case \"new\": return Token.NEW;\n                case \"null\": return Token.NULL;\n            }\n            break;\n        }\n        case 111 /* o */: {\n            switch (text) {\n                case \"of\": return Token.OF;\n            }\n            break;\n        }\n        case 112 /* p */: {\n            switch (text) {\n                case \"package\": return Token.PACKAGE;\n                case \"private\": return Token.PRIVATE;\n                case \"protected\": return Token.PROTECTED;\n                case \"public\": return Token.PUBLIC;\n            }\n            break;\n        }\n        case 114 /* r */: {\n            switch (text) {\n                case \"readonly\": return Token.READONLY;\n                case \"return\": return Token.RETURN;\n            }\n            break;\n        }\n        case 115 /* s */: {\n            switch (text) {\n                case \"set\": return Token.SET;\n                case \"static\": return Token.STATIC;\n                case \"super\": return Token.SUPER;\n                case \"switch\": return Token.SWITCH;\n            }\n            break;\n        }\n        case 116 /* t */: {\n            switch (text) {\n                case \"this\": return Token.THIS;\n                case \"throw\": return Token.THROW;\n                case \"true\": return Token.TRUE;\n                case \"try\": return Token.TRY;\n                case \"type\": return Token.TYPE;\n                case \"typeof\": return Token.TYPEOF;\n            }\n            break;\n        }\n        case 118 /* v */: {\n            switch (text) {\n                case \"var\": return Token.VAR;\n                case \"void\": return Token.VOID;\n            }\n            break;\n        }\n        case 119 /* w */: {\n            switch (text) {\n                case \"while\": return Token.WHILE;\n                case \"with\": return Token.WITH;\n            }\n            break;\n        }\n        case 121 /* y */: {\n            switch (text) {\n                case \"yield\": return Token.YIELD;\n            }\n            break;\n        }\n    }\n    return Token.INVALID;\n}\nexports.tokenFromKeyword = tokenFromKeyword;\nfunction tokenIsAlsoIdentifier(token) {\n    switch (token) {\n        case Token.ABSTRACT:\n        case Token.AS:\n        case Token.CONSTRUCTOR:\n        case Token.DECLARE:\n        case Token.DELETE:\n        case Token.FROM:\n        case Token.FOR:\n        case Token.GET:\n        case Token.INSTANCEOF:\n        case Token.IS:\n        case Token.KEYOF:\n        case Token.MODULE:\n        case Token.NAMESPACE:\n        case Token.NULL:\n        case Token.READONLY:\n        case Token.SET:\n        case Token.TYPE:\n        case Token.VOID: return true;\n        default: return false;\n    }\n}\nexports.tokenIsAlsoIdentifier = tokenIsAlsoIdentifier;\nfunction isIllegalVariableIdentifier(name) {\n    assert(name.length);\n    switch (name.charCodeAt(0)) {\n        case 100 /* d */: return name == \"delete\";\n        case 102 /* f */: return name == \"for\";\n        case 105 /* i */: return name == \"instanceof\";\n        case 110 /* n */: return name == \"null\";\n        case 118 /* v */: return name == \"void\";\n    }\n    return false;\n}\nexports.isIllegalVariableIdentifier = isIllegalVariableIdentifier;\nfunction operatorTokenToString(token) {\n    switch (token) {\n        case Token.DELETE: return \"delete\";\n        case Token.IN: return \"in\";\n        case Token.INSTANCEOF: return \"instanceof\";\n        case Token.NEW: return \"new\";\n        case Token.TYPEOF: return \"typeof\";\n        case Token.VOID: return \"void\";\n        case Token.YIELD: return \"yield\";\n        case Token.DOT_DOT_DOT: return \"...\";\n        case Token.COMMA: return \",\";\n        case Token.LESSTHAN: return \"<\";\n        case Token.GREATERTHAN: return \">\";\n        case Token.LESSTHAN_EQUALS: return \"<=\";\n        case Token.GREATERTHAN_EQUALS: return \">=\";\n        case Token.EQUALS_EQUALS: return \"==\";\n        case Token.EXCLAMATION_EQUALS: return \"!=\";\n        case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n        case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n        case Token.PLUS: return \"+\";\n        case Token.MINUS: return \"-\";\n        case Token.ASTERISK_ASTERISK: return \"**\";\n        case Token.ASTERISK: return \"*\";\n        case Token.SLASH: return \"/\";\n        case Token.PERCENT: return \"%\";\n        case Token.PLUS_PLUS: return \"++\";\n        case Token.MINUS_MINUS: return \"--\";\n        case Token.LESSTHAN_LESSTHAN: return \"<<\";\n        case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n        case Token.AMPERSAND: return \"&\";\n        case Token.BAR: return \"|\";\n        case Token.CARET: return \"^\";\n        case Token.EXCLAMATION: return \"!\";\n        case Token.TILDE: return \"~\";\n        case Token.AMPERSAND_AMPERSAND: return \"&&\";\n        case Token.BAR_BAR: return \"||\";\n        case Token.EQUALS: return \"=\";\n        case Token.PLUS_EQUALS: return \"+=\";\n        case Token.MINUS_EQUALS: return \"-=\";\n        case Token.ASTERISK_EQUALS: return \"*=\";\n        case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n        case Token.SLASH_EQUALS: return \"/=\";\n        case Token.PERCENT_EQUALS: return \"%=\";\n        case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n        case Token.AMPERSAND_EQUALS: return \"&=\";\n        case Token.BAR_EQUALS: return \"|=\";\n        case Token.CARET_EQUALS: return \"^=\";\n        default: {\n            assert(false);\n            return \"\";\n        }\n    }\n}\nexports.operatorTokenToString = operatorTokenToString;\nvar Range = /** @class */ (function () {\n    // TODO: set these while tokenizing\n    // line: i32;\n    // column: i32;\n    function Range(source, start, end) {\n        this.debugInfoRef = 0;\n        this.source = source;\n        this.start = start;\n        this.end = end;\n    }\n    Range.join = function (a, b) {\n        if (a.source != b.source)\n            throw new Error(\"source mismatch\");\n        return new Range(a.source, a.start < b.start ? a.start : b.start, a.end > b.end ? a.end : b.end);\n    };\n    Object.defineProperty(Range.prototype, \"atStart\", {\n        get: function () {\n            return new Range(this.source, this.start, this.start);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Range.prototype, \"atEnd\", {\n        get: function () {\n            return new Range(this.source, this.end, this.end);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Range.prototype, \"line\", {\n        get: function () {\n            var text = this.source.text;\n            var line = 1;\n            for (var pos = this.start; pos >= 0; --pos) {\n                if (text.charCodeAt(pos) == 10 /* LINEFEED */)\n                    line++;\n            }\n            return line;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Range.prototype, \"column\", {\n        get: function () {\n            var text = this.source.text;\n            var column = 0;\n            for (var pos = this.start - 1; pos >= 0; --pos) {\n                if (text.charCodeAt(pos) == 10 /* LINEFEED */)\n                    break;\n                ++column;\n            }\n            return column;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Range.prototype.toString = function () {\n        return this.source.text.substring(this.start, this.end);\n    };\n    return Range;\n}());\nexports.Range = Range;\n/** Tokenizes a source to individual {@link Token}s. */\nvar Tokenizer = /** @class */ (function (_super) {\n    __extends(Tokenizer, _super);\n    /** Constructs a new tokenizer. */\n    function Tokenizer(source, diagnostics) {\n        if (diagnostics === void 0) { diagnostics = null; }\n        var _this = _super.call(this, diagnostics) || this;\n        _this.end = 0;\n        _this.pos = 0;\n        _this.token = -1;\n        _this.tokenPos = 0;\n        _this.nextToken = -1;\n        _this.nextTokenPos = 0;\n        _this.nextTokenOnNewLine = false;\n        _this.onComment = null;\n        _this.source = source;\n        _this.pos = 0;\n        _this.end = source.text.length;\n        _this.diagnostics = diagnostics || new Array();\n        var end = _this.end;\n        var text = source.text;\n        // skip bom\n        if (_this.pos < end &&\n            text.charCodeAt(_this.pos) == 65279 /* BYTEORDERMARK */) {\n            ++_this.pos;\n        }\n        // skip shebang\n        if (_this.pos + 1 < end &&\n            text.charCodeAt(_this.pos) == 35 /* HASH */ &&\n            text.charCodeAt(_this.pos + 1) == 33 /* EXCLAMATION */) {\n            _this.pos += 2;\n            while (_this.pos < end &&\n                text.charCodeAt(_this.pos) != 10 /* LINEFEED */) {\n                ++_this.pos;\n            }\n            // 'next' now starts at lf or eof\n        }\n        return _this;\n    }\n    Tokenizer.prototype.next = function (identifierHandling) {\n        if (identifierHandling === void 0) { identifierHandling = IdentifierHandling.DEFAULT; }\n        this.nextToken = -1;\n        return this.token = this.unsafeNext(identifierHandling);\n    };\n    Tokenizer.prototype.unsafeNext = function (identifierHandling, maxTokenLength) {\n        if (identifierHandling === void 0) { identifierHandling = IdentifierHandling.DEFAULT; }\n        if (maxTokenLength === void 0) { maxTokenLength = i32.MAX_VALUE; }\n        var end = this.end;\n        var text = this.source.text;\n        while (this.pos < end) {\n            this.tokenPos = this.pos;\n            var c = text.charCodeAt(this.pos);\n            switch (c) {\n                case 13 /* CARRIAGERETURN */: {\n                    if (!(++this.pos < end &&\n                        text.charCodeAt(this.pos) == 10 /* LINEFEED */))\n                        break;\n                    // otherwise fall-through\n                }\n                case 10 /* LINEFEED */:\n                case 9 /* TAB */:\n                case 11 /* VERTICALTAB */:\n                case 12 /* FORMFEED */:\n                case 32 /* SPACE */: {\n                    ++this.pos;\n                    break;\n                }\n                case 33 /* EXCLAMATION */: {\n                    ++this.pos;\n                    if (maxTokenLength > 1 && this.pos < end &&\n                        text.charCodeAt(this.pos) == 61 /* EQUALS */) {\n                        ++this.pos;\n                        if (maxTokenLength > 2 && this.pos < end &&\n                            text.charCodeAt(this.pos) == 61 /* EQUALS */) {\n                            ++this.pos;\n                            return Token.EXCLAMATION_EQUALS_EQUALS;\n                        }\n                        return Token.EXCLAMATION_EQUALS;\n                    }\n                    return Token.EXCLAMATION;\n                }\n                case 34 /* DOUBLEQUOTE */:\n                case 39 /* SINGLEQUOTE */:\n                case 96 /* BACKTICK */: { // TODO\n                    return Token.STRINGLITERAL; // expects a call to readString\n                }\n                case 37 /* PERCENT */: {\n                    ++this.pos;\n                    if (maxTokenLength > 1 && this.pos < end &&\n                        text.charCodeAt(this.pos) == 61 /* EQUALS */) {\n                        ++this.pos;\n                        return Token.PERCENT_EQUALS;\n                    }\n                    return Token.PERCENT;\n                }\n                case 38 /* AMPERSAND */: {\n                    ++this.pos;\n                    if (maxTokenLength > 1 && this.pos < end) {\n                        var chr = text.charCodeAt(this.pos);\n                        if (chr == 38 /* AMPERSAND */) {\n                            ++this.pos;\n                            return Token.AMPERSAND_AMPERSAND;\n                        }\n                        if (chr == 61 /* EQUALS */) {\n                            ++this.pos;\n                            return Token.AMPERSAND_EQUALS;\n                        }\n                    }\n                    return Token.AMPERSAND;\n                }\n                case 40 /* OPENPAREN */: {\n                    ++this.pos;\n                    return Token.OPENPAREN;\n                }\n                case 41 /* CLOSEPAREN */: {\n                    ++this.pos;\n                    return Token.CLOSEPAREN;\n                }\n                case 42 /* ASTERISK */: {\n                    ++this.pos;\n                    if (maxTokenLength > 1 && this.pos < end) {\n                        var chr = text.charCodeAt(this.pos);\n                        if (chr == 61 /* EQUALS */) {\n                            ++this.pos;\n                            return Token.ASTERISK_EQUALS;\n                        }\n                        if (chr == 42 /* ASTERISK */) {\n                            ++this.pos;\n                            if (maxTokenLength > 2 && this.pos < end &&\n                                text.charCodeAt(this.pos) == 61 /* EQUALS */) {\n                                ++this.pos;\n                                return Token.ASTERISK_ASTERISK_EQUALS;\n                            }\n                            return Token.ASTERISK_ASTERISK;\n                        }\n                    }\n                    return Token.ASTERISK;\n                }\n                case 43 /* PLUS */: {\n                    ++this.pos;\n                    if (maxTokenLength > 1 && this.pos < end) {\n                        var chr = text.charCodeAt(this.pos);\n                        if (chr == 43 /* PLUS */) {\n                            ++this.pos;\n                            return Token.PLUS_PLUS;\n                        }\n                        if (chr == 61 /* EQUALS */) {\n                            ++this.pos;\n                            return Token.PLUS_EQUALS;\n                        }\n                    }\n                    return Token.PLUS;\n                }\n                case 44 /* COMMA */: {\n                    ++this.pos;\n                    return Token.COMMA;\n                }\n                case 45 /* MINUS */: {\n                    ++this.pos;\n                    if (maxTokenLength > 1 && this.pos < end) {\n                        var chr = text.charCodeAt(this.pos);\n                        if (chr == 45 /* MINUS */) {\n                            ++this.pos;\n                            return Token.MINUS_MINUS;\n                        }\n                        if (chr == 61 /* EQUALS */) {\n                            ++this.pos;\n                            return Token.MINUS_EQUALS;\n                        }\n                    }\n                    return Token.MINUS;\n                }\n                case 46 /* DOT */: {\n                    ++this.pos;\n                    if (maxTokenLength > 1 && this.pos < end) {\n                        var chr = text.charCodeAt(this.pos);\n                        if (util_1.isDecimalDigit(chr)) {\n                            --this.pos;\n                            return Token.FLOATLITERAL; // expects a call to readFloat\n                        }\n                        if (maxTokenLength > 2 && this.pos + 1 < end &&\n                            chr == 46 /* DOT */ &&\n                            text.charCodeAt(this.pos + 1) == 46 /* DOT */) {\n                            this.pos += 2;\n                            return Token.DOT_DOT_DOT;\n                        }\n                    }\n                    return Token.DOT;\n                }\n                case 47 /* SLASH */: {\n                    var commentStartPos = this.pos;\n                    ++this.pos;\n                    if (maxTokenLength > 1 && this.pos < end) {\n                        var chr = text.charCodeAt(this.pos);\n                        if (chr == 47 /* SLASH */) { // single-line\n                            var commentKind = ast_1.CommentKind.LINE;\n                            if (this.pos + 1 < end &&\n                                text.charCodeAt(this.pos + 1) == 47 /* SLASH */) {\n                                ++this.pos;\n                                commentKind = ast_1.CommentKind.TRIPLE;\n                            }\n                            while (++this.pos < end) {\n                                if (text.charCodeAt(this.pos) == 10 /* LINEFEED */) {\n                                    ++this.pos;\n                                    break;\n                                }\n                            }\n                            if (this.onComment) {\n                                this.onComment(commentKind, text.substring(commentStartPos, this.pos), this.range(commentStartPos, this.pos));\n                            }\n                            break;\n                        }\n                        if (chr == 42 /* ASTERISK */) { // multi-line\n                            var closed = false;\n                            while (++this.pos < end) {\n                                c = text.charCodeAt(this.pos);\n                                if (c == 42 /* ASTERISK */ &&\n                                    this.pos + 1 < end &&\n                                    text.charCodeAt(this.pos + 1) == 47 /* SLASH */) {\n                                    this.pos += 2;\n                                    closed = true;\n                                    break;\n                                }\n                            }\n                            if (!closed) {\n                                this.error(diagnostics_1.DiagnosticCode._0_expected, this.range(this.pos), \"*/\");\n                            }\n                            else if (this.onComment) {\n                                this.onComment(ast_1.CommentKind.BLOCK, text.substring(commentStartPos, this.pos), this.range(commentStartPos, this.pos));\n                            }\n                            break;\n                        }\n                        if (chr == 61 /* EQUALS */) {\n                            ++this.pos;\n                            return Token.SLASH_EQUALS;\n                        }\n                    }\n                    return Token.SLASH;\n                }\n                case 48 /* _0 */:\n                case 49 /* _1 */:\n                case 50 /* _2 */:\n                case 51 /* _3 */:\n                case 52 /* _4 */:\n                case 53 /* _5 */:\n                case 54 /* _6 */:\n                case 55 /* _7 */:\n                case 56 /* _8 */:\n                case 57 /* _9 */: {\n                    return this.testInteger()\n                        ? Token.INTEGERLITERAL // expects a call to readInteger\n                        : Token.FLOATLITERAL; // expects a call to readFloat\n                }\n                case 58 /* COLON */: {\n                    ++this.pos;\n                    return Token.COLON;\n                }\n                case 59 /* SEMICOLON */: {\n                    ++this.pos;\n                    return Token.SEMICOLON;\n                }\n                case 60 /* LESSTHAN */: {\n                    ++this.pos;\n                    if (maxTokenLength > 1 && this.pos < end) {\n                        var chr = text.charCodeAt(this.pos);\n                        if (chr == 60 /* LESSTHAN */) {\n                            ++this.pos;\n                            if (maxTokenLength > 2 &&\n                                this.pos < end &&\n                                text.charCodeAt(this.pos) == 61 /* EQUALS */) {\n                                ++this.pos;\n                                return Token.LESSTHAN_LESSTHAN_EQUALS;\n                            }\n                            return Token.LESSTHAN_LESSTHAN;\n                        }\n                        if (chr == 61 /* EQUALS */) {\n                            ++this.pos;\n                            return Token.LESSTHAN_EQUALS;\n                        }\n                    }\n                    return Token.LESSTHAN;\n                }\n                case 61 /* EQUALS */: {\n                    ++this.pos;\n                    if (maxTokenLength > 1 && this.pos < end) {\n                        var chr = text.charCodeAt(this.pos);\n                        if (chr == 61 /* EQUALS */) {\n                            ++this.pos;\n                            if (maxTokenLength > 2 &&\n                                this.pos < end &&\n                                text.charCodeAt(this.pos) == 61 /* EQUALS */) {\n                                ++this.pos;\n                                return Token.EQUALS_EQUALS_EQUALS;\n                            }\n                            return Token.EQUALS_EQUALS;\n                        }\n                        if (chr == 62 /* GREATERTHAN */) {\n                            ++this.pos;\n                            return Token.EQUALS_GREATERTHAN;\n                        }\n                    }\n                    return Token.EQUALS;\n                }\n                case 62 /* GREATERTHAN */: {\n                    ++this.pos;\n                    if (maxTokenLength > 1 && this.pos < end) {\n                        var chr = text.charCodeAt(this.pos);\n                        if (chr == 62 /* GREATERTHAN */) {\n                            ++this.pos;\n                            if (maxTokenLength > 2 && this.pos < end) {\n                                chr = text.charCodeAt(this.pos);\n                                if (chr == 62 /* GREATERTHAN */) {\n                                    ++this.pos;\n                                    if (maxTokenLength > 3 && this.pos < end &&\n                                        text.charCodeAt(this.pos) == 61 /* EQUALS */) {\n                                        ++this.pos;\n                                        return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                                    }\n                                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                                }\n                                if (chr == 61 /* EQUALS */) {\n                                    ++this.pos;\n                                    return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                                }\n                            }\n                            return Token.GREATERTHAN_GREATERTHAN;\n                        }\n                        if (chr == 61 /* EQUALS */) {\n                            ++this.pos;\n                            return Token.GREATERTHAN_EQUALS;\n                        }\n                    }\n                    return Token.GREATERTHAN;\n                }\n                case 63 /* QUESTION */: {\n                    ++this.pos;\n                    return Token.QUESTION;\n                }\n                case 91 /* OPENBRACKET */: {\n                    ++this.pos;\n                    return Token.OPENBRACKET;\n                }\n                case 93 /* CLOSEBRACKET */: {\n                    ++this.pos;\n                    return Token.CLOSEBRACKET;\n                }\n                case 94 /* CARET */: {\n                    ++this.pos;\n                    if (maxTokenLength > 1 && this.pos < end &&\n                        text.charCodeAt(this.pos) == 61 /* EQUALS */) {\n                        ++this.pos;\n                        return Token.CARET_EQUALS;\n                    }\n                    return Token.CARET;\n                }\n                case 123 /* OPENBRACE */: {\n                    ++this.pos;\n                    return Token.OPENBRACE;\n                }\n                case 124 /* BAR */: {\n                    ++this.pos;\n                    if (maxTokenLength > 1 && this.pos < end) {\n                        var chr = text.charCodeAt(this.pos);\n                        if (chr == 124 /* BAR */) {\n                            ++this.pos;\n                            return Token.BAR_BAR;\n                        }\n                        if (chr == 61 /* EQUALS */) {\n                            ++this.pos;\n                            return Token.BAR_EQUALS;\n                        }\n                    }\n                    return Token.BAR;\n                }\n                case 125 /* CLOSEBRACE */: {\n                    ++this.pos;\n                    return Token.CLOSEBRACE;\n                }\n                case 126 /* TILDE */: {\n                    ++this.pos;\n                    return Token.TILDE;\n                }\n                case 64 /* AT */: {\n                    ++this.pos;\n                    return Token.AT;\n                }\n                default: {\n                    if (util_1.isIdentifierStart(c)) {\n                        if (util_1.isKeywordCharacter(c)) {\n                            var posBefore = this.pos;\n                            while (++this.pos < end &&\n                                util_1.isIdentifierPart(c = text.charCodeAt(this.pos))) {\n                                if (!util_1.isKeywordCharacter(c)) {\n                                    this.pos = posBefore;\n                                    return Token.IDENTIFIER;\n                                }\n                            }\n                            var keywordText = text.substring(posBefore, this.pos);\n                            var keywordToken = tokenFromKeyword(keywordText);\n                            if (keywordToken !== Token.INVALID &&\n                                identifierHandling !== IdentifierHandling.ALWAYS &&\n                                !(identifierHandling === IdentifierHandling.PREFER &&\n                                    tokenIsAlsoIdentifier(keywordToken))) {\n                                return keywordToken;\n                            }\n                            this.pos = posBefore;\n                        }\n                        return Token.IDENTIFIER; // expects a call to readIdentifier\n                    }\n                    else if (util_1.isWhiteSpace(c)) {\n                        ++this.pos;\n                        break;\n                    }\n                    this.error(diagnostics_1.DiagnosticCode.Invalid_character, this.range(this.pos, this.pos + 1));\n                    ++this.pos;\n                    return Token.INVALID;\n                }\n            }\n        }\n        return Token.ENDOFFILE;\n    };\n    Tokenizer.prototype.peek = function (checkOnNewLine, identifierHandling, maxCompoundLength) {\n        if (checkOnNewLine === void 0) { checkOnNewLine = false; }\n        if (identifierHandling === void 0) { identifierHandling = IdentifierHandling.DEFAULT; }\n        if (maxCompoundLength === void 0) { maxCompoundLength = i32.MAX_VALUE; }\n        var text = this.source.text;\n        if (this.nextToken < 0) {\n            var posBefore = this.pos;\n            var tokenBefore = this.token;\n            var tokenPosBefore = this.tokenPos;\n            this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n            this.nextTokenPos = this.tokenPos;\n            if (checkOnNewLine) {\n                this.nextTokenOnNewLine = false;\n                for (var pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n                    if (util_1.isLineBreak(text.charCodeAt(pos))) {\n                        this.nextTokenOnNewLine = true;\n                        break;\n                    }\n                }\n            }\n            this.pos = posBefore;\n            this.token = tokenBefore;\n            this.tokenPos = tokenPosBefore;\n        }\n        return this.nextToken;\n    };\n    Tokenizer.prototype.skipIdentifier = function (identifierHandling) {\n        if (identifierHandling === void 0) { identifierHandling = IdentifierHandling.PREFER; }\n        return this.skip(Token.IDENTIFIER, identifierHandling);\n    };\n    Tokenizer.prototype.skip = function (token, identifierHandling) {\n        if (identifierHandling === void 0) { identifierHandling = IdentifierHandling.DEFAULT; }\n        var posBefore = this.pos;\n        var tokenBefore = this.token;\n        var tokenPosBefore = this.tokenPos;\n        var maxCompoundLength = i32.MAX_VALUE;\n        switch (token) {\n            case Token.GREATERTHAN: { // where parsing type arguments\n                maxCompoundLength = 1;\n                break;\n            }\n        }\n        this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n        if (this.token == token) {\n            this.nextToken = -1;\n            return true;\n        }\n        else {\n            this.pos = posBefore;\n            this.token = tokenBefore;\n            this.tokenPos = tokenPosBefore;\n            return false;\n        }\n    };\n    Tokenizer.prototype.mark = function () {\n        var state;\n        if (reusableState) {\n            state = reusableState;\n            reusableState = null;\n        }\n        else {\n            state = new State();\n        }\n        state.pos = this.pos;\n        state.token = this.token;\n        state.tokenPos = this.tokenPos;\n        return state;\n    };\n    Tokenizer.prototype.discard = function (state) {\n        reusableState = state;\n    };\n    Tokenizer.prototype.reset = function (state) {\n        this.pos = state.pos;\n        this.token = state.token;\n        this.tokenPos = state.tokenPos;\n        this.nextToken = -1;\n    };\n    Tokenizer.prototype.range = function (start, end) {\n        if (start === void 0) { start = -1; }\n        if (end === void 0) { end = -1; }\n        if (start < 0) {\n            start = this.tokenPos;\n            end = this.pos;\n        }\n        else if (end < 0) {\n            end = start;\n        }\n        return new Range(this.source, start, end);\n    };\n    Tokenizer.prototype.readIdentifier = function () {\n        var text = this.source.text;\n        var start = this.pos;\n        var end = this.end;\n        while (++this.pos < end &&\n            util_1.isIdentifierPart(text.charCodeAt(this.pos)))\n            ;\n        return text.substring(start, this.pos);\n    };\n    Tokenizer.prototype.readString = function () {\n        var text = this.source.text;\n        var quote = text.charCodeAt(this.pos++);\n        var start = this.pos;\n        var end = this.end;\n        var result = \"\";\n        while (true) {\n            if (this.pos >= end) {\n                result += text.substring(start, this.pos);\n                this.error(diagnostics_1.DiagnosticCode.Unterminated_string_literal, this.range(start - 1, end));\n                break;\n            }\n            var c = text.charCodeAt(this.pos);\n            if (c == quote) {\n                result += text.substring(start, this.pos++);\n                break;\n            }\n            if (c == 92 /* BACKSLASH */) {\n                result += text.substring(start, this.pos);\n                result += this.readEscapeSequence();\n                start = this.pos;\n                continue;\n            }\n            if (util_1.isLineBreak(c) && quote != 96 /* BACKTICK */) {\n                result += text.substring(start, this.pos);\n                this.error(diagnostics_1.DiagnosticCode.Unterminated_string_literal, this.range(start - 1, this.pos));\n                break;\n            }\n            ++this.pos;\n        }\n        return result;\n    };\n    Tokenizer.prototype.readEscapeSequence = function () {\n        var end = this.end;\n        if (++this.pos >= end) {\n            this.error(diagnostics_1.DiagnosticCode.Unexpected_end_of_text, this.range(end));\n            return \"\";\n        }\n        var text = this.source.text;\n        var c = text.charCodeAt(this.pos++);\n        switch (c) {\n            case 48 /* _0 */: return \"\\0\";\n            case 98 /* b */: return \"\\b\";\n            case 116 /* t */: return \"\\t\";\n            case 110 /* n */: return \"\\n\";\n            case 118 /* v */: return \"\\v\";\n            case 102 /* f */: return \"\\f\";\n            case 114 /* r */: return \"\\r\";\n            case 39 /* SINGLEQUOTE */: return \"'\";\n            case 34 /* DOUBLEQUOTE */: return \"\\\"\";\n            case 117 /* u */: {\n                if (this.pos < end &&\n                    text.charCodeAt(this.pos) == 123 /* OPENBRACE */) {\n                    ++this.pos;\n                    return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n                }\n                return this.readUnicodeEscape(); // \\uDDDD\n            }\n            case 13 /* CARRIAGERETURN */: {\n                if (this.pos < end &&\n                    text.charCodeAt(this.pos) == 10 /* LINEFEED */) {\n                    ++this.pos;\n                }\n                // fall through\n            }\n            case 10 /* LINEFEED */:\n            case 8232 /* LINESEPARATOR */:\n            case 8233 /* PARAGRAPHSEPARATOR */: return \"\";\n            default: return String.fromCharCode(c);\n        }\n    };\n    Tokenizer.prototype.readRegexpPattern = function () {\n        var text = this.source.text;\n        var start = this.pos;\n        var end = this.end;\n        var escaped = false;\n        while (true) {\n            if (this.pos >= end) {\n                this.error(diagnostics_1.DiagnosticCode.Unterminated_regular_expression_literal, this.range(start, end));\n                break;\n            }\n            if (text.charCodeAt(this.pos) == 92 /* BACKSLASH */) {\n                ++this.pos;\n                escaped = true;\n                continue;\n            }\n            var c = text.charCodeAt(this.pos);\n            if (!escaped && c == 47 /* SLASH */)\n                break;\n            if (util_1.isLineBreak(c)) {\n                this.error(diagnostics_1.DiagnosticCode.Unterminated_regular_expression_literal, this.range(start, this.pos));\n                break;\n            }\n            ++this.pos;\n            escaped = false;\n        }\n        return text.substring(start, this.pos);\n    };\n    Tokenizer.prototype.readRegexpFlags = function () {\n        var text = this.source.text;\n        var start = this.pos;\n        var end = this.end;\n        var flags = 0;\n        while (this.pos < end) {\n            var c = text.charCodeAt(this.pos);\n            if (!util_1.isIdentifierPart(c))\n                break;\n            ++this.pos;\n            // make sure each supported flag is unique\n            switch (c) {\n                case 103 /* g */: {\n                    flags |= flags & 1 ? -1 : 1;\n                    break;\n                }\n                case 105 /* i */: {\n                    flags |= flags & 2 ? -1 : 2;\n                    break;\n                }\n                case 109 /* m */: {\n                    flags |= flags & 4 ? -1 : 4;\n                    break;\n                }\n                default: {\n                    flags = -1;\n                    break;\n                }\n            }\n        }\n        if (flags == -1) {\n            this.error(diagnostics_1.DiagnosticCode.Invalid_regular_expression_flags, this.range(start, this.pos));\n        }\n        return text.substring(start, this.pos);\n    };\n    Tokenizer.prototype.testInteger = function () {\n        var end = this.end;\n        var text = this.source.text;\n        if (this.pos + 1 < end && text.charCodeAt(this.pos) == 48 /* _0 */) {\n            switch (text.charCodeAt(this.pos + 2)) {\n                case 120 /* x */:\n                case 88 /* X */:\n                case 98 /* b */:\n                case 66 /* B */:\n                case 111 /* o */:\n                case 79 /* O */: return true;\n            }\n        }\n        var pos = this.pos;\n        while (pos < end) {\n            var c = text.charCodeAt(pos);\n            if (c == 46 /* DOT */ || c == 101 /* e */ || c == 69 /* E */)\n                return false;\n            if ((c < 48 /* _0 */ || c > 57 /* _9 */) && c != 95 /* _ */)\n                break;\n            // does not validate separator placement (this is done in readXYInteger)\n            pos++;\n        }\n        return true;\n    };\n    Tokenizer.prototype.readInteger = function () {\n        var text = this.source.text;\n        if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == 48 /* _0 */) {\n            switch (text.charCodeAt(this.pos + 1)) {\n                case 120 /* x */:\n                case 88 /* X */: {\n                    this.pos += 2;\n                    return this.readHexInteger();\n                }\n                case 98 /* b */:\n                case 66 /* B */: {\n                    this.pos += 2;\n                    return this.readBinaryInteger();\n                }\n                case 111 /* o */:\n                case 79 /* O */: {\n                    this.pos += 2;\n                    return this.readOctalInteger();\n                }\n            }\n            if (util_1.isOctalDigit(text.charCodeAt(this.pos + 1))) {\n                var start = this.pos;\n                ++this.pos;\n                var value = this.readOctalInteger();\n                this.error(diagnostics_1.DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode, this.range(start, this.pos));\n                return value;\n            }\n        }\n        return this.readDecimalInteger();\n    };\n    Tokenizer.prototype.readHexInteger = function () {\n        var text = this.source.text;\n        var start = this.pos;\n        var value = i64_new(0);\n        var i64_4 = i64_new(4);\n        var sepEnd = start;\n        var end = this.end;\n        while (this.pos < end) {\n            var pos = this.pos;\n            var c = text.charCodeAt(pos);\n            if (c >= 48 /* _0 */ && c <= 57 /* _9 */) {\n                // value = (value << 4) + c - CharCode._0;\n                value = i64_add(i64_shl(value, i64_4), i64_new(c - 48 /* _0 */));\n            }\n            else if (c >= 65 /* A */ && c <= 70 /* F */) {\n                // value = (value << 4) + 10 + c - CharCode.A;\n                value = i64_add(i64_shl(value, i64_4), i64_new(10 + c - 65 /* A */));\n            }\n            else if (c >= 97 /* a */ && c <= 102 /* f */) {\n                // value = (value << 4) + 10 + c - CharCode.a;\n                value = i64_add(i64_shl(value, i64_4), i64_new(10 + c - 97 /* a */));\n            }\n            else if (c == 95 /* _ */) {\n                if (sepEnd == pos) {\n                    this.error(sepEnd == start\n                        ? diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here\n                        : diagnostics_1.DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted, this.range(pos));\n                }\n                sepEnd = pos + 1;\n            }\n            else {\n                break;\n            }\n            this.pos = pos + 1;\n        }\n        if (this.pos == start) {\n            this.error(diagnostics_1.DiagnosticCode.Hexadecimal_digit_expected, this.range(start));\n        }\n        else if (sepEnd == this.pos) {\n            this.error(diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here, this.range(sepEnd - 1));\n        }\n        return value;\n    };\n    Tokenizer.prototype.readDecimalInteger = function () {\n        var text = this.source.text;\n        var start = this.pos;\n        var end = this.end;\n        var value = i64_new(0);\n        var i64_10 = i64_new(10);\n        var sepEnd = start;\n        while (this.pos < end) {\n            var pos = this.pos;\n            var c = text.charCodeAt(pos);\n            if (c >= 48 /* _0 */ && c <= 57 /* _9 */) {\n                // value = value * 10 + c - CharCode._0;\n                value = i64_add(i64_mul(value, i64_10), i64_new(c - 48 /* _0 */));\n            }\n            else if (c == 95 /* _ */) {\n                if (sepEnd == pos) {\n                    this.error(sepEnd == start\n                        ? diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here\n                        : diagnostics_1.DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted, this.range(pos));\n                }\n                sepEnd = pos + 1;\n            }\n            else {\n                break;\n            }\n            this.pos = pos + 1;\n        }\n        if (this.pos == start) {\n            this.error(diagnostics_1.DiagnosticCode.Digit_expected, this.range(start));\n        }\n        else if (sepEnd == this.pos) {\n            this.error(diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here, this.range(sepEnd - 1));\n        }\n        return value;\n    };\n    Tokenizer.prototype.readOctalInteger = function () {\n        var text = this.source.text;\n        var start = this.pos;\n        var value = i64_new(0);\n        var i64_3 = i64_new(3);\n        var sepEnd = start;\n        var end = this.end;\n        while (this.pos < end) {\n            var pos = this.pos;\n            var c = text.charCodeAt(pos);\n            if (c >= 48 /* _0 */ && c <= 55 /* _7 */) {\n                // value = (value << 3) + c - CharCode._0;\n                value = i64_add(i64_shl(value, i64_3), i64_new(c - 48 /* _0 */));\n            }\n            else if (c == 95 /* _ */) {\n                if (sepEnd == pos) {\n                    this.error(sepEnd == start\n                        ? diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here\n                        : diagnostics_1.DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted, this.range(pos));\n                }\n                sepEnd = pos + 1;\n            }\n            else {\n                break;\n            }\n            ++this.pos;\n        }\n        if (this.pos == start) {\n            this.error(diagnostics_1.DiagnosticCode.Octal_digit_expected, this.range(start));\n        }\n        else if (sepEnd == this.pos) {\n            this.error(diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here, this.range(sepEnd - 1));\n        }\n        return value;\n    };\n    Tokenizer.prototype.readBinaryInteger = function () {\n        var text = this.source.text;\n        var start = this.pos;\n        var value = i64_new(0);\n        var i64_1 = i64_new(1);\n        var sepEnd = start;\n        var end = this.end;\n        while (this.pos < end) {\n            var pos = this.pos;\n            var c = text.charCodeAt(pos);\n            if (c == 48 /* _0 */) {\n                // value = (value << 1);\n                value = i64_shl(value, i64_1);\n            }\n            else if (c == 49 /* _1 */) {\n                // value = (value << 1) + 1;\n                value = i64_add(i64_shl(value, i64_1), i64_1);\n            }\n            else if (c == 95 /* _ */) {\n                if (sepEnd == pos) {\n                    this.error(sepEnd == start\n                        ? diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here\n                        : diagnostics_1.DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted, this.range(pos));\n                }\n                sepEnd = pos + 1;\n            }\n            else {\n                break;\n            }\n            this.pos = pos + 1;\n        }\n        if (this.pos == start) {\n            this.error(diagnostics_1.DiagnosticCode.Binary_digit_expected, this.range(start));\n        }\n        else if (sepEnd == this.pos) {\n            this.error(diagnostics_1.DiagnosticCode.Numeric_separators_are_not_allowed_here, this.range(sepEnd - 1));\n        }\n        return value;\n    };\n    Tokenizer.prototype.readFloat = function () {\n        // var text = this.source.text;\n        // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n        //   switch (text.charCodeAt(this.pos + 1)) {\n        //     case CharCode.X:\n        //     case CharCode.x: {\n        //       this.pos += 2;\n        //       return this.readHexFloat();\n        //     }\n        //   }\n        // }\n        return this.readDecimalFloat();\n    };\n    Tokenizer.prototype.readDecimalFloat = function () {\n        // TODO: numeric separators (parseFloat can't handle these)\n        var start = this.pos;\n        var end = this.end;\n        var text = this.source.text;\n        while (this.pos < end && util_1.isDecimalDigit(text.charCodeAt(this.pos))) {\n            ++this.pos;\n        }\n        if (this.pos < end && text.charCodeAt(this.pos) == 46 /* DOT */) {\n            ++this.pos;\n            while (this.pos < end && util_1.isDecimalDigit(text.charCodeAt(this.pos))) {\n                ++this.pos;\n            }\n        }\n        if (this.pos < end) {\n            var c = text.charCodeAt(this.pos);\n            if (c == 101 /* e */ || c == 69 /* E */) {\n                if (++this.pos < end &&\n                    (c = text.charCodeAt(this.pos)) == 45 /* MINUS */ || c == 43 /* PLUS */ &&\n                    util_1.isDecimalDigit(text.charCodeAt(this.pos + 1))) {\n                    ++this.pos;\n                }\n                while (this.pos < end && util_1.isDecimalDigit(text.charCodeAt(this.pos))) {\n                    ++this.pos;\n                }\n            }\n        }\n        return parseFloat(text.substring(start, this.pos));\n    };\n    Tokenizer.prototype.readHexFloat = function () {\n        throw new Error(\"not implemented\"); // TBD\n    };\n    Tokenizer.prototype.readUnicodeEscape = function () {\n        var remain = 4;\n        var value = 0;\n        var end = this.end;\n        var text = this.source.text;\n        while (this.pos < end) {\n            var c = text.charCodeAt(this.pos++);\n            if (c >= 48 /* _0 */ && c <= 57 /* _9 */) {\n                value = (value << 4) + c - 48 /* _0 */;\n            }\n            else if (c >= 65 /* A */ && c <= 70 /* F */) {\n                value = (value << 4) + c + (10 - 65 /* A */);\n            }\n            else if (c >= 97 /* a */ && c <= 102 /* f */) {\n                value = (value << 4) + c + (10 - 97 /* a */);\n            }\n            else {\n                this.error(diagnostics_1.DiagnosticCode.Hexadecimal_digit_expected, this.range(this.pos - 1, this.pos));\n                return \"\";\n            }\n            if (--remain == 0)\n                break;\n        }\n        if (remain) {\n            this.error(diagnostics_1.DiagnosticCode.Unexpected_end_of_text, this.range(this.pos));\n            return \"\";\n        }\n        return String.fromCharCode(value);\n    };\n    Tokenizer.prototype.readExtendedUnicodeEscape = function () {\n        var start = this.pos;\n        var value = this.readHexInteger();\n        var value32 = i64_low(value);\n        var invalid = false;\n        assert(!i64_high(value));\n        if (value32 > 0x10FFFF) {\n            this.error(diagnostics_1.DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive, this.range(start, this.pos));\n            invalid = true;\n        }\n        var end = this.end;\n        var text = this.source.text;\n        if (this.pos >= end) {\n            this.error(diagnostics_1.DiagnosticCode.Unexpected_end_of_text, this.range(start, end));\n            invalid = true;\n        }\n        else if (text.charCodeAt(this.pos) == 125 /* CLOSEBRACE */) {\n            ++this.pos;\n        }\n        else {\n            this.error(diagnostics_1.DiagnosticCode.Unterminated_Unicode_escape_sequence, this.range(start, this.pos));\n            invalid = true;\n        }\n        if (invalid)\n            return \"\";\n        return value32 < 65536\n            ? String.fromCharCode(value32)\n            : String.fromCharCode(((value32 - 65536) >>> 10) + 0xD800, ((value32 - 65536) & 1023) + 0xDC00);\n    };\n    Tokenizer.prototype.finish = function () {\n    };\n    return Tokenizer;\n}(diagnostics_1.DiagnosticEmitter));\nexports.Tokenizer = Tokenizer;\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nvar State = /** @class */ (function () {\n    function State() {\n    }\n    return State;\n}());\nexports.State = State;\n// Reusable state object to reduce allocations\nvar reusableState = null;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/** @module util */ /***/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** Reads an 8-bit integer from the specified buffer. */\nfunction readI8(buffer, offset) {\n    return buffer[offset];\n}\nexports.readI8 = readI8;\n/** Writes an 8-bit integer to the specified buffer. */\nfunction writeI8(value, buffer, offset) {\n    buffer[offset] = value;\n}\nexports.writeI8 = writeI8;\n/** Reads a 16-bit integer from the specified buffer. */\nfunction readI16(buffer, offset) {\n    return buffer[offset]\n        | buffer[offset + 1] << 8;\n}\nexports.readI16 = readI16;\n/** Writes a 16-bit integer to the specified buffer. */\nfunction writeI16(value, buffer, offset) {\n    buffer[offset] = value;\n    buffer[offset + 1] = value >>> 8;\n}\nexports.writeI16 = writeI16;\n/** Reads a 32-bit integer from the specified buffer. */\nfunction readI32(buffer, offset) {\n    return buffer[offset]\n        | buffer[offset + 1] << 8\n        | buffer[offset + 2] << 16\n        | buffer[offset + 3] << 24;\n}\nexports.readI32 = readI32;\n/** Writes a 32-bit integer to the specified buffer. */\nfunction writeI32(value, buffer, offset) {\n    buffer[offset] = value;\n    buffer[offset + 1] = value >>> 8;\n    buffer[offset + 2] = value >>> 16;\n    buffer[offset + 3] = value >>> 24;\n}\nexports.writeI32 = writeI32;\n/** Reads a 64-bit integer from the specified buffer. */\nfunction readI64(buffer, offset) {\n    var lo = readI32(buffer, offset);\n    var hi = readI32(buffer, offset + 4);\n    return i64_new(lo, hi);\n}\nexports.readI64 = readI64;\n/** Writes a 64-bit integer to the specified buffer. */\nfunction writeI64(value, buffer, offset) {\n    writeI32(i64_low(value), buffer, offset);\n    writeI32(i64_high(value), buffer, offset + 4);\n}\nexports.writeI64 = writeI64;\n/** Reads a 32-bit float from the specified buffer. */\nfunction readF32(buffer, offset) {\n    return i32_as_f32(readI32(buffer, offset));\n}\nexports.readF32 = readF32;\n/** Writes a 32-bit float to the specified buffer. */\nfunction writeF32(value, buffer, offset) {\n    writeI32(f32_as_i32(value), buffer, offset);\n}\nexports.writeF32 = writeF32;\n/** Reads a 64-bit float from the specified buffer. */\nfunction readF64(buffer, offset) {\n    return i64_as_f64(readI64(buffer, offset));\n}\nexports.readF64 = readF64;\n/** Writes a 64-bit float to the specified buffer. */\nfunction writeF64(value, buffer, offset) {\n    var valueI64 = f64_as_i64(value);\n    writeI32(i64_low(valueI64), buffer, offset);\n    writeI32(i64_high(valueI64), buffer, offset + 4);\n}\nexports.writeF64 = writeF64;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluYXJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3V0aWwvYmluYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxtQkFBbUIsQ0FBQSxLQUFLOztBQUV4Qix3REFBd0Q7QUFDeEQsU0FBZ0IsTUFBTSxDQUFDLE1BQWtCLEVBQUUsTUFBVztJQUNwRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4QixDQUFDO0FBRkQsd0JBRUM7QUFFRCx1REFBdUQ7QUFDdkQsU0FBZ0IsT0FBTyxDQUFDLEtBQVUsRUFBRSxNQUFrQixFQUFFLE1BQVc7SUFDakUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUN6QixDQUFDO0FBRkQsMEJBRUM7QUFFRCx3REFBd0Q7QUFDeEQsU0FBZ0IsT0FBTyxDQUFDLE1BQWtCLEVBQUUsTUFBVztJQUNyRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUs7VUFDbEIsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUhELDBCQUdDO0FBRUQsdURBQXVEO0FBQ3ZELFNBQWdCLFFBQVEsQ0FBQyxLQUFVLEVBQUUsTUFBa0IsRUFBRSxNQUFXO0lBQ2xFLE1BQU0sQ0FBQyxNQUFNLENBQUssR0FBRyxLQUFLLENBQUM7SUFDM0IsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLEtBQUssQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFIRCw0QkFHQztBQUVELHdEQUF3RDtBQUN4RCxTQUFnQixPQUFPLENBQUMsTUFBa0IsRUFBRSxNQUFXO0lBQ3JELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBSztVQUNsQixNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7VUFDdkIsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFO1VBQ3hCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2xDLENBQUM7QUFMRCwwQkFLQztBQUVELHVEQUF1RDtBQUN2RCxTQUFnQixRQUFRLENBQUMsS0FBVSxFQUFFLE1BQWtCLEVBQUUsTUFBVztJQUNsRSxNQUFNLENBQUMsTUFBTSxDQUFLLEdBQUcsS0FBSyxDQUFDO0lBQzNCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxLQUFLLENBQUMsQ0FBQztJQUNqQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssS0FBSyxFQUFFLENBQUM7SUFDbEMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLEtBQUssRUFBRSxDQUFDO0FBQ3BDLENBQUM7QUFMRCw0QkFLQztBQUVELHdEQUF3RDtBQUN4RCxTQUFnQixPQUFPLENBQUMsTUFBa0IsRUFBRSxNQUFXO0lBQ3JELElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDakMsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckMsT0FBTyxPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFKRCwwQkFJQztBQUVELHVEQUF1RDtBQUN2RCxTQUFnQixRQUFRLENBQUMsS0FBVSxFQUFFLE1BQWtCLEVBQUUsTUFBVztJQUNsRSxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN6QyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUhELDRCQUdDO0FBRUQsc0RBQXNEO0FBQ3RELFNBQWdCLE9BQU8sQ0FBQyxNQUFrQixFQUFFLE1BQVc7SUFDckQsT0FBTyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFGRCwwQkFFQztBQUVELHFEQUFxRDtBQUNyRCxTQUFnQixRQUFRLENBQUMsS0FBVSxFQUFFLE1BQWtCLEVBQUUsTUFBVztJQUNsRSxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBRkQsNEJBRUM7QUFFRCxzREFBc0Q7QUFDdEQsU0FBZ0IsT0FBTyxDQUFDLE1BQWtCLEVBQUUsTUFBVztJQUNyRCxPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUZELDBCQUVDO0FBRUQscURBQXFEO0FBQ3JELFNBQWdCLFFBQVEsQ0FBQyxLQUFVLEVBQUUsTUFBa0IsRUFBRSxNQUFXO0lBQ2xFLElBQUksUUFBUSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM1QyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDbkQsQ0FBQztBQUpELDRCQUlDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBtb2R1bGUgdXRpbCAqLy8qKiovXG5cbi8qKiBSZWFkcyBhbiA4LWJpdCBpbnRlZ2VyIGZyb20gdGhlIHNwZWNpZmllZCBidWZmZXIuICovXG5leHBvcnQgZnVuY3Rpb24gcmVhZEk4KGJ1ZmZlcjogVWludDhBcnJheSwgb2Zmc2V0OiBpMzIpOiBpMzIge1xuICByZXR1cm4gYnVmZmVyW29mZnNldF07XG59XG5cbi8qKiBXcml0ZXMgYW4gOC1iaXQgaW50ZWdlciB0byB0aGUgc3BlY2lmaWVkIGJ1ZmZlci4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZUk4KHZhbHVlOiBpMzIsIGJ1ZmZlcjogVWludDhBcnJheSwgb2Zmc2V0OiBpMzIpOiB2b2lkIHtcbiAgYnVmZmVyW29mZnNldF0gPSB2YWx1ZTtcbn1cblxuLyoqIFJlYWRzIGEgMTYtYml0IGludGVnZXIgZnJvbSB0aGUgc3BlY2lmaWVkIGJ1ZmZlci4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWFkSTE2KGJ1ZmZlcjogVWludDhBcnJheSwgb2Zmc2V0OiBpMzIpOiBpMzIge1xuICByZXR1cm4gYnVmZmVyW29mZnNldCAgICBdXG4gICAgICAgfCBidWZmZXJbb2Zmc2V0ICsgMV0gPDwgODtcbn1cblxuLyoqIFdyaXRlcyBhIDE2LWJpdCBpbnRlZ2VyIHRvIHRoZSBzcGVjaWZpZWQgYnVmZmVyLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlSTE2KHZhbHVlOiBpMzIsIGJ1ZmZlcjogVWludDhBcnJheSwgb2Zmc2V0OiBpMzIpOiB2b2lkIHtcbiAgYnVmZmVyW29mZnNldCAgICBdID0gdmFsdWU7XG4gIGJ1ZmZlcltvZmZzZXQgKyAxXSA9IHZhbHVlID4+PiA4O1xufVxuXG4vKiogUmVhZHMgYSAzMi1iaXQgaW50ZWdlciBmcm9tIHRoZSBzcGVjaWZpZWQgYnVmZmVyLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRJMzIoYnVmZmVyOiBVaW50OEFycmF5LCBvZmZzZXQ6IGkzMik6IGkzMiB7XG4gIHJldHVybiBidWZmZXJbb2Zmc2V0ICAgIF1cbiAgICAgICB8IGJ1ZmZlcltvZmZzZXQgKyAxXSA8PCA4XG4gICAgICAgfCBidWZmZXJbb2Zmc2V0ICsgMl0gPDwgMTZcbiAgICAgICB8IGJ1ZmZlcltvZmZzZXQgKyAzXSA8PCAyNDtcbn1cblxuLyoqIFdyaXRlcyBhIDMyLWJpdCBpbnRlZ2VyIHRvIHRoZSBzcGVjaWZpZWQgYnVmZmVyLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlSTMyKHZhbHVlOiBpMzIsIGJ1ZmZlcjogVWludDhBcnJheSwgb2Zmc2V0OiBpMzIpOiB2b2lkIHtcbiAgYnVmZmVyW29mZnNldCAgICBdID0gdmFsdWU7XG4gIGJ1ZmZlcltvZmZzZXQgKyAxXSA9IHZhbHVlID4+PiA4O1xuICBidWZmZXJbb2Zmc2V0ICsgMl0gPSB2YWx1ZSA+Pj4gMTY7XG4gIGJ1ZmZlcltvZmZzZXQgKyAzXSA9IHZhbHVlID4+PiAyNDtcbn1cblxuLyoqIFJlYWRzIGEgNjQtYml0IGludGVnZXIgZnJvbSB0aGUgc3BlY2lmaWVkIGJ1ZmZlci4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWFkSTY0KGJ1ZmZlcjogVWludDhBcnJheSwgb2Zmc2V0OiBpMzIpOiBJNjQge1xuICB2YXIgbG8gPSByZWFkSTMyKGJ1ZmZlciwgb2Zmc2V0KTtcbiAgdmFyIGhpID0gcmVhZEkzMihidWZmZXIsIG9mZnNldCArIDQpO1xuICByZXR1cm4gaTY0X25ldyhsbywgaGkpO1xufVxuXG4vKiogV3JpdGVzIGEgNjQtYml0IGludGVnZXIgdG8gdGhlIHNwZWNpZmllZCBidWZmZXIuICovXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVJNjQodmFsdWU6IEk2NCwgYnVmZmVyOiBVaW50OEFycmF5LCBvZmZzZXQ6IGkzMik6IHZvaWQge1xuICB3cml0ZUkzMihpNjRfbG93KHZhbHVlKSwgYnVmZmVyLCBvZmZzZXQpO1xuICB3cml0ZUkzMihpNjRfaGlnaCh2YWx1ZSksIGJ1ZmZlciwgb2Zmc2V0ICsgNCk7XG59XG5cbi8qKiBSZWFkcyBhIDMyLWJpdCBmbG9hdCBmcm9tIHRoZSBzcGVjaWZpZWQgYnVmZmVyLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGMzIoYnVmZmVyOiBVaW50OEFycmF5LCBvZmZzZXQ6IGkzMik6IGYzMiB7XG4gIHJldHVybiBpMzJfYXNfZjMyKHJlYWRJMzIoYnVmZmVyLCBvZmZzZXQpKTtcbn1cblxuLyoqIFdyaXRlcyBhIDMyLWJpdCBmbG9hdCB0byB0aGUgc3BlY2lmaWVkIGJ1ZmZlci4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZUYzMih2YWx1ZTogZjMyLCBidWZmZXI6IFVpbnQ4QXJyYXksIG9mZnNldDogaTMyKTogdm9pZCB7XG4gIHdyaXRlSTMyKGYzMl9hc19pMzIodmFsdWUpLCBidWZmZXIsIG9mZnNldCk7XG59XG5cbi8qKiBSZWFkcyBhIDY0LWJpdCBmbG9hdCBmcm9tIHRoZSBzcGVjaWZpZWQgYnVmZmVyLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGNjQoYnVmZmVyOiBVaW50OEFycmF5LCBvZmZzZXQ6IGkzMik6IGY2NCB7XG4gIHJldHVybiBpNjRfYXNfZjY0KHJlYWRJNjQoYnVmZmVyLCBvZmZzZXQpKTtcbn1cblxuLyoqIFdyaXRlcyBhIDY0LWJpdCBmbG9hdCB0byB0aGUgc3BlY2lmaWVkIGJ1ZmZlci4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZUY2NCh2YWx1ZTogZjY0LCBidWZmZXI6IFVpbnQ4QXJyYXksIG9mZnNldDogaTMyKTogdm9pZCB7XG4gIHZhciB2YWx1ZUk2NCA9IGY2NF9hc19pNjQodmFsdWUpO1xuICB3cml0ZUkzMihpNjRfbG93KHZhbHVlSTY0KSwgYnVmZmVyLCBvZmZzZXQpO1xuICB3cml0ZUkzMihpNjRfaGlnaCh2YWx1ZUk2NCksIGJ1ZmZlciwgb2Zmc2V0ICsgNCk7XG59XG4iXX0=","\"use strict\";\n/** @module util */ /***/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nfunction bitsetIs(map, index) {\n    assert(index >= 0 && index < 64);\n    return i64_ne(i64_and(map, i64_shl(i64_one, i64_new(index))), i64_zero);\n}\nexports.bitsetIs = bitsetIs;\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nfunction bitsetSet(map, index, isSet) {\n    assert(index >= 0 && index < 64);\n    return isSet\n        ? i64_or(map, i64_shl(i64_one, i64_new(index)))\n        : i64_and(map, i64_not(i64_shl(i64_one, i64_new(index))));\n}\nexports.bitsetSet = bitsetSet;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml0c2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3V0aWwvYml0c2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxtQkFBbUIsQ0FBQSxLQUFLOztBQUV4QiwwRUFBMEU7QUFDMUUsU0FBZ0IsUUFBUSxDQUFDLEdBQVEsRUFBRSxLQUFVO0lBQzNDLE1BQU0sQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNqQyxPQUFPLE1BQU0sQ0FDWCxPQUFPLENBQ0wsR0FBRyxFQUNILE9BQU8sQ0FDTCxPQUFPLEVBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUNmLENBQ0YsRUFDRCxRQUFRLENBQ1QsQ0FBQztBQUNKLENBQUM7QUFaRCw0QkFZQztBQUVELGlHQUFpRztBQUNqRyxTQUFnQixTQUFTLENBQUMsR0FBUSxFQUFFLEtBQVUsRUFBRSxLQUFXO0lBQ3pELE1BQU0sQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNqQyxPQUFPLEtBQUs7UUFDVixDQUFDLENBQUMsTUFBTSxDQUNKLEdBQUcsRUFDSCxPQUFPLENBQ0wsT0FBTyxFQUNQLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FDZixDQUNGO1FBQ0gsQ0FBQyxDQUFDLE9BQU8sQ0FDTCxHQUFHLEVBQ0gsT0FBTyxDQUNMLE9BQU8sQ0FDTCxPQUFPLEVBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUNmLENBQ0YsQ0FDRixDQUFDO0FBQ1IsQ0FBQztBQW5CRCw4QkFtQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQG1vZHVsZSB1dGlsICovLyoqKi9cblxuLyoqIFRlc3RzIGlmIHRoZSBiaXQgYXQgdGhlIHNwZWNpZmllZCBpbmRleCBpcyBzZXQgd2l0aGluIGEgNjQtYml0IG1hcC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiaXRzZXRJcyhtYXA6IEk2NCwgaW5kZXg6IGkzMik6IGJvb2wge1xuICBhc3NlcnQoaW5kZXggPj0gMCAmJiBpbmRleCA8IDY0KTtcbiAgcmV0dXJuIGk2NF9uZShcbiAgICBpNjRfYW5kKFxuICAgICAgbWFwLFxuICAgICAgaTY0X3NobChcbiAgICAgICAgaTY0X29uZSxcbiAgICAgICAgaTY0X25ldyhpbmRleClcbiAgICAgIClcbiAgICApLFxuICAgIGk2NF96ZXJvXG4gICk7XG59XG5cbi8qKiBTZXRzIG9yIHVuc2V0cyB0aGUgYml0IGF0IHRoZSBzcGVjaWZpZWQgaW5kZXggd2l0aGluIGEgNjQtYml0IG1hcCBhbmQgcmV0dXJucyB0aGUgbmV3IG1hcC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiaXRzZXRTZXQobWFwOiBJNjQsIGluZGV4OiBpMzIsIGlzU2V0OiBib29sKTogSTY0IHtcbiAgYXNzZXJ0KGluZGV4ID49IDAgJiYgaW5kZXggPCA2NCk7XG4gIHJldHVybiBpc1NldFxuICAgID8gaTY0X29yKFxuICAgICAgICBtYXAsXG4gICAgICAgIGk2NF9zaGwoXG4gICAgICAgICAgaTY0X29uZSxcbiAgICAgICAgICBpNjRfbmV3KGluZGV4KVxuICAgICAgICApXG4gICAgICApXG4gICAgOiBpNjRfYW5kKFxuICAgICAgICBtYXAsXG4gICAgICAgIGk2NF9ub3QoXG4gICAgICAgICAgaTY0X3NobChcbiAgICAgICAgICAgIGk2NF9vbmUsXG4gICAgICAgICAgICBpNjRfbmV3KGluZGV4KVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbn1cbiJdfQ==","\"use strict\";\n/** @module util */ /***/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** An enum of named character codes. */\nvar CharCode;\n(function (CharCode) {\n    CharCode[CharCode[\"NULL\"] = 0] = \"NULL\";\n    CharCode[CharCode[\"LINEFEED\"] = 10] = \"LINEFEED\";\n    CharCode[CharCode[\"CARRIAGERETURN\"] = 13] = \"CARRIAGERETURN\";\n    CharCode[CharCode[\"LINESEPARATOR\"] = 8232] = \"LINESEPARATOR\";\n    CharCode[CharCode[\"PARAGRAPHSEPARATOR\"] = 8233] = \"PARAGRAPHSEPARATOR\";\n    CharCode[CharCode[\"NEXTLINE\"] = 133] = \"NEXTLINE\";\n    CharCode[CharCode[\"SPACE\"] = 32] = \"SPACE\";\n    CharCode[CharCode[\"NONBREAKINGSPACE\"] = 160] = \"NONBREAKINGSPACE\";\n    CharCode[CharCode[\"ENQUAD\"] = 8192] = \"ENQUAD\";\n    CharCode[CharCode[\"EMQUAD\"] = 8193] = \"EMQUAD\";\n    CharCode[CharCode[\"ENSPACE\"] = 8194] = \"ENSPACE\";\n    CharCode[CharCode[\"EMSPACE\"] = 8195] = \"EMSPACE\";\n    CharCode[CharCode[\"THREEPEREMSPACE\"] = 8196] = \"THREEPEREMSPACE\";\n    CharCode[CharCode[\"FOURPEREMSPACE\"] = 8197] = \"FOURPEREMSPACE\";\n    CharCode[CharCode[\"SIXPEREMSPACE\"] = 8198] = \"SIXPEREMSPACE\";\n    CharCode[CharCode[\"FIGURESPACE\"] = 8199] = \"FIGURESPACE\";\n    CharCode[CharCode[\"PUNCTUATIONSPACE\"] = 8200] = \"PUNCTUATIONSPACE\";\n    CharCode[CharCode[\"THINSPACE\"] = 8201] = \"THINSPACE\";\n    CharCode[CharCode[\"HAIRSPACE\"] = 8202] = \"HAIRSPACE\";\n    CharCode[CharCode[\"ZEROWIDTHSPACE\"] = 8203] = \"ZEROWIDTHSPACE\";\n    CharCode[CharCode[\"NARROWNOBREAKSPACE\"] = 8239] = \"NARROWNOBREAKSPACE\";\n    CharCode[CharCode[\"IDEOGRAPHICSPACE\"] = 12288] = \"IDEOGRAPHICSPACE\";\n    CharCode[CharCode[\"MATHEMATICALSPACE\"] = 8287] = \"MATHEMATICALSPACE\";\n    CharCode[CharCode[\"OGHAM\"] = 5760] = \"OGHAM\";\n    CharCode[CharCode[\"_\"] = 95] = \"_\";\n    CharCode[CharCode[\"_0\"] = 48] = \"_0\";\n    CharCode[CharCode[\"_1\"] = 49] = \"_1\";\n    CharCode[CharCode[\"_2\"] = 50] = \"_2\";\n    CharCode[CharCode[\"_3\"] = 51] = \"_3\";\n    CharCode[CharCode[\"_4\"] = 52] = \"_4\";\n    CharCode[CharCode[\"_5\"] = 53] = \"_5\";\n    CharCode[CharCode[\"_6\"] = 54] = \"_6\";\n    CharCode[CharCode[\"_7\"] = 55] = \"_7\";\n    CharCode[CharCode[\"_8\"] = 56] = \"_8\";\n    CharCode[CharCode[\"_9\"] = 57] = \"_9\";\n    CharCode[CharCode[\"a\"] = 97] = \"a\";\n    CharCode[CharCode[\"b\"] = 98] = \"b\";\n    CharCode[CharCode[\"c\"] = 99] = \"c\";\n    CharCode[CharCode[\"d\"] = 100] = \"d\";\n    CharCode[CharCode[\"e\"] = 101] = \"e\";\n    CharCode[CharCode[\"f\"] = 102] = \"f\";\n    CharCode[CharCode[\"g\"] = 103] = \"g\";\n    CharCode[CharCode[\"h\"] = 104] = \"h\";\n    CharCode[CharCode[\"i\"] = 105] = \"i\";\n    CharCode[CharCode[\"j\"] = 106] = \"j\";\n    CharCode[CharCode[\"k\"] = 107] = \"k\";\n    CharCode[CharCode[\"l\"] = 108] = \"l\";\n    CharCode[CharCode[\"m\"] = 109] = \"m\";\n    CharCode[CharCode[\"n\"] = 110] = \"n\";\n    CharCode[CharCode[\"o\"] = 111] = \"o\";\n    CharCode[CharCode[\"p\"] = 112] = \"p\";\n    CharCode[CharCode[\"q\"] = 113] = \"q\";\n    CharCode[CharCode[\"r\"] = 114] = \"r\";\n    CharCode[CharCode[\"s\"] = 115] = \"s\";\n    CharCode[CharCode[\"t\"] = 116] = \"t\";\n    CharCode[CharCode[\"u\"] = 117] = \"u\";\n    CharCode[CharCode[\"v\"] = 118] = \"v\";\n    CharCode[CharCode[\"w\"] = 119] = \"w\";\n    CharCode[CharCode[\"x\"] = 120] = \"x\";\n    CharCode[CharCode[\"y\"] = 121] = \"y\";\n    CharCode[CharCode[\"z\"] = 122] = \"z\";\n    CharCode[CharCode[\"A\"] = 65] = \"A\";\n    CharCode[CharCode[\"B\"] = 66] = \"B\";\n    CharCode[CharCode[\"C\"] = 67] = \"C\";\n    CharCode[CharCode[\"D\"] = 68] = \"D\";\n    CharCode[CharCode[\"E\"] = 69] = \"E\";\n    CharCode[CharCode[\"F\"] = 70] = \"F\";\n    CharCode[CharCode[\"G\"] = 71] = \"G\";\n    CharCode[CharCode[\"H\"] = 72] = \"H\";\n    CharCode[CharCode[\"I\"] = 73] = \"I\";\n    CharCode[CharCode[\"J\"] = 74] = \"J\";\n    CharCode[CharCode[\"K\"] = 75] = \"K\";\n    CharCode[CharCode[\"L\"] = 76] = \"L\";\n    CharCode[CharCode[\"M\"] = 77] = \"M\";\n    CharCode[CharCode[\"N\"] = 78] = \"N\";\n    CharCode[CharCode[\"O\"] = 79] = \"O\";\n    CharCode[CharCode[\"P\"] = 80] = \"P\";\n    CharCode[CharCode[\"Q\"] = 81] = \"Q\";\n    CharCode[CharCode[\"R\"] = 82] = \"R\";\n    CharCode[CharCode[\"S\"] = 83] = \"S\";\n    CharCode[CharCode[\"T\"] = 84] = \"T\";\n    CharCode[CharCode[\"U\"] = 85] = \"U\";\n    CharCode[CharCode[\"V\"] = 86] = \"V\";\n    CharCode[CharCode[\"W\"] = 87] = \"W\";\n    CharCode[CharCode[\"X\"] = 88] = \"X\";\n    CharCode[CharCode[\"Y\"] = 89] = \"Y\";\n    CharCode[CharCode[\"Z\"] = 90] = \"Z\";\n    CharCode[CharCode[\"AMPERSAND\"] = 38] = \"AMPERSAND\";\n    CharCode[CharCode[\"ASTERISK\"] = 42] = \"ASTERISK\";\n    CharCode[CharCode[\"AT\"] = 64] = \"AT\";\n    CharCode[CharCode[\"BACKSLASH\"] = 92] = \"BACKSLASH\";\n    CharCode[CharCode[\"BACKTICK\"] = 96] = \"BACKTICK\";\n    CharCode[CharCode[\"BAR\"] = 124] = \"BAR\";\n    CharCode[CharCode[\"CARET\"] = 94] = \"CARET\";\n    CharCode[CharCode[\"CLOSEBRACE\"] = 125] = \"CLOSEBRACE\";\n    CharCode[CharCode[\"CLOSEBRACKET\"] = 93] = \"CLOSEBRACKET\";\n    CharCode[CharCode[\"CLOSEPAREN\"] = 41] = \"CLOSEPAREN\";\n    CharCode[CharCode[\"COLON\"] = 58] = \"COLON\";\n    CharCode[CharCode[\"COMMA\"] = 44] = \"COMMA\";\n    CharCode[CharCode[\"DOLLAR\"] = 36] = \"DOLLAR\";\n    CharCode[CharCode[\"DOT\"] = 46] = \"DOT\";\n    CharCode[CharCode[\"DOUBLEQUOTE\"] = 34] = \"DOUBLEQUOTE\";\n    CharCode[CharCode[\"EQUALS\"] = 61] = \"EQUALS\";\n    CharCode[CharCode[\"EXCLAMATION\"] = 33] = \"EXCLAMATION\";\n    CharCode[CharCode[\"GREATERTHAN\"] = 62] = \"GREATERTHAN\";\n    CharCode[CharCode[\"HASH\"] = 35] = \"HASH\";\n    CharCode[CharCode[\"LESSTHAN\"] = 60] = \"LESSTHAN\";\n    CharCode[CharCode[\"MINUS\"] = 45] = \"MINUS\";\n    CharCode[CharCode[\"OPENBRACE\"] = 123] = \"OPENBRACE\";\n    CharCode[CharCode[\"OPENBRACKET\"] = 91] = \"OPENBRACKET\";\n    CharCode[CharCode[\"OPENPAREN\"] = 40] = \"OPENPAREN\";\n    CharCode[CharCode[\"PERCENT\"] = 37] = \"PERCENT\";\n    CharCode[CharCode[\"PLUS\"] = 43] = \"PLUS\";\n    CharCode[CharCode[\"QUESTION\"] = 63] = \"QUESTION\";\n    CharCode[CharCode[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    CharCode[CharCode[\"SINGLEQUOTE\"] = 39] = \"SINGLEQUOTE\";\n    CharCode[CharCode[\"SLASH\"] = 47] = \"SLASH\";\n    CharCode[CharCode[\"TILDE\"] = 126] = \"TILDE\";\n    CharCode[CharCode[\"BACKSPACE\"] = 8] = \"BACKSPACE\";\n    CharCode[CharCode[\"FORMFEED\"] = 12] = \"FORMFEED\";\n    CharCode[CharCode[\"BYTEORDERMARK\"] = 65279] = \"BYTEORDERMARK\";\n    CharCode[CharCode[\"TAB\"] = 9] = \"TAB\";\n    CharCode[CharCode[\"VERTICALTAB\"] = 11] = \"VERTICALTAB\";\n})(CharCode = exports.CharCode || (exports.CharCode = {}));\n/** Tests if the specified character code is some sort of line break. */\nfunction isLineBreak(c) {\n    switch (c) {\n        case 10 /* LINEFEED */:\n        case 13 /* CARRIAGERETURN */:\n        case 8232 /* LINESEPARATOR */:\n        case 8233 /* PARAGRAPHSEPARATOR */: {\n            return true;\n        }\n        default: {\n            return false;\n        }\n    }\n}\nexports.isLineBreak = isLineBreak;\n/** Tests if the specified character code is some sort of white space. */\nfunction isWhiteSpace(c) {\n    switch (c) {\n        case 32 /* SPACE */:\n        case 9 /* TAB */:\n        case 11 /* VERTICALTAB */:\n        case 12 /* FORMFEED */:\n        case 160 /* NONBREAKINGSPACE */:\n        case 133 /* NEXTLINE */:\n        case 5760 /* OGHAM */:\n        case 8239 /* NARROWNOBREAKSPACE */:\n        case 8287 /* MATHEMATICALSPACE */:\n        case 12288 /* IDEOGRAPHICSPACE */:\n        case 65279 /* BYTEORDERMARK */: {\n            return true;\n        }\n        default: {\n            return c >= 8192 /* ENQUAD */ && c <= 8203 /* ZEROWIDTHSPACE */;\n        }\n    }\n}\nexports.isWhiteSpace = isWhiteSpace;\n/** Tests if the specified character code is a valid decimal digit. */\nfunction isDecimalDigit(c) {\n    return c >= 48 /* _0 */ && c <= 57 /* _9 */;\n}\nexports.isDecimalDigit = isDecimalDigit;\n/** Tests if the specified character code is a valid octal digit. */\nfunction isOctalDigit(c) {\n    return c >= 48 /* _0 */ && c <= 55 /* _7 */;\n}\nexports.isOctalDigit = isOctalDigit;\n/** Tests if the specified character code is a valid start of an identifier. */\nfunction isIdentifierStart(c) {\n    return c >= 97 /* a */ && c <= 122 /* z */\n        || c >= 65 /* A */ && c <= 90 /* Z */\n        || c == 95 /* _ */\n        || c == 36 /* DOLLAR */\n        || c > 0x7f && isUnicodeIdentifierStart(c);\n}\nexports.isIdentifierStart = isIdentifierStart;\n/** Tests if the specified character code is a valid keyword character. */\nfunction isKeywordCharacter(c) {\n    return c >= 97 /* a */ && c <= 122 /* z */;\n}\nexports.isKeywordCharacter = isKeywordCharacter;\n/** Tests if the specified character code is a valid part of an identifier. */\nfunction isIdentifierPart(c) {\n    return c >= 97 /* a */ && c <= 122 /* z */\n        || c >= 65 /* A */ && c <= 90 /* Z */\n        || c >= 48 /* _0 */ && c <= 57 /* _9 */\n        || c == 95 /* _ */\n        || c == 36 /* DOLLAR */\n        || c > 0x7f && isUnicodeIdentifierPart(c);\n}\nexports.isIdentifierPart = isIdentifierPart;\n// storing as u16 to save memory\nvar unicodeIdentifierStart = [\n    170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n    740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n    908, 908, 910, 929, 931,\n    1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n    1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n    1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n    1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n    2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n    2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n    2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n    2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n    2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n    2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n    2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n    2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n    2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n    2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n    3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n    3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n    3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n    3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n    3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n    3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n    3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n    3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n    4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n    4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n    4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n    4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n    5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n    5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n    6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n    6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n    6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n    7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n    7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n    8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n    8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n    8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n    8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n    8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n    11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n    11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n    11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n    11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n    12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n    12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n    19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n    42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n    42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n    43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n    43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n    43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n    43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n    43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n    43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n    55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n    64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n    64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n    65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n    65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nvar unicodeIdentifierPart = [\n    170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n    740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n    908, 908, 910, 929, 931,\n    1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n    1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n    1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n    1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n    2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n    2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n    2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n    2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n    2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n    2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n    2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n    2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n    2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n    2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n    2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n    2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n    3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n    3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n    3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n    3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n    3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n    3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n    3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n    3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n    3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n    3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n    3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n    3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n    3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n    4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n    4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n    4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n    4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n    5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n    5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n    6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n    6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n    6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n    6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n    7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n    7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n    8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n    8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n    8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n    8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n    8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n    8521, 8526, 8526, 8544, 8584,\n    11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n    11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n    11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n    11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n    12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n    12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n    13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n    42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n    42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n    43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n    43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n    43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n    43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n    43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n    55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n    64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n    64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n    65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n    65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n    65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nfunction lookupInUnicodeMap(code, map) {\n    if (code < map[0])\n        return false;\n    var lo = 0;\n    var hi = map.length;\n    var mid;\n    var midVal;\n    while (lo + 1 < hi) {\n        mid = lo + ((hi - lo) >> 1);\n        mid -= (mid & 1);\n        midVal = map[mid];\n        if (midVal <= code && code <= map[mid + 1]) {\n            return true;\n        }\n        if (code < midVal) {\n            hi = mid;\n        }\n        else {\n            lo = mid + 2;\n        }\n    }\n    return false;\n}\nfunction isUnicodeIdentifierStart(code) {\n    return code < 0 || code > 0xffff ? false\n        : lookupInUnicodeMap(code, unicodeIdentifierStart);\n}\nfunction isUnicodeIdentifierPart(code) {\n    return code < 0 || code > 0xffff ? false\n        : lookupInUnicodeMap(code, unicodeIdentifierPart);\n}\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction makeArray(original) {\n    if (original === void 0) { original = null; }\n    if (original) {\n        var cloned = new Array(original.length);\n        for (var i = 0, k = original.length; i < k; ++i)\n            unchecked(cloned[i] = original[i]);\n        return cloned;\n    }\n    return new Array();\n}\nexports.makeArray = makeArray;\nfunction makeSet(original) {\n    var e_1, _a;\n    if (original === void 0) { original = null; }\n    if (original) {\n        var cloned = new Set();\n        try {\n            for (var original_1 = __values(original), original_1_1 = original_1.next(); !original_1_1.done; original_1_1 = original_1.next()) {\n                var v = original_1_1.value;\n                cloned.add(v);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (original_1_1 && !original_1_1.done && (_a = original_1.return)) _a.call(original_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return cloned;\n    }\n    return new Set();\n}\nexports.makeSet = makeSet;\nfunction makeMap(original, overrides) {\n    var e_2, _a, e_3, _b, e_4, _c;\n    if (original === void 0) { original = null; }\n    if (overrides === void 0) { overrides = null; }\n    var cloned = new Map();\n    if (original) {\n        try {\n            for (var original_2 = __values(original), original_2_1 = original_2.next(); !original_2_1.done; original_2_1 = original_2.next()) {\n                var _d = __read(original_2_1.value, 2), k = _d[0], v = _d[1];\n                cloned.set(k, v);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (original_2_1 && !original_2_1.done && (_a = original_2.return)) _a.call(original_2);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        if (overrides)\n            try {\n                for (var overrides_1 = __values(overrides), overrides_1_1 = overrides_1.next(); !overrides_1_1.done; overrides_1_1 = overrides_1.next()) {\n                    var _e = __read(overrides_1_1.value, 2), k = _e[0], v = _e[1];\n                    cloned.set(k, v);\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (overrides_1_1 && !overrides_1_1.done && (_b = overrides_1.return)) _b.call(overrides_1);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n    }\n    else if (overrides) {\n        try {\n            for (var overrides_2 = __values(overrides), overrides_2_1 = overrides_2.next(); !overrides_2_1.done; overrides_2_1 = overrides_2.next()) {\n                var _f = __read(overrides_2_1.value, 2), k = _f[0], v = _f[1];\n                cloned.set(k, v);\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (overrides_2_1 && !overrides_2_1.done && (_c = overrides_2.return)) _c.call(overrides_2);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n    }\n    return cloned;\n}\nexports.makeMap = makeMap;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdXRpbC9jb2xsZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLFNBQWdCLFNBQVMsQ0FBSSxRQUFnQztJQUFoQyx5QkFBQSxFQUFBLGVBQWdDO0lBQzNELElBQUksUUFBUSxFQUFFO1FBQ1osSUFBSSxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRixPQUFPLE1BQU0sQ0FBQztLQUNmO0lBQ0QsT0FBTyxJQUFJLEtBQUssRUFBSyxDQUFDO0FBQ3hCLENBQUM7QUFQRCw4QkFPQztBQUVELFNBQWdCLE9BQU8sQ0FBSSxRQUE4Qjs7SUFBOUIseUJBQUEsRUFBQSxlQUE4QjtJQUN2RCxJQUFJLFFBQVEsRUFBRTtRQUNaLElBQUksTUFBTSxHQUFHLElBQUksR0FBRyxFQUFLLENBQUM7O1lBQzFCLEtBQWMsSUFBQSxhQUFBLFNBQUEsUUFBUSxDQUFBLGtDQUFBO2dCQUFqQixJQUFJLENBQUMscUJBQUE7Z0JBQWMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUFBOzs7Ozs7Ozs7UUFDdEMsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUNELE9BQU8sSUFBSSxHQUFHLEVBQUssQ0FBQztBQUN0QixDQUFDO0FBUEQsMEJBT0M7QUFFRCxTQUFnQixPQUFPLENBQU0sUUFBZ0MsRUFBRSxTQUFpQzs7SUFBbkUseUJBQUEsRUFBQSxlQUFnQztJQUFFLDBCQUFBLEVBQUEsZ0JBQWlDO0lBQzlGLElBQUksTUFBTSxHQUFHLElBQUksR0FBRyxFQUFPLENBQUM7SUFDNUIsSUFBSSxRQUFRLEVBQUU7O1lBQ1osS0FBbUIsSUFBQSxhQUFBLFNBQUEsUUFBUSxDQUFBLGtDQUFBO2dCQUFsQixJQUFBLGtDQUFNLEVBQUwsU0FBQyxFQUFFLFNBQUM7Z0JBQWUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFBQTs7Ozs7Ozs7O1FBQzlDLElBQUksU0FBUzs7Z0JBQUUsS0FBbUIsSUFBQSxjQUFBLFNBQUEsU0FBUyxDQUFBLG9DQUFBO29CQUFuQixJQUFBLG1DQUFNLEVBQUwsU0FBQyxFQUFFLFNBQUM7b0JBQWdCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUFBOzs7Ozs7OzthQUFBO0tBQy9EO1NBQU0sSUFBSSxTQUFTLEVBQUU7O1lBQ3BCLEtBQW1CLElBQUEsY0FBQSxTQUFBLFNBQVMsQ0FBQSxvQ0FBQTtnQkFBbkIsSUFBQSxtQ0FBTSxFQUFMLFNBQUMsRUFBRSxTQUFDO2dCQUFnQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUFBOzs7Ozs7Ozs7S0FDaEQ7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBVEQsMEJBU0MiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gbWFrZUFycmF5PFY+KG9yaWdpbmFsOiBBcnJheTxWPiB8IG51bGwgPSBudWxsKTogQXJyYXk8Vj4ge1xuICBpZiAob3JpZ2luYWwpIHtcbiAgICBsZXQgY2xvbmVkID0gbmV3IEFycmF5PFY+KG9yaWdpbmFsLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGsgPSBvcmlnaW5hbC5sZW5ndGg7IGkgPCBrOyArK2kpIHVuY2hlY2tlZChjbG9uZWRbaV0gPSBvcmlnaW5hbFtpXSk7XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxuICByZXR1cm4gbmV3IEFycmF5PFY+KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlU2V0PFY+KG9yaWdpbmFsOiBTZXQ8Vj4gfCBudWxsID0gbnVsbCk6IFNldDxWPiB7XG4gIGlmIChvcmlnaW5hbCkge1xuICAgIGxldCBjbG9uZWQgPSBuZXcgU2V0PFY+KCk7XG4gICAgZm9yIChsZXQgdiBvZiBvcmlnaW5hbCkgY2xvbmVkLmFkZCh2KTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG4gIHJldHVybiBuZXcgU2V0PFY+KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlTWFwPEssVj4ob3JpZ2luYWw6IE1hcDxLLFY+IHwgbnVsbCA9IG51bGwsIG92ZXJyaWRlczogTWFwPEssVj4gfCBudWxsID0gbnVsbCk6IE1hcDxLLFY+IHtcbiAgdmFyIGNsb25lZCA9IG5ldyBNYXA8SyxWPigpO1xuICBpZiAob3JpZ2luYWwpIHtcbiAgICBmb3IgKGxldCBbaywgdl0gb2Ygb3JpZ2luYWwpIGNsb25lZC5zZXQoaywgdik7XG4gICAgaWYgKG92ZXJyaWRlcykgZm9yIChsZXQgW2ssIHZdIG9mIG92ZXJyaWRlcykgY2xvbmVkLnNldChrLCB2KTtcbiAgfSBlbHNlIGlmIChvdmVycmlkZXMpIHtcbiAgICBmb3IgKGxldCBbaywgdl0gb2Ygb3ZlcnJpZGVzKSBjbG9uZWQuc2V0KGssIHYpO1xuICB9XG4gIHJldHVybiBjbG9uZWQ7XG59XG4iXX0=","\"use strict\";\n/**\n * Various compiler utilities.\n * @module util\n * @preferred\n */ /***/\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./bitset\"));\n__export(require(\"./charcode\"));\n__export(require(\"./collections\"));\n__export(require(\"./path\"));\n__export(require(\"./text\"));\n__export(require(\"./binary\"));\n/** Tests if `x` is a power of two. */\nfunction isPowerOf2(x) {\n    return x != 0 && (x & (x - 1)) == 0;\n}\nexports.isPowerOf2 = isPowerOf2;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdXRpbC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRyxDQUFBLEtBQUs7Ozs7O0FBRVIsOEJBQXlCO0FBQ3pCLGdDQUEyQjtBQUMzQixtQ0FBOEI7QUFDOUIsNEJBQXVCO0FBQ3ZCLDRCQUF1QjtBQUN2Qiw4QkFBeUI7QUFFekIsc0NBQXNDO0FBQ3RDLFNBQWdCLFVBQVUsQ0FBQyxDQUFNO0lBQy9CLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBRkQsZ0NBRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFZhcmlvdXMgY29tcGlsZXIgdXRpbGl0aWVzLlxuICogQG1vZHVsZSB1dGlsXG4gKiBAcHJlZmVycmVkXG4gKi8vKioqL1xuXG5leHBvcnQgKiBmcm9tIFwiLi9iaXRzZXRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NoYXJjb2RlXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb2xsZWN0aW9uc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcGF0aFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vdGV4dFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vYmluYXJ5XCI7XG5cbi8qKiBUZXN0cyBpZiBgeGAgaXMgYSBwb3dlciBvZiB0d28uICovXG5leHBvcnQgZnVuY3Rpb24gaXNQb3dlck9mMih4OiBpMzIpOiBib29sIHtcbiAgcmV0dXJuIHggIT0gMCAmJiAoeCAmICh4IC0gMSkpID09IDA7XG59XG4iXX0=","\"use strict\";\n/** @module util */ /***/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar common_1 = require(\"../common\");\nvar separator = 47 /* SLASH */;\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nfunction normalizePath(path) {\n    var pos = 0;\n    var len = path.length;\n    // trim leading './'\n    while (pos + 1 < len &&\n        path.charCodeAt(pos) == 46 /* DOT */ &&\n        path.charCodeAt(pos + 1) == separator) {\n        pos += 2;\n    }\n    if (pos > 0 || len < path.length) {\n        path = path.substring(pos, len);\n        len -= pos;\n        pos = 0;\n    }\n    var atEnd;\n    while (pos + 1 < len) {\n        atEnd = false;\n        // we are only interested in '/.' sequences ...\n        if (path.charCodeAt(pos) == separator &&\n            path.charCodeAt(pos + 1) == 46 /* DOT */) {\n            // '/.' ( '/' | $ )\n            atEnd = pos + 2 == len;\n            if (atEnd ||\n                pos + 2 < len &&\n                    path.charCodeAt(pos + 2) == separator) {\n                path = atEnd\n                    ? path.substring(0, pos)\n                    : path.substring(0, pos) + path.substring(pos + 2);\n                len -= 2;\n                continue;\n            }\n            // '/.' ( './' | '.' $ )\n            atEnd = pos + 3 == len;\n            if (atEnd && path.charCodeAt(pos + 2) == 46 /* DOT */ ||\n                pos + 3 < len &&\n                    path.charCodeAt(pos + 2) == 46 /* DOT */ &&\n                    path.charCodeAt(pos + 3) == separator) {\n                // find preceeding '/'\n                var ipos = pos;\n                while (--ipos >= 0) {\n                    if (path.charCodeAt(ipos) == separator) {\n                        if (pos - ipos != 3 ||\n                            path.charCodeAt(ipos + 1) != 46 /* DOT */ ||\n                            path.charCodeAt(ipos + 2) != 46 /* DOT */) { // exclude '..' itself\n                            path = atEnd\n                                ? path.substring(0, ipos)\n                                : path.substring(0, ipos) + path.substring(pos + 3);\n                            len -= pos + 3 - ipos;\n                            pos = ipos - 1; // incremented again at end of loop\n                        }\n                        break;\n                    }\n                }\n                // if there's no preceeding '/', trim start if non-empty\n                if (ipos < 0 && pos > 0) {\n                    if (pos != 2 ||\n                        path.charCodeAt(0) != 46 /* DOT */ ||\n                        path.charCodeAt(1) != 46 /* DOT */) { // exclude '..' itself\n                        path = path.substring(pos + 4);\n                        len = path.length;\n                        continue;\n                    }\n                }\n            }\n        }\n        pos++;\n    }\n    return len > 0 ? path : \".\";\n}\nexports.normalizePath = normalizePath;\n/** Resolves the specified path relative to the specified origin. */\nfunction resolvePath(normalizedPath, origin) {\n    if (normalizedPath.startsWith(\"std/\")) {\n        return normalizedPath;\n    }\n    return normalizePath(dirname(origin) + common_1.PATH_DELIMITER + normalizedPath);\n}\nexports.resolvePath = resolvePath;\n/** Obtains the directory portion of a normalized path. */\nfunction dirname(normalizedPath) {\n    var pos = normalizedPath.length;\n    if (pos <= 1) {\n        if (pos == 0)\n            return \".\";\n        if (normalizedPath.charCodeAt(0) == separator) {\n            return normalizedPath;\n        }\n    }\n    while (--pos > 0) {\n        if (normalizedPath.charCodeAt(pos) == separator) {\n            return normalizedPath.substring(0, pos);\n        }\n    }\n    return \".\";\n}\nexports.dirname = dirname;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/** @module util */ /***/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar indentX1 = \"  \";\nvar indentX2 = \"    \";\nvar indentX4 = \"        \";\n/** Creates an indentation matching the number of specified levels. */\nfunction indent(sb, level) {\n    while (level >= 4) {\n        sb.push(indentX4);\n        level -= 4;\n    }\n    if (level >= 2) {\n        sb.push(indentX2);\n        level -= 2;\n    }\n    if (level) {\n        sb.push(indentX1);\n    }\n}\nexports.indent = indent;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy91dGlsL3RleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG1CQUFtQixDQUFBLEtBQUs7O0FBRXhCLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQztBQUN0QixJQUFNLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDeEIsSUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDO0FBRTVCLHNFQUFzRTtBQUN0RSxTQUFnQixNQUFNLENBQUMsRUFBWSxFQUFFLEtBQVU7SUFDN0MsT0FBTyxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2pCLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEIsS0FBSyxJQUFJLENBQUMsQ0FBQztLQUNaO0lBQ0QsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQ2QsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsQixLQUFLLElBQUksQ0FBQyxDQUFDO0tBQ1o7SUFDRCxJQUFJLEtBQUssRUFBRTtRQUNULEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDbkI7QUFDSCxDQUFDO0FBWkQsd0JBWUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQG1vZHVsZSB1dGlsICovLyoqKi9cblxuY29uc3QgaW5kZW50WDEgPSBcIiAgXCI7XG5jb25zdCBpbmRlbnRYMiA9IFwiICAgIFwiO1xuY29uc3QgaW5kZW50WDQgPSBcIiAgICAgICAgXCI7XG5cbi8qKiBDcmVhdGVzIGFuIGluZGVudGF0aW9uIG1hdGNoaW5nIHRoZSBudW1iZXIgb2Ygc3BlY2lmaWVkIGxldmVscy4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmRlbnQoc2I6IHN0cmluZ1tdLCBsZXZlbDogaTMyKTogdm9pZCB7XG4gIHdoaWxlIChsZXZlbCA+PSA0KSB7XG4gICAgc2IucHVzaChpbmRlbnRYNCk7XG4gICAgbGV2ZWwgLT0gNDtcbiAgfVxuICBpZiAobGV2ZWwgPj0gMikge1xuICAgIHNiLnB1c2goaW5kZW50WDIpO1xuICAgIGxldmVsIC09IDI7XG4gIH1cbiAgaWYgKGxldmVsKSB7XG4gICAgc2IucHVzaChpbmRlbnRYMSk7XG4gIH1cbn1cbiJdfQ==","\"use strict\";\n// This file is shared with the compiler and must remain portable\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** Indicates specific features to activate. */\nvar Feature;\n(function (Feature) {\n    /** No additional features. */\n    Feature[Feature[\"NONE\"] = 0] = \"NONE\";\n    /** Sign extension operations. */\n    Feature[Feature[\"SIGN_EXTENSION\"] = 1] = \"SIGN_EXTENSION\";\n    /** Mutable global imports and exports. */\n    Feature[Feature[\"MUTABLE_GLOBALS\"] = 2] = \"MUTABLE_GLOBALS\";\n    /** Non-trapping float to integer operations. */\n    Feature[Feature[\"NONTRAPPING_F2I\"] = 4] = \"NONTRAPPING_F2I\";\n    /** Bulk memory operations. */\n    Feature[Feature[\"BULK_MEMORY\"] = 8] = \"BULK_MEMORY\";\n    /** SIMD types and operations. */\n    Feature[Feature[\"SIMD\"] = 16] = \"SIMD\";\n    /** Threading and atomic operations. */\n    Feature[Feature[\"THREADS\"] = 32] = \"THREADS\";\n    /** Exception handling operations. */\n    Feature[Feature[\"EXCEPTION_HANDLING\"] = 64] = \"EXCEPTION_HANDLING\";\n    /** Tail call operations. */\n    Feature[Feature[\"TAIL_CALLS\"] = 128] = \"TAIL_CALLS\";\n    /** Reference types. */\n    Feature[Feature[\"REFERENCE_TYPES\"] = 256] = \"REFERENCE_TYPES\"; // see: https://github.com/WebAssembly/reference-types\n})(Feature = exports.Feature || (exports.Feature = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3N0ZC9hc3NlbWJseS9zaGFyZWQvZmVhdHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsaUVBQWlFOztBQUVqRSwrQ0FBK0M7QUFDL0MsSUFBa0IsT0FxQmpCO0FBckJELFdBQWtCLE9BQU87SUFDdkIsOEJBQThCO0lBQzlCLHFDQUFRLENBQUE7SUFDUixpQ0FBaUM7SUFDakMseURBQXVCLENBQUE7SUFDdkIsMENBQTBDO0lBQzFDLDJEQUF3QixDQUFBO0lBQ3hCLGdEQUFnRDtJQUNoRCwyREFBd0IsQ0FBQTtJQUN4Qiw4QkFBOEI7SUFDOUIsbURBQW9CLENBQUE7SUFDcEIsaUNBQWlDO0lBQ2pDLHNDQUFhLENBQUE7SUFDYix1Q0FBdUM7SUFDdkMsNENBQWdCLENBQUE7SUFDaEIscUNBQXFDO0lBQ3JDLGtFQUEyQixDQUFBO0lBQzNCLDRCQUE0QjtJQUM1QixtREFBbUIsQ0FBQTtJQUNuQix1QkFBdUI7SUFDdkIsNkRBQXdCLENBQUEsQ0FBQyxzREFBc0Q7QUFDakYsQ0FBQyxFQXJCaUIsT0FBTyxHQUFQLGVBQU8sS0FBUCxlQUFPLFFBcUJ4QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZmlsZSBpcyBzaGFyZWQgd2l0aCB0aGUgY29tcGlsZXIgYW5kIG11c3QgcmVtYWluIHBvcnRhYmxlXG5cbi8qKiBJbmRpY2F0ZXMgc3BlY2lmaWMgZmVhdHVyZXMgdG8gYWN0aXZhdGUuICovXG5leHBvcnQgY29uc3QgZW51bSBGZWF0dXJlIHtcbiAgLyoqIE5vIGFkZGl0aW9uYWwgZmVhdHVyZXMuICovXG4gIE5PTkUgPSAwLFxuICAvKiogU2lnbiBleHRlbnNpb24gb3BlcmF0aW9ucy4gKi9cbiAgU0lHTl9FWFRFTlNJT04gPSAxIDw8IDAsIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL1dlYkFzc2VtYmx5L3NpZ24tZXh0ZW5zaW9uLW9wc1xuICAvKiogTXV0YWJsZSBnbG9iYWwgaW1wb3J0cyBhbmQgZXhwb3J0cy4gKi9cbiAgTVVUQUJMRV9HTE9CQUxTID0gMSA8PCAxLCAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJBc3NlbWJseS9tdXRhYmxlLWdsb2JhbFxuICAvKiogTm9uLXRyYXBwaW5nIGZsb2F0IHRvIGludGVnZXIgb3BlcmF0aW9ucy4gKi9cbiAgTk9OVFJBUFBJTkdfRjJJID0gMSA8PCAyLCAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJBc3NlbWJseS9ub250cmFwcGluZy1mbG9hdC10by1pbnQtY29udmVyc2lvbnNcbiAgLyoqIEJ1bGsgbWVtb3J5IG9wZXJhdGlvbnMuICovXG4gIEJVTEtfTUVNT1JZID0gMSA8PCAzLCAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJBc3NlbWJseS9idWxrLW1lbW9yeS1vcGVyYXRpb25zXG4gIC8qKiBTSU1EIHR5cGVzIGFuZCBvcGVyYXRpb25zLiAqL1xuICBTSU1EID0gMSA8PCA0LCAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJBc3NlbWJseS9zaW1kXG4gIC8qKiBUaHJlYWRpbmcgYW5kIGF0b21pYyBvcGVyYXRpb25zLiAqL1xuICBUSFJFQURTID0gMSA8PCA1LCAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJBc3NlbWJseS90aHJlYWRzXG4gIC8qKiBFeGNlcHRpb24gaGFuZGxpbmcgb3BlcmF0aW9ucy4gKi9cbiAgRVhDRVBUSU9OX0hBTkRMSU5HID0gMSA8PCA2LCAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJBc3NlbWJseS9leGNlcHRpb24taGFuZGxpbmdcbiAgLyoqIFRhaWwgY2FsbCBvcGVyYXRpb25zLiAqL1xuICBUQUlMX0NBTExTID0gMSA8PCA3LCAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJBc3NlbWJseS90YWlsLWNhbGxcbiAgLyoqIFJlZmVyZW5jZSB0eXBlcy4gKi9cbiAgUkVGRVJFTkNFX1RZUEVTID0gMSA8PCA4IC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL1dlYkFzc2VtYmx5L3JlZmVyZW5jZS10eXBlc1xufVxuIl19","\"use strict\";\n// This file is shared with the compiler and must remain portable\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** Compilation target. */\nvar Target;\n(function (Target) {\n    /** WebAssembly with 32-bit pointers. */\n    Target[Target[\"WASM32\"] = 0] = \"WASM32\";\n    /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n    Target[Target[\"WASM64\"] = 1] = \"WASM64\";\n    /** Portable. */\n    Target[Target[\"JS\"] = 2] = \"JS\";\n})(Target = exports.Target || (exports.Target = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFyZ2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3RkL2Fzc2VtYmx5L3NoYXJlZC90YXJnZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGlFQUFpRTs7QUFFakUsMEJBQTBCO0FBQzFCLElBQVksTUFPWDtBQVBELFdBQVksTUFBTTtJQUNoQix3Q0FBd0M7SUFDeEMsdUNBQU0sQ0FBQTtJQUNOLDJGQUEyRjtJQUMzRix1Q0FBTSxDQUFBO0lBQ04sZ0JBQWdCO0lBQ2hCLCtCQUFFLENBQUE7QUFDSixDQUFDLEVBUFcsTUFBTSxHQUFOLGNBQU0sS0FBTixjQUFNLFFBT2pCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGlzIHNoYXJlZCB3aXRoIHRoZSBjb21waWxlciBhbmQgbXVzdCByZW1haW4gcG9ydGFibGVcblxuLyoqIENvbXBpbGF0aW9uIHRhcmdldC4gKi9cbmV4cG9ydCBlbnVtIFRhcmdldCB7XG4gIC8qKiBXZWJBc3NlbWJseSB3aXRoIDMyLWJpdCBwb2ludGVycy4gKi9cbiAgV0FTTTMyLFxuICAvKiogV2ViQXNzZW1ibHkgd2l0aCA2NC1iaXQgcG9pbnRlcnMuIEV4cGVyaW1lbnRhbCBhbmQgbm90IHN1cHBvcnRlZCBieSBhbnkgcnVudGltZSB5ZXQuICovXG4gIFdBU002NCxcbiAgLyoqIFBvcnRhYmxlLiAqL1xuICBKU1xufVxuIl19","\"use strict\";\n// This file is shared with the compiler and must remain portable\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n/** Runtime type information data structure. */\nvar Typeinfo = /** @class */ (function () {\n    function Typeinfo() {\n    }\n    Typeinfo = __decorate([\n        unmanaged\n    ], Typeinfo);\n    return Typeinfo;\n}());\nexports.Typeinfo = Typeinfo;\n/** Runtime type information flags. */\nvar TypeinfoFlags;\n(function (TypeinfoFlags) {\n    /** No specific flags. */\n    TypeinfoFlags[TypeinfoFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Type is an `ArrayBufferView`. */\n    TypeinfoFlags[TypeinfoFlags[\"ARRAYBUFFERVIEW\"] = 1] = \"ARRAYBUFFERVIEW\";\n    /** Type is an `Array`. */\n    TypeinfoFlags[TypeinfoFlags[\"ARRAY\"] = 2] = \"ARRAY\";\n    /** Type is a `Set`. */\n    TypeinfoFlags[TypeinfoFlags[\"SET\"] = 4] = \"SET\";\n    /** Type is a `Map`. */\n    TypeinfoFlags[TypeinfoFlags[\"MAP\"] = 8] = \"MAP\";\n    /** Type is inherently acyclic. */\n    TypeinfoFlags[TypeinfoFlags[\"ACYCLIC\"] = 16] = \"ACYCLIC\";\n    /** Value alignment of 1 byte. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_ALIGN_0\"] = 32] = \"VALUE_ALIGN_0\";\n    /** Value alignment of 2 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_ALIGN_1\"] = 64] = \"VALUE_ALIGN_1\";\n    /** Value alignment of 4 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_ALIGN_2\"] = 128] = \"VALUE_ALIGN_2\";\n    /** Value alignment of 8 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_ALIGN_3\"] = 256] = \"VALUE_ALIGN_3\";\n    /** Value alignment of 16 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_ALIGN_4\"] = 512] = \"VALUE_ALIGN_4\";\n    /** Value is a signed type. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_SIGNED\"] = 1024] = \"VALUE_SIGNED\";\n    /** Value is a float type. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_FLOAT\"] = 2048] = \"VALUE_FLOAT\";\n    /** Value type is nullable. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_NULLABLE\"] = 4096] = \"VALUE_NULLABLE\";\n    /** Value type is managed. */\n    TypeinfoFlags[TypeinfoFlags[\"VALUE_MANAGED\"] = 8192] = \"VALUE_MANAGED\";\n    /** Key alignment of 1 byte. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_ALIGN_0\"] = 16384] = \"KEY_ALIGN_0\";\n    /** Key alignment of 2 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_ALIGN_1\"] = 32768] = \"KEY_ALIGN_1\";\n    /** Key alignment of 4 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_ALIGN_2\"] = 65536] = \"KEY_ALIGN_2\";\n    /** Key alignment of 8 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_ALIGN_3\"] = 131072] = \"KEY_ALIGN_3\";\n    /** Key alignment of 16 bytes. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_ALIGN_4\"] = 262144] = \"KEY_ALIGN_4\";\n    /** Key is a signed type. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_SIGNED\"] = 524288] = \"KEY_SIGNED\";\n    /** Key is a float type. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_FLOAT\"] = 1048576] = \"KEY_FLOAT\";\n    /** Key type is nullable. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_NULLABLE\"] = 2097152] = \"KEY_NULLABLE\";\n    /** Key type is managed. */\n    TypeinfoFlags[TypeinfoFlags[\"KEY_MANAGED\"] = 4194304] = \"KEY_MANAGED\";\n})(TypeinfoFlags = exports.TypeinfoFlags || (exports.TypeinfoFlags = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWluZm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zdGQvYXNzZW1ibHkvc2hhcmVkL3R5cGVpbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxpRUFBaUU7Ozs7Ozs7O0FBRWpFLG9FQUFvRTtBQUNwRSwrQ0FBK0M7QUFDL0MseUVBQXlFO0FBQ3pFLG1GQUFtRjtBQUNuRixvRUFBb0U7QUFDcEUsc0VBQXNFO0FBQ3RFLCtFQUErRTtBQUMvRSxvRUFBb0U7QUFDcEUsb0VBQW9FO0FBQ3BFLG9FQUFvRTtBQUNwRSxvRUFBb0U7QUFFcEUsK0NBQStDO0FBRS9DO0lBQUE7SUFLQSxDQUFDO0lBTFksUUFBUTtRQURwQixTQUFTO09BQ0csUUFBUSxDQUtwQjtJQUFELGVBQUM7Q0FBQSxBQUxELElBS0M7QUFMWSw0QkFBUTtBQU9yQixzQ0FBc0M7QUFDdEMsSUFBa0IsYUFpRGpCO0FBakRELFdBQWtCLGFBQWE7SUFDN0IseUJBQXlCO0lBQ3pCLGlEQUFRLENBQUE7SUFDUixvQ0FBb0M7SUFDcEMsdUVBQXdCLENBQUE7SUFDeEIsMEJBQTBCO0lBQzFCLG1EQUFjLENBQUE7SUFDZCx1QkFBdUI7SUFDdkIsK0NBQVksQ0FBQTtJQUNaLHVCQUF1QjtJQUN2QiwrQ0FBWSxDQUFBO0lBQ1osa0NBQWtDO0lBQ2xDLHdEQUFnQixDQUFBO0lBQ2hCLGlDQUFpQztJQUNqQyxvRUFBc0IsQ0FBQTtJQUN0QixrQ0FBa0M7SUFDbEMsb0VBQXNCLENBQUE7SUFDdEIsa0NBQWtDO0lBQ2xDLHFFQUFzQixDQUFBO0lBQ3RCLGtDQUFrQztJQUNsQyxxRUFBc0IsQ0FBQTtJQUN0QixtQ0FBbUM7SUFDbkMscUVBQXNCLENBQUE7SUFDdEIsOEJBQThCO0lBQzlCLG9FQUFzQixDQUFBO0lBQ3RCLDZCQUE2QjtJQUM3QixrRUFBcUIsQ0FBQTtJQUNyQiw4QkFBOEI7SUFDOUIsd0VBQXdCLENBQUE7SUFDeEIsNkJBQTZCO0lBQzdCLHNFQUF1QixDQUFBO0lBQ3ZCLCtCQUErQjtJQUMvQixtRUFBcUIsQ0FBQTtJQUNyQixnQ0FBZ0M7SUFDaEMsbUVBQXFCLENBQUE7SUFDckIsZ0NBQWdDO0lBQ2hDLG1FQUFxQixDQUFBO0lBQ3JCLGdDQUFnQztJQUNoQyxvRUFBcUIsQ0FBQTtJQUNyQixpQ0FBaUM7SUFDakMsb0VBQXFCLENBQUE7SUFDckIsNEJBQTRCO0lBQzVCLGtFQUFvQixDQUFBO0lBQ3BCLDJCQUEyQjtJQUMzQixpRUFBbUIsQ0FBQTtJQUNuQiw0QkFBNEI7SUFDNUIsdUVBQXNCLENBQUE7SUFDdEIsMkJBQTJCO0lBQzNCLHFFQUFxQixDQUFBO0FBQ3ZCLENBQUMsRUFqRGlCLGFBQWEsR0FBYixxQkFBYSxLQUFiLHFCQUFhLFFBaUQ5QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZmlsZSBpcyBzaGFyZWQgd2l0aCB0aGUgY29tcGlsZXIgYW5kIG11c3QgcmVtYWluIHBvcnRhYmxlXG5cbi8vIOKVkuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCBUeXBlaW5mbyBpbnRlcnByZXRhdGlvbiDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZVcbi8vICAgIDMgICAgICAgICAgICAgICAgICAgMiAgICAgICAgICAgICAgICAgICAxXG4vLyAgMSAwIDkgOCA3IDYgNSA0IDMgMiAxIDAgOSA4IDcgNiA1IDQgMyAyIDEgMCA5IDggNyA2IDUgNCAzIDIgMSAwICBiaXRzXG4vLyDilJzilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilLTilIDilKQg4peE4pSAIF9fcnR0aV9iYXNlXG4vLyDilIIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICDilIJcbi8vIOKVnuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVoSDilJBcbi8vIOKUgiAgICAgICAgICAgICAgICAgICAgICBUeXBlaW5mbyNmbGFncyBbaWQ9MF0gICAgICAgICAgICAgICAgICAgIOKUgiBpZCA8IGNvdW50XG4vLyDilJwg4pSAIOKUgCDilIAg4pSAIOKUgCDilIAg4pSAIOKUgCDilIAg4pSAIOKUgCDilIAg4pSAIOKUgCDilIAg4pSAIOKUgCDilIAg4pSAIOKUgCDilIAg4pSAIOKUgCDilIAg4pSAIOKUgCDilIAg4pSAIOKUgCDilIAg4pSAIOKUpFxuLy8g4pSCICAgICAgICAgICAgICAgICAgICAgIFR5cGVpbmZvI2Jhc2UgIFtpZD0wXSAgICAgICAgICAgICAgICAgICAg4pSCXG4vLyDilJzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilKRcbi8vIOKUgiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKUglxuXG4vKiogUnVudGltZSB0eXBlIGluZm9ybWF0aW9uIGRhdGEgc3RydWN0dXJlLiAqL1xuQHVubWFuYWdlZFxuZXhwb3J0IGNsYXNzIFR5cGVpbmZvIHtcbiAgLyoqIEZsYWdzIGRlc2NyaWJpbmcgdGhlIHNoYXBlIG9mIHRoaXMgY2xhc3MgdHlwZS4gKi9cbiAgZmxhZ3M6IFR5cGVpbmZvRmxhZ3M7XG4gIC8qKiBCYXNlIGNsYXNzIGlkIG9yIGAwYCBpZiBub25lLiAqL1xuICBiYXNlOiB1MzI7XG59XG5cbi8qKiBSdW50aW1lIHR5cGUgaW5mb3JtYXRpb24gZmxhZ3MuICovXG5leHBvcnQgY29uc3QgZW51bSBUeXBlaW5mb0ZsYWdzIHtcbiAgLyoqIE5vIHNwZWNpZmljIGZsYWdzLiAqL1xuICBOT05FID0gMCxcbiAgLyoqIFR5cGUgaXMgYW4gYEFycmF5QnVmZmVyVmlld2AuICovXG4gIEFSUkFZQlVGRkVSVklFVyA9IDEgPDwgMCxcbiAgLyoqIFR5cGUgaXMgYW4gYEFycmF5YC4gKi9cbiAgQVJSQVkgPSAxIDw8IDEsXG4gIC8qKiBUeXBlIGlzIGEgYFNldGAuICovXG4gIFNFVCA9IDEgPDwgMixcbiAgLyoqIFR5cGUgaXMgYSBgTWFwYC4gKi9cbiAgTUFQID0gMSA8PCAzLFxuICAvKiogVHlwZSBpcyBpbmhlcmVudGx5IGFjeWNsaWMuICovXG4gIEFDWUNMSUMgPSAxIDw8IDQsXG4gIC8qKiBWYWx1ZSBhbGlnbm1lbnQgb2YgMSBieXRlLiAqL1xuICBWQUxVRV9BTElHTl8wID0gMSA8PCA1LFxuICAvKiogVmFsdWUgYWxpZ25tZW50IG9mIDIgYnl0ZXMuICovXG4gIFZBTFVFX0FMSUdOXzEgPSAxIDw8IDYsXG4gIC8qKiBWYWx1ZSBhbGlnbm1lbnQgb2YgNCBieXRlcy4gKi9cbiAgVkFMVUVfQUxJR05fMiA9IDEgPDwgNyxcbiAgLyoqIFZhbHVlIGFsaWdubWVudCBvZiA4IGJ5dGVzLiAqL1xuICBWQUxVRV9BTElHTl8zID0gMSA8PCA4LFxuICAvKiogVmFsdWUgYWxpZ25tZW50IG9mIDE2IGJ5dGVzLiAqL1xuICBWQUxVRV9BTElHTl80ID0gMSA8PCA5LFxuICAvKiogVmFsdWUgaXMgYSBzaWduZWQgdHlwZS4gKi9cbiAgVkFMVUVfU0lHTkVEID0gMSA8PCAxMCxcbiAgLyoqIFZhbHVlIGlzIGEgZmxvYXQgdHlwZS4gKi9cbiAgVkFMVUVfRkxPQVQgPSAxIDw8IDExLFxuICAvKiogVmFsdWUgdHlwZSBpcyBudWxsYWJsZS4gKi9cbiAgVkFMVUVfTlVMTEFCTEUgPSAxIDw8IDEyLFxuICAvKiogVmFsdWUgdHlwZSBpcyBtYW5hZ2VkLiAqL1xuICBWQUxVRV9NQU5BR0VEID0gMSA8PCAxMyxcbiAgLyoqIEtleSBhbGlnbm1lbnQgb2YgMSBieXRlLiAqL1xuICBLRVlfQUxJR05fMCA9IDEgPDwgMTQsXG4gIC8qKiBLZXkgYWxpZ25tZW50IG9mIDIgYnl0ZXMuICovXG4gIEtFWV9BTElHTl8xID0gMSA8PCAxNSxcbiAgLyoqIEtleSBhbGlnbm1lbnQgb2YgNCBieXRlcy4gKi9cbiAgS0VZX0FMSUdOXzIgPSAxIDw8IDE2LFxuICAvKiogS2V5IGFsaWdubWVudCBvZiA4IGJ5dGVzLiAqL1xuICBLRVlfQUxJR05fMyA9IDEgPDwgMTcsXG4gIC8qKiBLZXkgYWxpZ25tZW50IG9mIDE2IGJ5dGVzLiAqL1xuICBLRVlfQUxJR05fNCA9IDEgPDwgMTgsXG4gIC8qKiBLZXkgaXMgYSBzaWduZWQgdHlwZS4gKi9cbiAgS0VZX1NJR05FRCA9IDEgPDwgMTksXG4gIC8qKiBLZXkgaXMgYSBmbG9hdCB0eXBlLiAqL1xuICBLRVlfRkxPQVQgPSAxIDw8IDIwLFxuICAvKiogS2V5IHR5cGUgaXMgbnVsbGFibGUuICovXG4gIEtFWV9OVUxMQUJMRSA9IDEgPDwgMjEsXG4gIC8qKiBLZXkgdHlwZSBpcyBtYW5hZ2VkLiAqL1xuICBLRVlfTUFOQUdFRCA9IDEgPDwgMjJcbn1cbiJdfQ==","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ast_1 = require(\"../../src/ast\");\nvar visitor_1 = require(\"./visitor\");\nvar BaseVisitor = /** @class */ (function (_super) {\n    __extends(BaseVisitor, _super);\n    function BaseVisitor(writer) {\n        var _this = _super.call(this, writer) || this;\n        _this.depth = 0;\n        return _this;\n    }\n    BaseVisitor.prototype._visit = function (node) {\n        switch (node.kind) {\n            case ast_1.NodeKind.SOURCE: {\n                this.visitSource(node);\n                break;\n            }\n            // types\n            case ast_1.NodeKind.NAMEDTYPE: {\n                this.visitNamedTypeNode(node);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONTYPE: {\n                this.visitFunctionTypeNode(node);\n                break;\n            }\n            case ast_1.NodeKind.TYPENAME: {\n                this.visitTypeName(node);\n            }\n            case ast_1.NodeKind.TYPEPARAMETER: {\n                this.visitTypeParameter(node);\n                break;\n            }\n            // expressions\n            case ast_1.NodeKind.FALSE:\n            case ast_1.NodeKind.NULL:\n            case ast_1.NodeKind.SUPER:\n            case ast_1.NodeKind.THIS:\n            case ast_1.NodeKind.TRUE:\n            case ast_1.NodeKind.CONSTRUCTOR:\n            case ast_1.NodeKind.IDENTIFIER: {\n                this.visitIdentifierExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.ASSERTION: {\n                this.visitAssertionExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.BINARY: {\n                this.visitBinaryExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.CALL: {\n                this.visitCallExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.CLASS: {\n                this.visitClassExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.COMMA: {\n                this.visitCommaExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.ELEMENTACCESS: {\n                this.visitElementAccessExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTION: {\n                this.visitFunctionExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.INSTANCEOF: {\n                this.visitInstanceOfExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.LITERAL: {\n                this.visitLiteralExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.NEW: {\n                this.visitNewExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.PARENTHESIZED: {\n                this.visitParenthesizedExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.PROPERTYACCESS: {\n                this.visitPropertyAccessExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.TERNARY: {\n                this.visitTernaryExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.UNARYPOSTFIX: {\n                this.visitUnaryPostfixExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.UNARYPREFIX: {\n                this.visitUnaryPrefixExpression(node);\n                break;\n            }\n            // statements\n            case ast_1.NodeKind.BLOCK: {\n                this.visitBlockStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.BREAK: {\n                this.visitBreakStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.CONTINUE: {\n                this.visitContinueStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.DO: {\n                this.visitDoStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EMPTY: {\n                this.visitEmptyStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORT: {\n                this.visitExportStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORTDEFAULT: {\n                this.visitExportDefaultStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORTIMPORT: {\n                this.visitExportImportStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPRESSION: {\n                this.visitExpressionStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.FOR: {\n                this.visitForStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.IF: {\n                this.visitIfStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.IMPORT: {\n                this.visitImportStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.RETURN: {\n                this.visitReturnStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.SWITCH: {\n                this.visitSwitchStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.THROW: {\n                this.visitThrowStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.TRY: {\n                this.visitTryStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.VARIABLE: {\n                this.visitVariableStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.WHILE: {\n                this.visitWhileStatement(node);\n                break;\n            }\n            // declaration statements\n            case ast_1.NodeKind.CLASSDECLARATION: {\n                this.visitClassDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.ENUMDECLARATION: {\n                this.visitEnumDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.ENUMVALUEDECLARATION: {\n                this.visitEnumValueDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.FIELDDECLARATION: {\n                this.visitFieldDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONDECLARATION: {\n                this.visitFunctionDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.IMPORTDECLARATION: {\n                this.visitImportDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.INDEXSIGNATUREDECLARATION: {\n                this.visitIndexSignatureDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.INTERFACEDECLARATION: {\n                this.visitInterfaceDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.METHODDECLARATION: {\n                this.visitMethodDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.NAMESPACEDECLARATION: {\n                this.visitNamespaceDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.TYPEDECLARATION: {\n                this.visitTypeDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.VARIABLEDECLARATION: {\n                this.visitVariableDeclaration(node);\n                break;\n            }\n            // other\n            case ast_1.NodeKind.DECORATOR: {\n                this.visitDecoratorNode(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORTMEMBER: {\n                this.visitExportMember(node);\n                break;\n            }\n            case ast_1.NodeKind.PARAMETER: {\n                this.visitParameter(node);\n                break;\n            }\n            case ast_1.NodeKind.SWITCHCASE: {\n                this.visitSwitchCase(node);\n                break;\n            }\n            default: assert(false);\n        }\n    };\n    BaseVisitor.prototype.visitSource = function (node) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(node.statements), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var stmt = _c.value;\n                this.depth++;\n                this.visit(stmt);\n                this.depth--;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    BaseVisitor.prototype.visitTypeNode = function (node) { };\n    BaseVisitor.prototype.visitTypeName = function (node) {\n        this.visit(node.identifier);\n        if (node.next) {\n            this.visit(node);\n        }\n    };\n    BaseVisitor.prototype.visitNamedTypeNode = function (node) {\n        this.visit(node.name);\n        this.visit(node.typeArguments);\n    };\n    BaseVisitor.prototype.visitFunctionTypeNode = function (node) {\n        var e_2, _a;\n        try {\n            for (var _b = __values(node.parameters), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var param = _c.value;\n                this.visit(param);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        this.visit(node.returnType);\n    };\n    BaseVisitor.prototype.visitTypeParameter = function (node) {\n        this.visit(node.name);\n        if (node.extendsType)\n            this.visit(node.extendsType);\n        if (node.defaultType)\n            this.visit(node.defaultType);\n    };\n    BaseVisitor.prototype.visitIdentifierExpression = function (node) { };\n    BaseVisitor.prototype.visitArrayLiteralExpression = function (node) {\n        var _this = this;\n        node.elementExpressions.map(function (e) {\n            if (e)\n                _this.visit(e);\n        });\n    };\n    BaseVisitor.prototype.visitObjectLiteralExpression = function (node) {\n        if (node.values && node.names) {\n            assert(node.values.length == node.names.length);\n            for (var i = 0; i < node.values.length; i++) {\n                this.visit(node.names[i]);\n                this.visit(node.values[i]);\n            }\n        }\n    };\n    BaseVisitor.prototype.visitAssertionExpression = function (node) {\n        if (node.toType)\n            this.visit(node.toType);\n        this.visit(node.expression);\n    };\n    BaseVisitor.prototype.visitBinaryExpression = function (node) {\n        this.visit(node.left);\n        this.visit(node.right);\n    };\n    BaseVisitor.prototype.visitCallExpression = function (node) {\n        this.visit(node.expression);\n        this.visit(node.typeArguments);\n        this.visit(node.arguments);\n    };\n    BaseVisitor.prototype.visitClassExpression = function (node) {\n        this.visit(node.declaration);\n    };\n    BaseVisitor.prototype.visitCommaExpression = function (node) {\n        this.visit(node.expressions);\n    };\n    BaseVisitor.prototype.visitElementAccessExpression = function (node) {\n        this.visit(node.elementExpression);\n        this.visit(node.expression);\n    };\n    BaseVisitor.prototype.visitFunctionExpression = function (node) {\n        this.visit(node.declaration);\n    };\n    BaseVisitor.prototype.visitLiteralExpression = function (node) {\n        // node.\n    };\n    BaseVisitor.prototype.visitFloatLiteralExpression = function (node) { };\n    BaseVisitor.prototype.visitInstanceOfExpression = function (node) {\n        this.visit(node.expression);\n        this.visit(node.isType);\n    };\n    BaseVisitor.prototype.visitIntegerLiteralExpression = function (node) { };\n    BaseVisitor.prototype.visitStringLiteral = function (str, singleQuoted) { };\n    BaseVisitor.prototype.visitStringLiteralExpression = function (node) { };\n    BaseVisitor.prototype.visitRegexpLiteralExpression = function (node) { };\n    BaseVisitor.prototype.visitNewExpression = function (node) {\n        this.visit(node.expression);\n        this.visit(node.typeArguments);\n        this.visit(node.arguments);\n    };\n    BaseVisitor.prototype.visitParenthesizedExpression = function (node) {\n        this.visit(node.expression);\n    };\n    BaseVisitor.prototype.visitPropertyAccessExpression = function (node) {\n        this.visit(node.property);\n        this.visit(node.expression);\n    };\n    BaseVisitor.prototype.visitTernaryExpression = function (node) {\n        this.visit(node.condition);\n        this.visit(node.ifThen);\n        this.visit(node.ifElse);\n    };\n    BaseVisitor.prototype.visitUnaryExpression = function (node) {\n        this.visit(node.operand);\n    };\n    BaseVisitor.prototype.visitUnaryPostfixExpression = function (node) {\n        this.visit(node.operand);\n    };\n    BaseVisitor.prototype.visitUnaryPrefixExpression = function (node) {\n        this.visit(node.operand);\n    };\n    BaseVisitor.prototype.visitSuperExpression = function (node) { };\n    BaseVisitor.prototype.visitFalseExpression = function (node) { };\n    BaseVisitor.prototype.visitTrueExpression = function (node) { };\n    BaseVisitor.prototype.visitThisExpression = function (node) { };\n    BaseVisitor.prototype.visitNullExperssion = function (node) { };\n    BaseVisitor.prototype.visitConstructorExpression = function (node) { };\n    BaseVisitor.prototype.visitNodeAndTerminate = function (statement) { };\n    BaseVisitor.prototype.visitBlockStatement = function (node) {\n        this.depth++;\n        this.visit(node.statements);\n        this.depth--;\n    };\n    BaseVisitor.prototype.visitBreakStatement = function (node) {\n        if (node.label) {\n            this.visit(node.label);\n        }\n    };\n    BaseVisitor.prototype.visitContinueStatement = function (node) {\n        if (node.label) {\n            this.visit(node.label);\n        }\n    };\n    BaseVisitor.prototype.visitClassDeclaration = function (node, isDefault) {\n        this.visit(node.name);\n        this.depth++;\n        this.visit(node.decorators);\n        assert(node.isGeneric ? node.typeParameters != null : node.typeParameters == null);\n        if (node.isGeneric) {\n            this.visit(node.typeParameters);\n        }\n        if (node.extendsType) {\n            this.visit(node.extendsType);\n        }\n        this.visit(node.implementsTypes);\n        this.visit(node.members);\n        this.depth--;\n    };\n    BaseVisitor.prototype.visitDoStatement = function (node) {\n        this.visit(node.condition);\n        this.visit(node.statement);\n    };\n    BaseVisitor.prototype.visitEmptyStatement = function (node) { };\n    BaseVisitor.prototype.visitEnumDeclaration = function (node, isDefault) {\n        this.visit(node.name);\n        this.visit(node.decorators);\n        this.visit(node.values);\n    };\n    BaseVisitor.prototype.visitEnumValueDeclaration = function (node) {\n        this.visit(node.name);\n        if (node.initializer) {\n            this.visit(node.initializer);\n        }\n    };\n    BaseVisitor.prototype.visitExportImportStatement = function (node) {\n        this.visit(node.name);\n        this.visit(node.externalName);\n    };\n    BaseVisitor.prototype.visitExportMember = function (node) {\n        this.visit(node.localName);\n        this.visit(node.exportedName);\n    };\n    BaseVisitor.prototype.visitExportStatement = function (node) {\n        if (node.path) {\n            this.visit(node.path);\n        }\n        this.visit(node.members);\n    };\n    BaseVisitor.prototype.visitExportDefaultStatement = function (node) {\n        this.visit(node.declaration);\n    };\n    BaseVisitor.prototype.visitExpressionStatement = function (node) {\n        this.visit(node.expression);\n    };\n    BaseVisitor.prototype.visitFieldDeclaration = function (node) {\n        this.visit(node.name);\n        if (node.type) {\n            this.visit(node.type);\n        }\n        if (node.initializer) {\n            this.visit(node.initializer);\n        }\n        this.visit(node.decorators);\n    };\n    BaseVisitor.prototype.visitForStatement = function (node) {\n        if (node.initializer)\n            this.visit(node.initializer);\n        if (node.condition)\n            this.visit(node.condition);\n        if (node.incrementor)\n            this.visit(node.incrementor);\n        this.visit(node.statement);\n    };\n    BaseVisitor.prototype.visitFunctionDeclaration = function (node, isDefault) {\n        this.visit(node.name);\n        this.visit(node.decorators);\n        if (node.isGeneric) {\n            this.visit(node.typeParameters);\n        }\n        this.visit(node.signature);\n        this.depth++;\n        if (node.body)\n            this.visit(node.body);\n        this.depth--;\n    };\n    BaseVisitor.prototype.visitFunctionCommon = function (node) {\n        // this.visit(node.name)\n    };\n    BaseVisitor.prototype.visitIfStatement = function (node) {\n        this.visit(node.condition);\n        this.visit(node.ifTrue);\n        if (node.ifFalse)\n            this.visit(node.ifFalse);\n    };\n    BaseVisitor.prototype.visitImportDeclaration = function (node) {\n        this.visit(node.foreignName);\n        this.visit(node.name);\n        this.visit(node.decorators);\n    };\n    BaseVisitor.prototype.visitImportStatement = function (node) {\n        if (node.namespaceName)\n            this.visit(node.namespaceName);\n        this.visit(node.declarations);\n    };\n    BaseVisitor.prototype.visitIndexSignatureDeclaration = function (node) {\n        // this.visit(node.name);\n        // this.visit(node.keyType);\n        // this.visit(node.valueType);\n    };\n    BaseVisitor.prototype.visitInterfaceDeclaration = function (node, isDefault) {\n        this.visit(node.name);\n        if (node.isGeneric) {\n            this.visit(node.typeParameters);\n        }\n        this.visit(node.implementsTypes);\n        if (node.extendsType)\n            this.visit(node.extendsType);\n        this.depth++;\n        this.visit(node.members);\n        this.depth--;\n    };\n    BaseVisitor.prototype.visitMethodDeclaration = function (node) {\n        this.visit(node.name);\n        if (node.isGeneric) {\n            this.visit(node.typeParameters);\n        }\n        this.visit(node.signature);\n        this.visit(node.decorators);\n        this.depth++;\n        if (node.body)\n            this.visit(node.body);\n        this.depth--;\n    };\n    BaseVisitor.prototype.visitNamespaceDeclaration = function (node, isDefault) {\n        this.visit(node.name);\n        this.visit(node.decorators);\n        this.visit(node.members);\n    };\n    BaseVisitor.prototype.visitReturnStatement = function (node) {\n        if (node.value)\n            this.visit(node.value);\n    };\n    BaseVisitor.prototype.visitSwitchCase = function (node) {\n        if (node.label)\n            this.visit(node.label);\n        this.visit(node.statements);\n    };\n    BaseVisitor.prototype.visitSwitchStatement = function (node) {\n        this.visit(node.condition);\n        this.depth++;\n        this.visit(node.cases);\n        this.depth--;\n    };\n    BaseVisitor.prototype.visitThrowStatement = function (node) {\n        this.visit(node.value);\n    };\n    BaseVisitor.prototype.visitTryStatement = function (node) {\n        this.visit(node.statements);\n        if (node.catchVariable)\n            this.visit(node.catchVariable);\n        this.visit(node.catchStatements);\n        this.visit(node.finallyStatements);\n    };\n    BaseVisitor.prototype.visitTypeDeclaration = function (node) {\n        this.visit(node.name);\n        this.visit(node.decorators);\n        this.visit(node.type);\n        this.visit(node.typeParameters);\n    };\n    BaseVisitor.prototype.visitVariableDeclaration = function (node) {\n        this.visit(node.name);\n        if (node.type)\n            this.visit(node.type);\n        if (node.initializer)\n            this.visit(node.initializer);\n    };\n    BaseVisitor.prototype.visitVariableStatement = function (node) {\n        this.visit(node.decorators);\n        this.visit(node.declarations);\n    };\n    BaseVisitor.prototype.visitWhileStatement = function (node) {\n        this.visit(node.condition);\n        this.depth++;\n        this.visit(node.statement);\n        this.depth--;\n    };\n    BaseVisitor.prototype.visitVoidStatement = function (node) { };\n    BaseVisitor.prototype.visitComment = function (node) { };\n    BaseVisitor.prototype.visitDecoratorNode = function (node) {\n        this.visit(node.name);\n        this.visit(node.arguments);\n    };\n    BaseVisitor.prototype.visitParameter = function (node) {\n        this.visit(node.name);\n        if (node.implicitFieldDeclaration) {\n            this.visit(node.implicitFieldDeclaration);\n        }\n        if (node.initializer)\n            this.visit(node.initializer);\n        this.visit(node.type);\n    };\n    return BaseVisitor;\n}(visitor_1.AbstractVisitor));\nexports.BaseVisitor = BaseVisitor;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// tslint:disable: no-void-expression as-types as-variables\nvar ast_1 = require(\"../../src/ast\");\nvar common_1 = require(\"../../src/common\");\nvar sourceBuilder_1 = require(\"./sourceBuilder\");\nvar base_1 = require(\"./base\");\nvar preamble_1 = require(\"./preamble\");\nfunction returnsVoid(node) {\n    return toString(node.signature.returnType) === \"void\";\n}\nfunction numOfParameters(node) {\n    return node.signature.parameters.length;\n}\nfunction isComment(stmt) {\n    return stmt.kind == ast_1.NodeKind.COMMENT;\n}\nfunction hasNearDecorator(stmt) {\n    return stmt.text.includes(\"@nearfile\") || isEntry(stmt);\n}\nfunction toString(node) {\n    return sourceBuilder_1.ASTBuilder.build(node);\n}\nfunction isEntry(source) {\n    var _source = ((source.kind == ast_1.NodeKind.SOURCE) ? source : source.range.source);\n    return _source.sourceKind == ast_1.SourceKind.USER_ENTRY;\n}\nfunction isArrayType(type) {\n    return !!((type.kind == ast_1.NodeKind.NAMEDTYPE) &&\n        toString(type).startsWith(\"Array\") &&\n        type.typeArguments &&\n        type.typeArguments.length > 0);\n}\nfunction isClass(type) {\n    return type.kind == ast_1.NodeKind.CLASSDECLARATION;\n}\nfunction isField(mem) {\n    return mem.kind == ast_1.NodeKind.FIELDDECLARATION;\n}\nfunction isReference(type) {\n    var simpleTypes = [\n        \"i32\",\n        \"u32\",\n        \"bool\",\n        \"i64\",\n        \"u64\",\n        \"boolean\",\n    ];\n    return !simpleTypes.includes(toString(type));\n}\n// TODO: Extract this into separate module, preferrable pluggable\nvar NEARBindingsBuilder = /** @class */ (function (_super) {\n    __extends(NEARBindingsBuilder, _super);\n    function NEARBindingsBuilder() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.typeMapping = {\n            i32: \"Integer\",\n            u32: \"Integer\",\n            i64: \"String\",\n            u64: \"String\",\n            string: \"String\",\n            bool: \"Boolean\",\n            Uint8Array: \"String\",\n        };\n        _this.nonNullableTypes = [\"i32\", \"u32\", \"i64\", \"u64\", \"bool\", \"boolean\"];\n        _this.sb = [];\n        _this.exportedClasses = new Map();\n        _this.wrappedFuncs = new Set();\n        return _this;\n    }\n    NEARBindingsBuilder.build = function (parser, source) {\n        return (new NEARBindingsBuilder().build(source));\n    };\n    NEARBindingsBuilder.nearFiles = function (parser) {\n        return parser.program.sources.filter(hasNearDecorator);\n    };\n    NEARBindingsBuilder.prototype.visitClassDeclaration = function (node) {\n        if (this.exportedClasses.has(toString(node.name)))\n            return;\n        this.exportedClasses.set(toString(node.name), node);\n    };\n    NEARBindingsBuilder.prototype.visitFunctionDeclaration = function (node) {\n        if (!isEntry(node)\n            || this.wrappedFuncs.has(toString(node.name))\n            || !node.is(common_1.CommonFlags.EXPORT)\n            || (numOfParameters(node) == 0 && returnsVoid(node))) {\n            _super.prototype.visitFunctionDeclaration.call(this, node);\n            return;\n        }\n        // if (numOfParameters(node) > 0){\n        //   this.generateArgsParser(node);\n        // }\n        this.generateWrapperFunction(node);\n        // Change function to not be an export\n        node.flags = node.flags ^ common_1.CommonFlags.EXPORT;\n        this.wrappedFuncs.add(toString(node.name));\n    };\n    /*\n    Create a wrapper function that will be export in the function's place.\n    */\n    NEARBindingsBuilder.prototype.generateWrapperFunction = function (func) {\n        var signature = func.signature;\n        var params = signature.parameters;\n        var returnType = signature.returnType;\n        var returnTypeName = toString(returnType).split(\"|\").filter(function (name) { return name.trim() !== \"null\"; }).join(\"|\");\n        var hasNull = toString(returnType).includes(\"null\");\n        var name = func.name.symbol;\n        this.sb.push(\"\\n//@ts-ignore\\nfunction __wrapper_\" + name + \"(): void {\");\n        if (params.length > 0) {\n            this.sb.push(\"  // Reading input bytes.\\n  input(0);\\n  let json_len = register_len(0);\\n  if (json_len == U32.MAX_VALUE) {\\n    panic();\\n  }\\n  let json = new Uint8Array(json_len as u32);\\n  read_register(0, <usize>json.buffer);\\n  const obj: Obj = JSON.parse(json);\");\n        }\n        if (toString(returnType) !== \"void\") {\n            this.sb.push(\"  let result: \" + toString(returnType) + \" = \" + name + \"(\");\n        }\n        else {\n            this.sb.push(\"  \" + name + \"(\");\n        }\n        if (params.length > 0) {\n            this.sb[this.sb.length - 1] += (params\n                .map(function (param) { return createDecodeStatement(param); })\n                .join(\", \"));\n        }\n        this.sb[this.sb.length - 1] += \");\";\n        if (toString(returnType) !== \"void\") {\n            this.sb.push(\"\\n  let encoder = new JSONEncoder();\\n  let val: Uint8Array;\\n  if ((isString<\" + returnTypeName + \">() || isNullable<\" + returnTypeName + \">()) && result == null) {\\n    encoder.setNull(null);\\n    val = encoder.serialize();\\n  } else {\\n    val = encode<\" + returnTypeName + \">(result\" + (hasNull ? \"!\" : \"\") + \", null, encoder);\\n  }\\n  value_return(val.byteLength, <usize>val.buffer);\");\n        }\n        this.sb.push(\"}\\n\\nexport { __wrapper_\" + name + \" as \" + name + \" }\\n\");\n    };\n    NEARBindingsBuilder.prototype.typeName = function (type) {\n        if (!isClass(type)) {\n            return sourceBuilder_1.ASTBuilder.build(type);\n        }\n        type = (type);\n        var className = toString(type.name);\n        if (type.isGeneric) {\n            className += \"<\" + type.typeParameters.map(toString).join(\", \") + \">\";\n        }\n        return className;\n    };\n    NEARBindingsBuilder.prototype.build = function (source) {\n        var _this = this;\n        this.sb = [preamble_1.preamble];\n        this.visit(source);\n        var sourceText = source.statements.map(function (stmt) {\n            var str = sourceBuilder_1.ASTBuilder.build(stmt);\n            if (isClass(stmt)) {\n                var _class = stmt;\n                str = str.slice(0, str.lastIndexOf(\"}\"));\n                var fields = _class.members.filter(isField).map(function (field) { return field; });\n                if (fields.some(function (field) { return field.type == null; })) {\n                    throw new Error(\"All Fields must have explict type declaration.\");\n                }\n                var className = _this.typeName(_class);\n                str += \"\\n  static decode(json: Uint8Array): \" + className + \" {\\n    let value = instantiate<\" + className + \">(); // Allocate without constructor\\n    return value.decode<Uint8Array>(json);\\n  }\\n\\n  decode<V = Uint8Array>(buf: V): \" + className + \" {\\n    let json: Obj;\\n    if (buf instanceof Uint8Array) {\\n      json = JSON.parse(buf);\\n    }else {\\n      assert(buf instanceof Obj, \\\"argument must be Uint8Array or Json Object\\\");\\n      json = <Obj> buf;\\n    }\\n    return this._decode(json);\\n  }\\n\\n  private _decode(obj: Obj): \" + className + \" {\\n    \" + createDecodeStatements(_class).join(\"\\n    \") + \"\\n    return this;\\n  }\\n\\n  _encode(name: string | null = \\\"\\\", _encoder: JSONEncoder | null = null): JSONEncoder {\\n    let encoder = (_encoder != null ? _encoder : new JSONEncoder())!;\\n    encoder.pushObject(name);\\n    \" + createEncodeStatements(_class).join(\"\\n    \") + \"\\n    encoder.popObject();\\n    return encoder;\\n  }\\n\\n  encode(): Uint8Array {\\n    return this._encode().serialize();\\n  }\\n\\n  serialize(): Uint8Array {\\n    return this.encode();\\n  }\\n\\n  toJSON(): string {\\n    return this._encode().toString();\\n  }\\n}\";\n            }\n            return str;\n        });\n        return this.sb.concat(sourceText).join(\"\\n\");\n    };\n    return NEARBindingsBuilder;\n}(base_1.BaseVisitor));\nfunction createDecodeStatements(_class) {\n    return _class.members.filter(isField).map(function (field) {\n        var name = toString(field.name);\n        return createDecodeStatement(field, \"this.\" + name + \" = obj.has(\\\"\" + name + \"\\\") ? \") + (\": this.\" + name + \";\");\n    });\n}\nfunction createDecodeStatement(field, setterPrefix) {\n    if (setterPrefix === void 0) { setterPrefix = \"\"; }\n    var T = toString(field.type);\n    var name = toString(field.name);\n    return setterPrefix + \"decode<\" + T + \", Obj>(obj, \\\"\" + name + \"\\\")\";\n}\nfunction createEncodeStatements(_class) {\n    return _class.members.filter(isField).map(function (field) {\n        var T = toString(field.type);\n        var name = toString(field.name);\n        return \"encode<\" + T + \", JSONEncoder>(this.\" + name + \", \\\"\" + name + \"\\\", encoder);\";\n    });\n}\n// TODO: Make work for non-simple generics e.g. field: Array<T>\nfunction isGeneric(_class, field) {\n    if (_class.typeParameters == null) {\n        return false;\n    }\n    return _class.typeParameters.some(function (param) { return toString(param.name) == toString(field.type); });\n}\nfunction afterParse(parser, writeFile, baseDir) {\n    var files = NEARBindingsBuilder.nearFiles(parser);\n    files.forEach(function (source) {\n        var writeOut = source.text.substr(0, source.text.indexOf(\"\\n\")).includes(\"out\");\n        // Remove from logs in parser\n        parser.donelog.delete(source.internalPath);\n        parser.seenlog.delete(source.internalPath);\n        // Remove from programs sources\n        parser.program.sources = parser.program.sources.filter(function (_source) { return _source !== source; });\n        // Build new Source\n        var sourceText = NEARBindingsBuilder.build(parser, source);\n        if (writeOut) {\n            writeFile(\"out/\" + source.normalizedPath, sourceText, baseDir);\n        }\n        // Parses file and any new imports added to the source\n        parser.parseFile(sourceText, (isEntry(source) ? \"\" : \"./\") + source.normalizedPath, isEntry(source));\n    });\n}\nexports.afterParse = afterParse;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.preamble = \"import { base64 } from \\\"near-runtime-ts\\\";\\nimport { JSONEncoder } from \\\"assemblyscript-json\\\";\\nimport { JSONDecoder, ThrowingJSONHandler, DecoderState } from \\\"assemblyscript-json\\\";\\n\";\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlYW1ibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJlYW1ibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDYSxRQUFBLFFBQVEsR0FBRyw4TEFHdkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGNvbnN0IHByZWFtYmxlID0gYGltcG9ydCB7IGJhc2U2NCB9IGZyb20gXCJuZWFyLXJ1bnRpbWUtdHNcIjtcbmltcG9ydCB7IEpTT05FbmNvZGVyIH0gZnJvbSBcImFzc2VtYmx5c2NyaXB0LWpzb25cIjtcbmltcG9ydCB7IEpTT05EZWNvZGVyLCBUaHJvd2luZ0pTT05IYW5kbGVyLCBEZWNvZGVyU3RhdGUgfSBmcm9tIFwiYXNzZW1ibHlzY3JpcHQtanNvblwiO1xuYDtcbiJdfQ==","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ast_1 = require(\"../../src/ast\");\n//@ts-ignore\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n//Define floating points\n//@ts-ignore\nObject.defineProperties(\n//@ts-ignore\nglobalScope[\"f32\"] = function f32(value) { return Math.fround(value); }, {\n    \"EPSILON\": { value: Math.fround(1.1920929e-07), writable: false },\n    \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n    \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n    \"MIN_NORMAL_VALUE\": { value: Math.fround(1.17549435e-38), writable: false },\n    \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n    \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false }\n});\n//@ts-ignore\nObject.defineProperties(\n//@ts-ignore\nglobalScope[\"f64\"] = function f64(value) { return +value; }, {\n    \"EPSILON\": { value: 2.2204460492503131e-16, writable: false },\n    \"MIN_VALUE\": { value: 5e-324, writable: false },\n    \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n    \"MIN_NORMAL_VALUE\": { value: 2.2250738585072014e-308, writable: false },\n    \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n    \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false }\n});\nrequire(\"../../src/glue/js/float\");\nrequire(\"../../src/glue/js/i64\");\nvar common_1 = require(\"../../src/common\");\nvar index_1 = require(\"../../src/util/index\");\nvar tokenizer_1 = require(\"../../src/tokenizer\");\n/** An AST builder. */\nvar ASTBuilder = /** @class */ (function () {\n    function ASTBuilder() {\n        this.sb = [];\n        this.indentLevel = 0;\n    }\n    /** Rebuilds the textual source from the specified AST, as far as possible. */\n    ASTBuilder.build = function (node) {\n        var builder = new ASTBuilder();\n        builder.visitNode(node);\n        return builder.finish();\n    };\n    ASTBuilder.prototype.visitNode = function (node) {\n        switch (node.kind) {\n            case ast_1.NodeKind.SOURCE: {\n                this.visitSource(node);\n                break;\n            }\n            // types\n            case ast_1.NodeKind.NAMEDTYPE: {\n                this.visitNamedTypeNode(node);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONTYPE: {\n                this.visitFunctionTypeNode(node);\n                break;\n            }\n            case ast_1.NodeKind.TYPEPARAMETER: {\n                this.visitTypeParameter(node);\n                break;\n            }\n            // expressions\n            case ast_1.NodeKind.FALSE:\n            case ast_1.NodeKind.NULL:\n            case ast_1.NodeKind.SUPER:\n            case ast_1.NodeKind.THIS:\n            case ast_1.NodeKind.TRUE:\n            case ast_1.NodeKind.CONSTRUCTOR:\n            case ast_1.NodeKind.IDENTIFIER: {\n                this.visitIdentifierExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.ASSERTION: {\n                this.visitAssertionExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.BINARY: {\n                this.visitBinaryExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.CALL: {\n                this.visitCallExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.CLASS: {\n                this.visitClassExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.COMMA: {\n                this.visitCommaExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.ELEMENTACCESS: {\n                this.visitElementAccessExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTION: {\n                this.visitFunctionExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.INSTANCEOF: {\n                this.visitInstanceOfExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.LITERAL: {\n                this.visitLiteralExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.NEW: {\n                this.visitNewExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.PARENTHESIZED: {\n                this.visitParenthesizedExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.PROPERTYACCESS: {\n                this.visitPropertyAccessExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.TERNARY: {\n                this.visitTernaryExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.UNARYPOSTFIX: {\n                this.visitUnaryPostfixExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.UNARYPREFIX: {\n                this.visitUnaryPrefixExpression(node);\n                break;\n            }\n            // statements\n            case ast_1.NodeKind.BLOCK: {\n                this.visitBlockStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.BREAK: {\n                this.visitBreakStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.CONTINUE: {\n                this.visitContinueStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.DO: {\n                this.visitDoStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EMPTY: {\n                this.visitEmptyStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORT: {\n                this.visitExportStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORTDEFAULT: {\n                this.visitExportDefaultStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORTIMPORT: {\n                this.visitExportImportStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPRESSION: {\n                this.visitExpressionStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.FOR: {\n                this.visitForStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.IF: {\n                this.visitIfStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.IMPORT: {\n                this.visitImportStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.RETURN: {\n                this.visitReturnStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.SWITCH: {\n                this.visitSwitchStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.THROW: {\n                this.visitThrowStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.TRY: {\n                this.visitTryStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.VARIABLE: {\n                this.visitVariableStatement(node);\n                break;\n            }\n            case ast_1.NodeKind.WHILE: {\n                this.visitWhileStatement(node);\n                break;\n            }\n            // declaration statements\n            case ast_1.NodeKind.CLASSDECLARATION: {\n                this.visitClassDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.ENUMDECLARATION: {\n                this.visitEnumDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.ENUMVALUEDECLARATION: {\n                this.visitEnumValueDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.FIELDDECLARATION: {\n                this.visitFieldDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONDECLARATION: {\n                this.visitFunctionDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.IMPORTDECLARATION: {\n                this.visitImportDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.INDEXSIGNATUREDECLARATION: {\n                this.visitIndexSignatureDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.INTERFACEDECLARATION: {\n                this.visitInterfaceDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.METHODDECLARATION: {\n                this.visitMethodDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.NAMESPACEDECLARATION: {\n                this.visitNamespaceDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.TYPEDECLARATION: {\n                this.visitTypeDeclaration(node);\n                break;\n            }\n            case ast_1.NodeKind.VARIABLEDECLARATION: {\n                this.visitVariableDeclaration(node);\n                break;\n            }\n            // other\n            case ast_1.NodeKind.DECORATOR: {\n                this.serializeDecorator(node);\n                break;\n            }\n            case ast_1.NodeKind.EXPORTMEMBER: {\n                this.visitExportMember(node);\n                break;\n            }\n            case ast_1.NodeKind.PARAMETER: {\n                this.serializeParameter(node);\n                break;\n            }\n            case ast_1.NodeKind.SWITCHCASE: {\n                this.visitSwitchCase(node);\n                break;\n            }\n            default: assert(false);\n        }\n    };\n    ASTBuilder.prototype.visitSource = function (source) {\n        var statements = source.statements;\n        for (var i = 0, k = statements.length; i < k; ++i) {\n            this.visitNodeAndTerminate(statements[i]);\n        }\n    };\n    // types\n    ASTBuilder.prototype.visitTypeNode = function (node) {\n        switch (node.kind) {\n            case ast_1.NodeKind.NAMEDTYPE: {\n                this.visitNamedTypeNode(node);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONTYPE: {\n                this.visitFunctionTypeNode(node);\n                break;\n            }\n            default: assert(false);\n        }\n    };\n    ASTBuilder.prototype.visitTypeName = function (node) {\n        this.visitIdentifierExpression(node.identifier);\n        var sb = this.sb;\n        var current = node.next;\n        while (current) {\n            sb.push(\".\");\n            this.visitIdentifierExpression(current.identifier);\n            current = current.next;\n        }\n    };\n    ASTBuilder.prototype.visitNamedTypeNode = function (node) {\n        this.visitTypeName(node.name);\n        var typeArguments = node.typeArguments;\n        if (typeArguments) {\n            var numTypeArguments = typeArguments.length;\n            var sb = this.sb;\n            if (numTypeArguments) {\n                sb.push(\"<\");\n                this.visitTypeNode(typeArguments[0]);\n                for (var i = 1; i < numTypeArguments; ++i) {\n                    sb.push(\", \");\n                    this.visitTypeNode(typeArguments[i]);\n                }\n                sb.push(\">\");\n            }\n            if (node.isNullable)\n                sb.push(\" | null\");\n        }\n    };\n    ASTBuilder.prototype.visitFunctionTypeNode = function (node) {\n        var isNullable = node.isNullable;\n        var sb = this.sb;\n        sb.push(isNullable ? \"((\" : \"(\");\n        var explicitThisType = node.explicitThisType;\n        if (explicitThisType) {\n            sb.push(\"this: \");\n            this.visitTypeNode(explicitThisType);\n        }\n        var parameters = node.parameters;\n        var numParameters = parameters.length;\n        if (numParameters) {\n            if (explicitThisType)\n                sb.push(\", \");\n            this.serializeParameter(parameters[0]);\n            for (var i = 1; i < numParameters; ++i) {\n                sb.push(\", \");\n                this.serializeParameter(parameters[i]);\n            }\n        }\n        var returnType = node.returnType;\n        if (returnType) {\n            sb.push(\") => \");\n            this.visitTypeNode(returnType);\n        }\n        else {\n            sb.push(\") => void\");\n        }\n        if (isNullable)\n            sb.push(\") | null\");\n    };\n    ASTBuilder.prototype.visitTypeParameter = function (node) {\n        this.visitIdentifierExpression(node.name);\n        var extendsType = node.extendsType;\n        if (extendsType) {\n            this.sb.push(\" extends \");\n            this.visitTypeNode(extendsType);\n        }\n        var defaultType = node.defaultType;\n        if (defaultType) {\n            this.sb.push(\"=\");\n            this.visitTypeNode(defaultType);\n        }\n    };\n    // expressions\n    ASTBuilder.prototype.visitIdentifierExpression = function (node) {\n        if (node.isQuoted)\n            this.visitStringLiteral(node.text);\n        else\n            this.sb.push(node.text);\n    };\n    ASTBuilder.prototype.visitArrayLiteralExpression = function (node) {\n        var sb = this.sb;\n        sb.push(\"[\");\n        var elements = node.elementExpressions;\n        var numElements = elements.length;\n        if (numElements) {\n            if (elements[0])\n                this.visitNode(elements[0]);\n            for (var i = 1; i < numElements; ++i) {\n                sb.push(\", \");\n                if (elements[i])\n                    this.visitNode(elements[i]);\n            }\n        }\n        sb.push(\"]\");\n    };\n    ASTBuilder.prototype.visitObjectLiteralExpression = function (node) {\n        var sb = this.sb;\n        var names = node.names;\n        var values = node.values;\n        var numElements = names.length;\n        assert(numElements == values.length);\n        if (numElements) {\n            sb.push(\"{\\n\");\n            index_1.indent(sb, ++this.indentLevel);\n            this.visitNode(names[0]);\n            sb.push(\": \");\n            this.visitNode(values[0]);\n            for (var i = 1; i < numElements; ++i) {\n                sb.push(\",\\n\");\n                index_1.indent(sb, this.indentLevel);\n                var name = names[i];\n                var value = values[i];\n                if (name === value) {\n                    this.visitNode(name);\n                }\n                else {\n                    this.visitNode(name);\n                    sb.push(\": \");\n                    this.visitNode(value);\n                }\n            }\n            sb.push(\"\\n\");\n            index_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\");\n        }\n        else {\n            sb.push(\"{}\");\n        }\n    };\n    ASTBuilder.prototype.visitAssertionExpression = function (node) {\n        var sb = this.sb;\n        switch (node.assertionKind) {\n            case ast_1.AssertionKind.PREFIX: {\n                sb.push(\"<\");\n                this.visitTypeNode(assert(node.toType));\n                sb.push(\">\");\n                this.visitNode(node.expression);\n                break;\n            }\n            case ast_1.AssertionKind.AS: {\n                this.visitNode(node.expression);\n                sb.push(\" as \");\n                this.visitTypeNode(assert(node.toType));\n                break;\n            }\n            case ast_1.AssertionKind.NONNULL: {\n                this.visitNode(node.expression);\n                sb.push(\"!\");\n                break;\n            }\n            default: assert(false);\n        }\n    };\n    ASTBuilder.prototype.visitBinaryExpression = function (node) {\n        var sb = this.sb;\n        this.visitNode(node.left);\n        sb.push(\" \");\n        sb.push(tokenizer_1.operatorTokenToString(node.operator));\n        sb.push(\" \");\n        this.visitNode(node.right);\n    };\n    ASTBuilder.prototype.visitCallExpression = function (node) {\n        var sb = this.sb;\n        this.visitNode(node.expression);\n        var typeArguments = node.typeArguments;\n        if (typeArguments) {\n            var numTypeArguments = typeArguments.length;\n            if (numTypeArguments) {\n                sb.push(\"<\");\n                this.visitTypeNode(typeArguments[0]);\n                for (var i = 1; i < numTypeArguments; ++i) {\n                    sb.push(\", \");\n                    this.visitTypeNode(typeArguments[i]);\n                }\n                sb.push(\">(\");\n            }\n        }\n        else {\n            sb.push(\"(\");\n        }\n        var args = node.arguments;\n        var numArgs = args.length;\n        if (numArgs) {\n            this.visitNode(args[0]);\n            for (var i = 1; i < numArgs; ++i) {\n                sb.push(\", \");\n                this.visitNode(args[i]);\n            }\n        }\n        sb.push(\")\");\n    };\n    ASTBuilder.prototype.visitClassExpression = function (node) {\n        var declaration = node.declaration;\n        this.visitClassDeclaration(declaration);\n    };\n    ASTBuilder.prototype.visitCommaExpression = function (node) {\n        var expressions = node.expressions;\n        var numExpressions = assert(expressions.length);\n        this.visitNode(expressions[0]);\n        var sb = this.sb;\n        for (var i = 1; i < numExpressions; ++i) {\n            sb.push(\",\");\n            this.visitNode(expressions[i]);\n        }\n    };\n    ASTBuilder.prototype.visitElementAccessExpression = function (node) {\n        var sb = this.sb;\n        this.visitNode(node.expression);\n        sb.push(\"[\");\n        this.visitNode(node.elementExpression);\n        sb.push(\"]\");\n    };\n    ASTBuilder.prototype.visitFunctionExpression = function (node) {\n        var declaration = node.declaration;\n        if (!declaration.arrowKind) {\n            if (declaration.name.text.length) {\n                this.sb.push(\"function \");\n            }\n            else {\n                this.sb.push(\"function\");\n            }\n        }\n        else {\n            assert(declaration.name.text.length == 0);\n        }\n        this.visitFunctionCommon(declaration);\n    };\n    ASTBuilder.prototype.visitLiteralExpression = function (node) {\n        switch (node.literalKind) {\n            case ast_1.LiteralKind.FLOAT: {\n                this.visitFloatLiteralExpression(node);\n                break;\n            }\n            case ast_1.LiteralKind.INTEGER: {\n                this.visitIntegerLiteralExpression(node);\n                break;\n            }\n            case ast_1.LiteralKind.STRING: {\n                this.visitStringLiteralExpression(node);\n                break;\n            }\n            case ast_1.LiteralKind.REGEXP: {\n                this.visitRegexpLiteralExpression(node);\n                break;\n            }\n            case ast_1.LiteralKind.ARRAY: {\n                this.visitArrayLiteralExpression(node);\n                break;\n            }\n            case ast_1.LiteralKind.OBJECT: {\n                this.visitObjectLiteralExpression(node);\n                break;\n            }\n            default: {\n                assert(false);\n                break;\n            }\n        }\n    };\n    ASTBuilder.prototype.visitFloatLiteralExpression = function (node) {\n        this.sb.push(node.value.toString(10));\n    };\n    ASTBuilder.prototype.visitInstanceOfExpression = function (node) {\n        this.visitNode(node.expression);\n        this.sb.push(\" instanceof \");\n        this.visitTypeNode(node.isType);\n    };\n    ASTBuilder.prototype.visitIntegerLiteralExpression = function (node) {\n        this.sb.push(i64_to_string(node.value));\n    };\n    ASTBuilder.prototype.visitStringLiteral = function (str, singleQuoted) {\n        if (singleQuoted === void 0) { singleQuoted = false; }\n        var sb = this.sb;\n        var off = 0;\n        var quote = singleQuoted ? \"'\" : \"\\\"\";\n        sb.push(quote);\n        var i = 0;\n        for (var k = str.length; i < k;) {\n            switch (str.charCodeAt(i)) {\n                case 0 /* NULL */: {\n                    if (i > off)\n                        sb.push(str.substring(off, off = i + 1));\n                    sb.push(\"\\\\0\");\n                    off = ++i;\n                    break;\n                }\n                case 8 /* BACKSPACE */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    off = ++i;\n                    sb.push(\"\\\\b\");\n                    break;\n                }\n                case 9 /* TAB */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    off = ++i;\n                    sb.push(\"\\\\t\");\n                    break;\n                }\n                case 10 /* LINEFEED */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    off = ++i;\n                    sb.push(\"\\\\n\");\n                    break;\n                }\n                case 11 /* VERTICALTAB */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    off = ++i;\n                    sb.push(\"\\\\v\");\n                    break;\n                }\n                case 12 /* FORMFEED */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    off = ++i;\n                    sb.push(\"\\\\f\");\n                    break;\n                }\n                case 13 /* CARRIAGERETURN */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    sb.push(\"\\\\r\");\n                    off = ++i;\n                    break;\n                }\n                case 34 /* DOUBLEQUOTE */: {\n                    if (!singleQuoted) {\n                        if (i > off)\n                            sb.push(str.substring(off, i));\n                        sb.push(\"\\\\\\\"\");\n                        off = ++i;\n                    }\n                    else {\n                        ++i;\n                    }\n                    break;\n                }\n                case 39 /* SINGLEQUOTE */: {\n                    if (singleQuoted) {\n                        if (i > off)\n                            sb.push(str.substring(off, i));\n                        sb.push(\"\\\\'\");\n                        off = ++i;\n                    }\n                    else {\n                        ++i;\n                    }\n                    break;\n                }\n                case 92 /* BACKSLASH */: {\n                    if (i > off)\n                        sb.push(str.substring(off, i));\n                    sb.push(\"\\\\\\\\\");\n                    off = ++i;\n                    break;\n                }\n                default: {\n                    ++i;\n                    break;\n                }\n            }\n        }\n        if (i > off)\n            sb.push(str.substring(off, i));\n        sb.push(quote);\n    };\n    ASTBuilder.prototype.visitStringLiteralExpression = function (node) {\n        this.visitStringLiteral(node.value);\n    };\n    ASTBuilder.prototype.visitRegexpLiteralExpression = function (node) {\n        var sb = this.sb;\n        sb.push(\"/\");\n        sb.push(node.pattern);\n        sb.push(\"/\");\n        sb.push(node.patternFlags);\n    };\n    ASTBuilder.prototype.visitNewExpression = function (node) {\n        this.sb.push(\"new \");\n        this.visitCallExpression(node);\n    };\n    ASTBuilder.prototype.visitParenthesizedExpression = function (node) {\n        var sb = this.sb;\n        sb.push(\"(\");\n        this.visitNode(node.expression);\n        sb.push(\")\");\n    };\n    ASTBuilder.prototype.visitPropertyAccessExpression = function (node) {\n        this.visitNode(node.expression);\n        this.sb.push(\".\");\n        this.visitIdentifierExpression(node.property);\n    };\n    ASTBuilder.prototype.visitTernaryExpression = function (node) {\n        var sb = this.sb;\n        this.visitNode(node.condition);\n        sb.push(\" ? \");\n        this.visitNode(node.ifThen);\n        sb.push(\" : \");\n        this.visitNode(node.ifElse);\n    };\n    ASTBuilder.prototype.visitUnaryExpression = function (node) {\n        switch (node.kind) {\n            case ast_1.NodeKind.UNARYPOSTFIX: {\n                this.visitUnaryPostfixExpression(node);\n                break;\n            }\n            case ast_1.NodeKind.UNARYPREFIX: {\n                this.visitUnaryPrefixExpression(node);\n                break;\n            }\n            default: assert(false);\n        }\n    };\n    ASTBuilder.prototype.visitUnaryPostfixExpression = function (node) {\n        this.visitNode(node.operand);\n        this.sb.push(tokenizer_1.operatorTokenToString(node.operator));\n    };\n    ASTBuilder.prototype.visitUnaryPrefixExpression = function (node) {\n        this.sb.push(tokenizer_1.operatorTokenToString(node.operator));\n        this.visitNode(node.operand);\n    };\n    // statements\n    ASTBuilder.prototype.visitNodeAndTerminate = function (statement) {\n        this.visitNode(statement);\n        var sb = this.sb;\n        if (!sb.length || // leading EmptyStatement\n            statement.kind == ast_1.NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n            statement.kind == ast_1.NodeKind.EXPRESSION // potentially assigns a FunctionExpression\n        ) {\n            sb.push(\";\\n\");\n        }\n        else {\n            var last = sb[sb.length - 1];\n            var lastCharPos = last.length - 1;\n            if (lastCharPos >= 0 && (last.charCodeAt(lastCharPos) == 125 /* CLOSEBRACE */ ||\n                last.charCodeAt(lastCharPos) == 59 /* SEMICOLON */)) {\n                sb.push(\"\\n\");\n            }\n            else {\n                sb.push(\";\\n\");\n            }\n        }\n    };\n    ASTBuilder.prototype.visitBlockStatement = function (node) {\n        var sb = this.sb;\n        var statements = node.statements;\n        var numStatements = statements.length;\n        if (numStatements) {\n            sb.push(\"{\\n\");\n            var indentLevel = ++this.indentLevel;\n            for (var i = 0; i < numStatements; ++i) {\n                index_1.indent(sb, indentLevel);\n                this.visitNodeAndTerminate(statements[i]);\n            }\n            index_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\");\n        }\n        else {\n            sb.push(\"{}\");\n        }\n    };\n    ASTBuilder.prototype.visitBreakStatement = function (node) {\n        var label = node.label;\n        if (label) {\n            this.sb.push(\"break \");\n            this.visitIdentifierExpression(label);\n        }\n        else {\n            this.sb.push(\"break\");\n        }\n    };\n    ASTBuilder.prototype.visitContinueStatement = function (node) {\n        var label = node.label;\n        if (label) {\n            this.sb.push(\"continue \");\n            this.visitIdentifierExpression(label);\n        }\n        else {\n            this.sb.push(\"continue\");\n        }\n    };\n    ASTBuilder.prototype.visitClassDeclaration = function (node, isDefault) {\n        if (isDefault === void 0) { isDefault = false; }\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        var sb = this.sb;\n        if (isDefault) {\n            sb.push(\"export default \");\n        }\n        else {\n            this.serializeExternalModifiers(node);\n        }\n        if (node.is(common_1.CommonFlags.ABSTRACT))\n            sb.push(\"abstract \");\n        if (node.name.text.length) {\n            sb.push(\"class \");\n            this.visitIdentifierExpression(node.name);\n        }\n        else {\n            sb.push(\"class\");\n        }\n        var typeParameters = node.typeParameters;\n        if (typeParameters && typeParameters.length) {\n            sb.push(\"<\");\n            this.visitTypeParameter(typeParameters[0]);\n            for (var i = 1, k = typeParameters.length; i < k; ++i) {\n                sb.push(\", \");\n                this.visitTypeParameter(typeParameters[i]);\n            }\n            sb.push(\">\");\n        }\n        var extendsType = node.extendsType;\n        if (extendsType) {\n            sb.push(\" extends \");\n            this.visitTypeNode(extendsType);\n        }\n        var implementsTypes = node.implementsTypes;\n        if (implementsTypes) {\n            var numImplementsTypes = implementsTypes.length;\n            if (numImplementsTypes) {\n                sb.push(\" implements \");\n                this.visitTypeNode(implementsTypes[0]);\n                for (var i = 1; i < numImplementsTypes; ++i) {\n                    sb.push(\", \");\n                    this.visitTypeNode(implementsTypes[i]);\n                }\n            }\n        }\n        var members = node.members;\n        var numMembers = members.length;\n        if (numMembers) {\n            sb.push(\" {\\n\");\n            var indentLevel = ++this.indentLevel;\n            for (var i = 0, k = members.length; i < k; ++i) {\n                var member = members[i];\n                if (member.kind != ast_1.NodeKind.FIELDDECLARATION || member.parameterIndex < 0) {\n                    index_1.indent(sb, indentLevel);\n                    this.visitNodeAndTerminate(member);\n                }\n            }\n            index_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\");\n        }\n        else {\n            sb.push(\" {}\");\n        }\n    };\n    ASTBuilder.prototype.visitDoStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"do \");\n        this.visitNode(node.statement);\n        if (node.statement.kind == ast_1.NodeKind.BLOCK) {\n            sb.push(\" while (\");\n        }\n        else {\n            sb.push(\";\\n\");\n            index_1.indent(sb, this.indentLevel);\n            sb.push(\"while (\");\n        }\n        this.visitNode(node.condition);\n        sb.push(\")\");\n    };\n    ASTBuilder.prototype.visitEmptyStatement = function (node) {\n    };\n    ASTBuilder.prototype.visitEnumDeclaration = function (node, isDefault) {\n        if (isDefault === void 0) { isDefault = false; }\n        var sb = this.sb;\n        if (isDefault) {\n            sb.push(\"export default \");\n        }\n        else {\n            this.serializeExternalModifiers(node);\n        }\n        if (node.is(common_1.CommonFlags.CONST))\n            sb.push(\"const \");\n        sb.push(\"enum \");\n        this.visitIdentifierExpression(node.name);\n        var values = node.values;\n        var numValues = values.length;\n        if (numValues) {\n            sb.push(\" {\\n\");\n            var indentLevel = ++this.indentLevel;\n            index_1.indent(sb, indentLevel);\n            this.visitEnumValueDeclaration(node.values[0]);\n            for (var i = 1; i < numValues; ++i) {\n                sb.push(\",\\n\");\n                index_1.indent(sb, indentLevel);\n                this.visitEnumValueDeclaration(node.values[i]);\n            }\n            sb.push(\"\\n\");\n            index_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\");\n        }\n        else {\n            sb.push(\" {}\");\n        }\n    };\n    ASTBuilder.prototype.visitEnumValueDeclaration = function (node) {\n        this.visitIdentifierExpression(node.name);\n        if (node.value) {\n            this.sb.push(\" = \");\n            this.visitNode(node.value);\n        }\n    };\n    ASTBuilder.prototype.visitExportImportStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"export import \");\n        this.visitIdentifierExpression(node.externalName);\n        sb.push(\" = \");\n        this.visitIdentifierExpression(node.name);\n    };\n    ASTBuilder.prototype.visitExportMember = function (node) {\n        this.visitIdentifierExpression(node.localName);\n        if (node.exportedName.text != node.localName.text) {\n            this.sb.push(\" as \");\n            this.visitIdentifierExpression(node.exportedName);\n        }\n    };\n    ASTBuilder.prototype.visitExportStatement = function (node) {\n        var sb = this.sb;\n        if (node.isDeclare) {\n            sb.push(\"declare \");\n        }\n        var members = node.members;\n        if (members && members.length) {\n            var numMembers = members.length;\n            sb.push(\"export {\\n\");\n            var indentLevel = ++this.indentLevel;\n            index_1.indent(sb, indentLevel);\n            this.visitExportMember(members[0]);\n            for (var i = 1; i < numMembers; ++i) {\n                sb.push(\",\\n\");\n                index_1.indent(sb, indentLevel);\n                this.visitExportMember(members[i]);\n            }\n            --this.indentLevel;\n            sb.push(\"\\n}\");\n        }\n        else {\n            sb.push(\"export {}\");\n        }\n        var path = node.path;\n        if (path) {\n            sb.push(\" from \");\n            this.visitStringLiteralExpression(path);\n        }\n        sb.push(\";\");\n    };\n    ASTBuilder.prototype.visitExportDefaultStatement = function (node) {\n        var declaration = node.declaration;\n        switch (declaration.kind) {\n            case ast_1.NodeKind.ENUMDECLARATION: {\n                this.visitEnumDeclaration(declaration, true);\n                break;\n            }\n            case ast_1.NodeKind.FUNCTIONDECLARATION: {\n                this.visitFunctionDeclaration(declaration, true);\n                break;\n            }\n            case ast_1.NodeKind.CLASSDECLARATION: {\n                this.visitClassDeclaration(declaration, true);\n                break;\n            }\n            case ast_1.NodeKind.INTERFACEDECLARATION: {\n                this.visitInterfaceDeclaration(declaration, true);\n                break;\n            }\n            case ast_1.NodeKind.NAMESPACEDECLARATION: {\n                this.visitNamespaceDeclaration(declaration, true);\n                break;\n            }\n            default: assert(false);\n        }\n    };\n    ASTBuilder.prototype.visitExpressionStatement = function (node) {\n        this.visitNode(node.expression);\n    };\n    ASTBuilder.prototype.visitFieldDeclaration = function (node) {\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        this.serializeAccessModifiers(node);\n        this.visitIdentifierExpression(node.name);\n        var sb = this.sb;\n        if (node.flags & common_1.CommonFlags.DEFINITE_ASSIGNMENT) {\n            sb.push(\"!\");\n        }\n        var type = node.type;\n        if (type) {\n            sb.push(\": \");\n            this.visitTypeNode(type);\n        }\n        var initializer = node.initializer;\n        if (initializer) {\n            sb.push(\" = \");\n            this.visitNode(initializer);\n        }\n    };\n    ASTBuilder.prototype.visitForStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"for (\");\n        var initializer = node.initializer;\n        if (initializer) {\n            this.visitNode(initializer);\n        }\n        var condition = node.condition;\n        if (condition) {\n            sb.push(\"; \");\n            this.visitNode(condition);\n        }\n        else {\n            sb.push(\";\");\n        }\n        var incrementor = node.incrementor;\n        if (incrementor) {\n            sb.push(\"; \");\n            this.visitNode(incrementor);\n        }\n        else {\n            sb.push(\";\");\n        }\n        sb.push(\") \");\n        this.visitNode(node.statement);\n    };\n    ASTBuilder.prototype.visitFunctionDeclaration = function (node, isDefault) {\n        if (isDefault === void 0) { isDefault = false; }\n        var sb = this.sb;\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        if (isDefault) {\n            sb.push(\"export default \");\n        }\n        else {\n            this.serializeExternalModifiers(node);\n            this.serializeAccessModifiers(node);\n        }\n        if (node.name.text.length) {\n            sb.push(\"function \");\n        }\n        else {\n            sb.push(\"function\");\n        }\n        this.visitFunctionCommon(node);\n    };\n    ASTBuilder.prototype.visitFunctionCommon = function (node) {\n        var sb = this.sb;\n        this.visitIdentifierExpression(node.name);\n        var signature = node.signature;\n        var typeParameters = node.typeParameters;\n        if (typeParameters) {\n            var numTypeParameters = typeParameters.length;\n            if (numTypeParameters) {\n                sb.push(\"<\");\n                this.visitTypeParameter(typeParameters[0]);\n                for (var i = 1; i < numTypeParameters; ++i) {\n                    sb.push(\", \");\n                    this.visitTypeParameter(typeParameters[i]);\n                }\n                sb.push(\">\");\n            }\n        }\n        if (node.arrowKind == 2 /* ARROW_SINGLE */) {\n            var parameters = signature.parameters;\n            assert(parameters.length == 1);\n            assert(!signature.explicitThisType);\n            this.serializeParameter(parameters[0]);\n        }\n        else {\n            sb.push(\"(\");\n            var parameters = signature.parameters;\n            var numParameters = parameters.length;\n            var explicitThisType = signature.explicitThisType;\n            if (explicitThisType) {\n                sb.push(\"this: \");\n                this.visitTypeNode(explicitThisType);\n            }\n            if (numParameters) {\n                if (explicitThisType)\n                    sb.push(\", \");\n                this.serializeParameter(parameters[0]);\n                for (var i = 1; i < numParameters; ++i) {\n                    sb.push(\", \");\n                    this.serializeParameter(parameters[i]);\n                }\n            }\n        }\n        var body = node.body;\n        var returnType = signature.returnType;\n        if (node.arrowKind) {\n            if (body) {\n                if (node.arrowKind == 2 /* ARROW_SINGLE */) {\n                    assert(ast_1.isTypeOmitted(returnType));\n                }\n                else {\n                    if (ast_1.isTypeOmitted(returnType)) {\n                        sb.push(\")\");\n                    }\n                    else {\n                        sb.push(\"): \");\n                        this.visitTypeNode(returnType);\n                    }\n                }\n                sb.push(\" => \");\n                this.visitNode(body);\n            }\n            else {\n                assert(!ast_1.isTypeOmitted(returnType));\n                sb.push(\" => \");\n                this.visitTypeNode(returnType);\n            }\n        }\n        else {\n            if (!ast_1.isTypeOmitted(returnType) &&\n                !node.isAny(common_1.CommonFlags.CONSTRUCTOR | common_1.CommonFlags.SET)) {\n                sb.push(\"): \");\n                this.visitTypeNode(returnType);\n            }\n            else {\n                sb.push(\")\");\n            }\n            if (body) {\n                sb.push(\" \");\n                this.visitNode(body);\n            }\n        }\n    };\n    ASTBuilder.prototype.visitIfStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"if (\");\n        this.visitNode(node.condition);\n        sb.push(\") \");\n        var ifTrue = node.ifTrue;\n        this.visitNode(ifTrue);\n        if (ifTrue.kind != ast_1.NodeKind.BLOCK) {\n            sb.push(\";\\n\");\n        }\n        var ifFalse = node.ifFalse;\n        if (ifFalse) {\n            if (ifTrue.kind == ast_1.NodeKind.BLOCK) {\n                sb.push(\" else \");\n            }\n            else {\n                sb.push(\"else \");\n            }\n            this.visitNode(ifFalse);\n        }\n    };\n    ASTBuilder.prototype.visitImportDeclaration = function (node) {\n        var externalName = node.foreignName;\n        var name = node.name;\n        this.visitIdentifierExpression(externalName);\n        if (externalName.text != name.text) {\n            this.sb.push(\" as \");\n            this.visitIdentifierExpression(name);\n        }\n    };\n    ASTBuilder.prototype.visitImportStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"import \");\n        var declarations = node.declarations;\n        var namespaceName = node.namespaceName;\n        if (declarations) {\n            var numDeclarations = declarations.length;\n            if (numDeclarations) {\n                sb.push(\"{\\n\");\n                var indentLevel = ++this.indentLevel;\n                index_1.indent(sb, indentLevel);\n                this.visitImportDeclaration(declarations[0]);\n                for (var i = 1; i < numDeclarations; ++i) {\n                    sb.push(\",\\n\");\n                    index_1.indent(sb, indentLevel);\n                    this.visitImportDeclaration(declarations[i]);\n                }\n                --this.indentLevel;\n                sb.push(\"\\n} from \");\n            }\n            else {\n                sb.push(\"{} from \");\n            }\n        }\n        else if (namespaceName) {\n            sb.push(\"* as \");\n            this.visitIdentifierExpression(namespaceName);\n            sb.push(\" from \");\n        }\n        this.visitStringLiteralExpression(node.path);\n    };\n    ASTBuilder.prototype.visitIndexSignatureDeclaration = function (node) {\n        var sb = this.sb;\n        sb.push(\"[key: \");\n        this.visitTypeNode(node.keyType);\n        sb.push(\"]: \");\n        this.visitTypeNode(node.valueType);\n    };\n    ASTBuilder.prototype.visitInterfaceDeclaration = function (node, isDefault) {\n        if (isDefault === void 0) { isDefault = false; }\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        var sb = this.sb;\n        if (isDefault) {\n            sb.push(\"export default \");\n        }\n        else {\n            this.serializeExternalModifiers(node);\n        }\n        sb.push(\"interface \");\n        this.visitIdentifierExpression(node.name);\n        var typeParameters = node.typeParameters;\n        if (typeParameters && typeParameters.length) {\n            sb.push(\"<\");\n            this.visitTypeParameter(typeParameters[0]);\n            for (var i = 1, k = typeParameters.length; i < k; ++i) {\n                sb.push(\", \");\n                this.visitTypeParameter(typeParameters[i]);\n            }\n            sb.push(\">\");\n        }\n        var extendsType = node.extendsType;\n        if (extendsType) {\n            sb.push(\" extends \");\n            this.visitTypeNode(extendsType);\n        }\n        // must not have implementsTypes\n        sb.push(\" {\\n\");\n        var indentLevel = ++this.indentLevel;\n        var members = node.members;\n        for (var i = 0, k = members.length; i < k; ++i) {\n            index_1.indent(sb, indentLevel);\n            this.visitNodeAndTerminate(members[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"}\");\n    };\n    ASTBuilder.prototype.visitMethodDeclaration = function (node) {\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        this.serializeAccessModifiers(node);\n        if (node.is(common_1.CommonFlags.GET)) {\n            this.sb.push(\"get \");\n        }\n        else if (node.is(common_1.CommonFlags.SET)) {\n            this.sb.push(\"set \");\n        }\n        this.visitFunctionCommon(node);\n    };\n    ASTBuilder.prototype.visitNamespaceDeclaration = function (node, isDefault) {\n        if (isDefault === void 0) { isDefault = false; }\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        var sb = this.sb;\n        if (isDefault) {\n            sb.push(\"export default \");\n        }\n        else {\n            this.serializeExternalModifiers(node);\n        }\n        sb.push(\"namespace \");\n        this.visitIdentifierExpression(node.name);\n        var members = node.members;\n        var numMembers = members.length;\n        if (numMembers) {\n            sb.push(\" {\\n\");\n            var indentLevel = ++this.indentLevel;\n            for (var i = 0, k = members.length; i < k; ++i) {\n                index_1.indent(sb, indentLevel);\n                this.visitNodeAndTerminate(members[i]);\n            }\n            index_1.indent(sb, --this.indentLevel);\n            sb.push(\"}\");\n        }\n        else {\n            sb.push(\" {}\");\n        }\n    };\n    ASTBuilder.prototype.visitReturnStatement = function (node) {\n        var value = node.value;\n        if (value) {\n            this.sb.push(\"return \");\n            this.visitNode(value);\n        }\n        else {\n            this.sb.push(\"return\");\n        }\n    };\n    ASTBuilder.prototype.visitSwitchCase = function (node) {\n        var sb = this.sb;\n        var label = node.label;\n        if (label) {\n            sb.push(\"case \");\n            this.visitNode(label);\n            sb.push(\":\\n\");\n        }\n        else {\n            sb.push(\"default:\\n\");\n        }\n        var statements = node.statements;\n        var numStatements = statements.length;\n        if (numStatements) {\n            var indentLevel = ++this.indentLevel;\n            index_1.indent(sb, indentLevel);\n            this.visitNodeAndTerminate(statements[0]);\n            for (var i = 1; i < numStatements; ++i) {\n                index_1.indent(sb, indentLevel);\n                this.visitNodeAndTerminate(statements[i]);\n            }\n            --this.indentLevel;\n        }\n    };\n    ASTBuilder.prototype.visitSwitchStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"switch (\");\n        this.visitNode(node.condition);\n        sb.push(\") {\\n\");\n        var indentLevel = ++this.indentLevel;\n        var cases = node.cases;\n        for (var i = 0, k = cases.length; i < k; ++i) {\n            index_1.indent(sb, indentLevel);\n            this.visitSwitchCase(cases[i]);\n            sb.push(\"\\n\");\n        }\n        --this.indentLevel;\n        sb.push(\"}\");\n    };\n    ASTBuilder.prototype.visitThrowStatement = function (node) {\n        this.sb.push(\"throw \");\n        this.visitNode(node.value);\n    };\n    ASTBuilder.prototype.visitTryStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"try {\\n\");\n        var indentLevel = ++this.indentLevel;\n        var statements = node.statements;\n        for (var i = 0, k = statements.length; i < k; ++i) {\n            index_1.indent(sb, indentLevel);\n            this.visitNodeAndTerminate(statements[i]);\n        }\n        var catchVariable = node.catchVariable;\n        if (catchVariable) {\n            index_1.indent(sb, indentLevel - 1);\n            sb.push(\"} catch (\");\n            this.visitIdentifierExpression(catchVariable);\n            sb.push(\") {\\n\");\n            var catchStatements = node.catchStatements;\n            if (catchStatements) {\n                for (var i = 0, k = catchStatements.length; i < k; ++i) {\n                    index_1.indent(sb, indentLevel);\n                    this.visitNodeAndTerminate(catchStatements[i]);\n                }\n            }\n        }\n        var finallyStatements = node.finallyStatements;\n        if (finallyStatements) {\n            index_1.indent(sb, indentLevel - 1);\n            sb.push(\"} finally {\\n\");\n            for (var i = 0, k = finallyStatements.length; i < k; ++i) {\n                index_1.indent(sb, indentLevel);\n                this.visitNodeAndTerminate(finallyStatements[i]);\n            }\n        }\n        index_1.indent(sb, indentLevel - 1);\n        sb.push(\"}\");\n    };\n    ASTBuilder.prototype.visitTypeDeclaration = function (node) {\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        var sb = this.sb;\n        this.serializeExternalModifiers(node);\n        sb.push(\"type \");\n        this.visitIdentifierExpression(node.name);\n        var typeParameters = node.typeParameters;\n        if (typeParameters) {\n            var numTypeParameters = typeParameters.length;\n            if (numTypeParameters) {\n                sb.push(\"<\");\n                for (var i = 0; i < numTypeParameters; ++i) {\n                    this.visitTypeParameter(typeParameters[i]);\n                }\n                sb.push(\">\");\n            }\n        }\n        sb.push(\" = \");\n        this.visitTypeNode(node.type);\n    };\n    ASTBuilder.prototype.visitVariableDeclaration = function (node) {\n        this.visitIdentifierExpression(node.name);\n        var type = node.type;\n        var sb = this.sb;\n        if (node.flags & common_1.CommonFlags.DEFINITE_ASSIGNMENT) {\n            sb.push(\"!\");\n        }\n        if (type) {\n            sb.push(\": \");\n            this.visitTypeNode(type);\n        }\n        var initializer = node.initializer;\n        if (initializer) {\n            sb.push(\" = \");\n            this.visitNode(initializer);\n        }\n    };\n    ASTBuilder.prototype.visitVariableStatement = function (node) {\n        var decorators = node.decorators;\n        if (decorators) {\n            for (var i = 0, k = decorators.length; i < k; ++i) {\n                this.serializeDecorator(decorators[i]);\n            }\n        }\n        var sb = this.sb;\n        var declarations = node.declarations;\n        var numDeclarations = assert(declarations.length);\n        var firstDeclaration = declarations[0];\n        this.serializeExternalModifiers(firstDeclaration);\n        sb.push(firstDeclaration.is(common_1.CommonFlags.CONST) ? \"const \" : firstDeclaration.is(common_1.CommonFlags.LET) ? \"let \" : \"var \");\n        this.visitVariableDeclaration(node.declarations[0]);\n        for (var i = 1; i < numDeclarations; ++i) {\n            sb.push(\", \");\n            this.visitVariableDeclaration(node.declarations[i]);\n        }\n    };\n    ASTBuilder.prototype.visitWhileStatement = function (node) {\n        var sb = this.sb;\n        sb.push(\"while (\");\n        this.visitNode(node.condition);\n        var statement = node.statement;\n        if (statement.kind == ast_1.NodeKind.EMPTY) {\n            sb.push(\")\");\n        }\n        else {\n            sb.push(\") \");\n            this.visitNode(node.statement);\n        }\n    };\n    // other\n    ASTBuilder.prototype.serializeDecorator = function (node) {\n        var sb = this.sb;\n        sb.push(\"@\");\n        this.visitNode(node.name);\n        var args = node.arguments;\n        if (args) {\n            sb.push(\"(\");\n            var numArgs = args.length;\n            if (numArgs) {\n                this.visitNode(args[0]);\n                for (var i = 1; i < numArgs; ++i) {\n                    sb.push(\", \");\n                    this.visitNode(args[i]);\n                }\n            }\n            sb.push(\")\\n\");\n        }\n        else {\n            sb.push(\"\\n\");\n        }\n        index_1.indent(sb, this.indentLevel);\n    };\n    ASTBuilder.prototype.serializeParameter = function (node) {\n        var sb = this.sb;\n        var kind = node.parameterKind;\n        var implicitFieldDeclaration = node.implicitFieldDeclaration;\n        if (implicitFieldDeclaration) {\n            this.serializeAccessModifiers(implicitFieldDeclaration);\n        }\n        if (kind == ast_1.ParameterKind.REST) {\n            sb.push(\"...\");\n        }\n        this.visitIdentifierExpression(node.name);\n        var type = node.type;\n        var initializer = node.initializer;\n        if (type) {\n            if (kind == ast_1.ParameterKind.OPTIONAL && !initializer)\n                sb.push(\"?\");\n            if (!ast_1.isTypeOmitted(type)) {\n                sb.push(\": \");\n                this.visitTypeNode(type);\n            }\n        }\n        if (initializer) {\n            sb.push(\" = \");\n            this.visitNode(initializer);\n        }\n    };\n    ASTBuilder.prototype.serializeExternalModifiers = function (node) {\n        var sb = this.sb;\n        if (node.is(common_1.CommonFlags.EXPORT)) {\n            sb.push(\"export \");\n        }\n        else if (node.is(common_1.CommonFlags.IMPORT)) {\n            sb.push(\"import \");\n        }\n        else if (node.is(common_1.CommonFlags.DECLARE)) {\n            sb.push(\"declare \");\n        }\n    };\n    ASTBuilder.prototype.serializeAccessModifiers = function (node) {\n        var sb = this.sb;\n        if (node.is(common_1.CommonFlags.PUBLIC)) {\n            sb.push(\"public \");\n        }\n        else if (node.is(common_1.CommonFlags.PRIVATE)) {\n            sb.push(\"private \");\n        }\n        else if (node.is(common_1.CommonFlags.PROTECTED)) {\n            sb.push(\"protected \");\n        }\n        if (node.is(common_1.CommonFlags.STATIC)) {\n            sb.push(\"static \");\n        }\n        else if (node.is(common_1.CommonFlags.ABSTRACT)) {\n            sb.push(\"abstract \");\n        }\n        if (node.is(common_1.CommonFlags.READONLY)) {\n            sb.push(\"readonly \");\n        }\n    };\n    ASTBuilder.prototype.finish = function () {\n        var ret = this.sb.join(\"\");\n        this.sb = [];\n        return ret;\n    };\n    return ASTBuilder;\n}());\nexports.ASTBuilder = ASTBuilder;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// export type Collection<T> = NonNullCollection<T>| null;\nvar isIterable = function (object) {\n    //@ts-ignore\n    return object != null && typeof object[Symbol.iterator] === \"function\";\n};\nvar DefaultWriter = /** @class */ (function () {\n    function DefaultWriter() {\n    }\n    DefaultWriter.prototype.writeString = function (s) { };\n    DefaultWriter.prototype.writeNode = function (node) { };\n    return DefaultWriter;\n}());\nexports.DefaultWriter = DefaultWriter;\nvar AbstractVisitor = /** @class */ (function () {\n    function AbstractVisitor(writer) {\n        if (writer === void 0) { writer = new DefaultWriter(); }\n        this.writer = writer;\n    }\n    AbstractVisitor.prototype.writeString = function (str) {\n        return this.writeString(str);\n    };\n    AbstractVisitor.prototype.writeNode = function (item) {\n        this.writer.writeNode(item);\n    };\n    AbstractVisitor.prototype.visit = function (node) {\n        var e_1, _a, e_2, _b;\n        var _this = this;\n        if (node == null)\n            return;\n        if (node instanceof Array) {\n            node.map(function (node) { _this.visit(node); });\n        }\n        else if (node instanceof Map) {\n            try {\n                for (var _c = __values(node.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var _e = __read(_d.value, 2), key = _e[0], _node = _e[1];\n                    this.visit(_node);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            //@ts-ignore Need a better way to test type\n        }\n        else if (isIterable(node)) {\n            try {\n                //TODO: Find better way to test if iterable\n                for (var node_1 = __values(node), node_1_1 = node_1.next(); !node_1_1.done; node_1_1 = node_1.next()) {\n                    var _node = node_1_1.value;\n                    this.visit(_node);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (node_1_1 && !node_1_1.done && (_b = node_1.return)) _b.call(node_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n        else {\n            //@ts-ignore Node is not iterable.\n            this._visit(node);\n        }\n    };\n    return AbstractVisitor;\n}());\nexports.AbstractVisitor = AbstractVisitor;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92aXNpdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsMERBQTBEO0FBRTFELElBQU0sVUFBVSxHQUFHLFVBQUMsTUFBYztJQUNoQyxZQUFZO0lBQ1osT0FBQSxNQUFNLElBQUksSUFBSSxJQUFJLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxVQUFVO0FBQS9ELENBQStELENBQUM7QUFPbEU7SUFBQTtJQUlBLENBQUM7SUFIQyxtQ0FBVyxHQUFYLFVBQVksQ0FBUyxJQUFVLENBQUM7SUFDaEMsaUNBQVMsR0FBVCxVQUFVLElBQW1CLElBQVMsQ0FBQztJQUV6QyxvQkFBQztBQUFELENBQUMsQUFKRCxJQUlDO0FBSlksc0NBQWE7QUFNMUI7SUFFRSx5QkFBc0IsTUFBMEM7UUFBMUMsdUJBQUEsRUFBQSxhQUF3QixhQUFhLEVBQUs7UUFBMUMsV0FBTSxHQUFOLE1BQU0sQ0FBb0M7SUFBRyxDQUFDO0lBRXBFLHFDQUFXLEdBQVgsVUFBWSxHQUFXO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsbUNBQVMsR0FBVCxVQUFVLElBQW1CO1FBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCwrQkFBSyxHQUFMLFVBQU0sSUFBMEI7O1FBQWhDLGlCQWtCQztRQWpCQyxJQUFJLElBQUksSUFBSSxJQUFJO1lBQUUsT0FBTztRQUN6QixJQUFJLElBQUksWUFBWSxLQUFLLEVBQUU7WUFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLElBQU8sSUFBYSxLQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7YUFBTSxJQUFJLElBQUksWUFBWSxHQUFHLEVBQUU7O2dCQUM5QixLQUF5QixJQUFBLEtBQUEsU0FBQSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUEsZ0JBQUEsNEJBQUU7b0JBQWhDLElBQUEsd0JBQVksRUFBWCxXQUFHLEVBQUUsYUFBSztvQkFDbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDbkI7Ozs7Ozs7OztZQUNELDJDQUEyQztTQUM1QzthQUFNLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFOztnQkFDekIsMkNBQTJDO2dCQUM3QyxLQUFrQixJQUFBLFNBQUEsU0FBQSxJQUFJLENBQUEsMEJBQUEsNENBQUU7b0JBQW5CLElBQUksS0FBSyxpQkFBQTtvQkFDVixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNyQjs7Ozs7Ozs7O1NBQ0Y7YUFBTTtZQUNMLGtDQUFrQztZQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ25CO0lBQ0gsQ0FBQztJQUdILHNCQUFDO0FBQUQsQ0FBQyxBQWpDRCxJQWlDQztBQWpDcUIsMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCB0eXBlIENvbGxlY3Rpb248VD4gPSBUIHwgVFtdIHwgTWFwPHN0cmluZywgVCB8IFRbXSB8IEl0ZXJhYmxlPFQ+PiB8IEl0ZXJhYmxlPFQ+O1xuLy8gZXhwb3J0IHR5cGUgQ29sbGVjdGlvbjxUPiA9IE5vbk51bGxDb2xsZWN0aW9uPFQ+fCBudWxsO1xuXG5jb25zdCBpc0l0ZXJhYmxlID0gKG9iamVjdDogb2JqZWN0KTogYm9vbGVhbiA9PlxuICAvL0B0cy1pZ25vcmVcbiAgb2JqZWN0ICE9IG51bGwgJiYgdHlwZW9mIG9iamVjdFtTeW1ib2wuaXRlcmF0b3JdID09PSBcImZ1bmN0aW9uXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgV3JpdGVyPFQ+IHtcbiAgd3JpdGVTdHJpbmcoeDogQ29sbGVjdGlvbjxUPiB8IHN0cmluZyk6IHZvaWQ7XG4gIHdyaXRlTm9kZSh4OiBDb2xsZWN0aW9uPFQ+KTogdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIERlZmF1bHRXcml0ZXI8VD4gaW1wbGVtZW50cyBXcml0ZXI8VD4ge1xuICB3cml0ZVN0cmluZyhzOiBzdHJpbmcpOiB2b2lkIHsgfVxuICB3cml0ZU5vZGUobm9kZTogQ29sbGVjdGlvbjxUPik6IHZvaWQge31cblxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RWaXNpdG9yPFQ+IHtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgd3JpdGVyOiBXcml0ZXI8VD4gPSBuZXcgRGVmYXVsdFdyaXRlcjxUPigpKSB7fVxuXG4gIHdyaXRlU3RyaW5nKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy53cml0ZVN0cmluZyhzdHIpO1xuICB9XG5cbiAgd3JpdGVOb2RlKGl0ZW06IENvbGxlY3Rpb248VD4gKTogdm9pZCB7XG4gICAgdGhpcy53cml0ZXIud3JpdGVOb2RlKGl0ZW0pO1xuICB9XG5cbiAgdmlzaXQobm9kZTogQ29sbGVjdGlvbjxUPiB8IG51bGwpOiB2b2lkIHtcbiAgICBpZiAobm9kZSA9PSBudWxsKSByZXR1cm47XG4gICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgbm9kZS5tYXAoKG5vZGU6IFQpOiB2b2lkID0+IHsgdGhpcy52aXNpdChub2RlKTsgfSk7XG4gICAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICBmb3IgKGxldCBba2V5LCBfbm9kZV0gb2Ygbm9kZS5lbnRyaWVzKCkpIHtcbiAgICAgICAgdGhpcy52aXNpdChfbm9kZSk7XG4gICAgICB9XG4gICAgICAvL0B0cy1pZ25vcmUgTmVlZCBhIGJldHRlciB3YXkgdG8gdGVzdCB0eXBlXG4gICAgfSBlbHNlIGlmIChpc0l0ZXJhYmxlKG5vZGUpKSB7XG4gICAgICAgIC8vVE9ETzogRmluZCBiZXR0ZXIgd2F5IHRvIHRlc3QgaWYgaXRlcmFibGVcbiAgICAgIGZvciAobGV0IF9ub2RlIG9mIG5vZGUpIHtcbiAgICAgICAgICB0aGlzLnZpc2l0KF9ub2RlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy9AdHMtaWdub3JlIE5vZGUgaXMgbm90IGl0ZXJhYmxlLlxuICAgICAgdGhpcy5fdmlzaXQobm9kZSk7XG4gICAgfVxuICB9XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBfdmlzaXQobm9kZTogVCk6IHZvaWQ7XG5cbn1cbiJdfQ=="],"sourceRoot":""}