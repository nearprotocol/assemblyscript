{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","x","DiagnosticCategory","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","code","message","range","relatedRange","arg0","arg1","arg2","replace","DiagnosticMessage","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","DiagnosticEmitter","Token","Range","NodeKind","kind","LITERAL","NULL","TRUE","FALSE","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","createTypeName","typeName","TypeName","identifier","next","createSimpleTypeName","Node","createIdentifierExpression","createNamedType","typeArguments","isNullable","type","NamedTypeNode","createFunctionType","parameters","returnType","explicitThisType","FunctionTypeNode","createOmittedType","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","DecoratorKind","fromNode","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","flags","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","localName","exportedName","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","foreignName","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","arrowKind","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","hasGenericComponent","typeParameterNodes","NAMEDTYPE","typeArgumentNodes","k","FUNCTIONTYPE","parameterNodes","TypeNode","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","is","flag","isAny","set","nameNode","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","BINARY","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","SOURCE","parent","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","Source","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","clone","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","decorator","OperatorKind","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","pathLiteral","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","ElementKind","DecoratorFlags","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","nativeFile","File","internalName","resolver","Resolver","getSource","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","makeNativeTypeDeclaration","makeNativeFunctionDeclaration","makeNativeNamespaceDeclaration","makeNativeFunction","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","setType","className","classReference","classElement","wrappedType","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","existing","merged","tryMerge","isDeclaredElement","Duplicate_identifier_0","requireGlobal","lookupExport","fileQueuedExports","checkDecorators","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Not_implemented","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeProperty","initializeMethod","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","QueuedExportStar","Export_declaration_conflicts_with_exported_declaration_of_0","QueuedExport","initializeImport","QueuedImport","validDecorators","AMBIENT","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Program","program","shadowType","FILE","current","unset","originalDeclaration","isBound","Element","declaredElements","typedElements","RESOLVED","TypedElement","startFunction","Signature","isImport","lookup","includes","memberName","TYPEDEFINITION","mangleInternalName","NAMESPACE","ENUM","ConstantValueKind","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","VariableLikeElement","ENUMVALUE","isImmutable","Parameter","index","LOCAL","Local","instances","boundPrototypes","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","__s","FUNCTION_TARGET","toSignatureString","FunctionTarget","FIELD_PROTOTYPE","memoryOffset","Field","firstDeclaration","getterInstance","setterInstance","Property","INDEXSIGNATURE","getGetterInstance","isUnchecked","lookupOverload","getSetterInstance","IndexSignature","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","base","INTERFACE","currentMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","baseName","baseType","isBuiltinArray","lengthField","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","Class","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","Interface","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeAnyref","_BinaryenTypeExnref","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureMVP","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenFeatureTailCall","_BinaryenFeatureReferenceTypes","_BinaryenFeatureAll","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenAtomicFenceId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDTernaryId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","_BinaryenTryId","_BinaryenThrowId","_BinaryenRethrowId","_BinaryenBrOnExnId","_BinaryenPushId","_BinaryenPopId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenTruncSatSFloat32ToInt32","_BinaryenTruncSatUFloat32ToInt32","_BinaryenTruncSatSFloat64ToInt32","_BinaryenTruncSatUFloat64ToInt32","_BinaryenTruncSatSFloat32ToInt64","_BinaryenTruncSatUFloat32ToInt64","_BinaryenTruncSatSFloat64ToInt64","_BinaryenTruncSatUFloat64ToInt64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenWidenLowSVecI8x16ToVecI16x8","_BinaryenWidenLowUVecI8x16ToVecI16x8","_BinaryenWidenHighSVecI8x16ToVecI16x8","_BinaryenWidenHighUVecI8x16ToVecI16x8","_BinaryenWidenLowSVecI16x8ToVecI32x4","_BinaryenWidenLowUVecI16x8ToVecI32x4","_BinaryenWidenHighSVecI16x8ToVecI32x4","_BinaryenWidenHighUVecI16x8ToVecI32x4","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","_BinaryenNarrowSVecI16x8ToVecI8x16","_BinaryenNarrowUVecI16x8ToVecI8x16","_BinaryenNarrowSVecI32x4ToVecI16x8","_BinaryenNarrowUVecI32x4ToVecI16x8","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","SIMDTernaryOp","_BinaryenBitselectVec128","_BinaryenQFMAVecF32x4","_BinaryenQFMSVecF32x4","_BinaryenQFMAVecF64x2","_BinaryenQFMSVecF64x2","segment","MemorySegment","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","Module","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","_BinaryenUnary","binary","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","atomic_fence","_BinaryenAtomicFence","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","children","_BinaryenBlock","br","_BinaryenBreak","drop","_BinaryenDrop","loop","_BinaryenLoop","if","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","return_call","call_indirect","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","return_call_indirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","try","catchBody","_BinaryenTry","throw","eventName","_BinaryenThrow","rethrow","exnref","_BinaryenRethrow","br_on_exn","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","pop","_BinaryenPop","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_ternary","a","b","_BinaryenSIMDTernary","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addEvent","attribute","_BinaryenAddEvent","addFunction","varTypes","_BinaryenAddFunction","getFunction","_BinaryenGetFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","addEventExport","_BinaryenAddEventExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","addEventImport","eventType","_BinaryenAddEventImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","Throw","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","Push","_BinaryenPushGetValue","Pop","Select","Drop","Host","Nop","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","isChangeableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","types","numTypes","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","Tokenizer","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","inferGenericType","exprNode","ctxFlow","typeParameterNames","resolveExpression","SWALLOW","propagateInferredGenericTypes","actualFunction","currentType","getTypeOfElement","ensureResolvedLazyGlobal","isTypedElement","getElementOfType","lookupExpression","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","propertyName","indexedGet","resolvedType","targetExpression","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","Type_0_is_illegal_in_this_context","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","i64_sub","i64_zero","intType","leftType","rightType","commonType","Operator_0_cannot_be_applied_to_types_1_and_2","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","functionTypeNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","isPowerOf2","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","unsetLocalFlag","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","isNative","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","isLocalTee","getLocalSetIndex","getLocalGetIndex","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","canOverflow","WRAPPED","canConversionOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","importMemory","sharedMemory","importTable","explicitStart","features","noUnsafe","feature","Options","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","currentInlineFunctions","currentEnum","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","compile","Compiler","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","typesToNativeTypes","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","compileExpression","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","Feature_0_is_not_enabled","initializeInStart","Mutable_value_cannot_be_inlined","findDecorator","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","contextualType","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","argumentNodes","argumentExpression","inferredType","Type_argument_expected","compileCallIndirect","checkCallSignature","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","findUsedLocals","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","arrayType","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseCtor","allocExpr","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","fieldPrototype","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","compileCall","compiler","isAsm","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","alignof","ctz","checkArgsOptional","Type_0_has_no_property_1","nameof","checkTypeOptional","ClzI64","CtzI64","popcnt","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","CeilF32","CeilF64","floor","FloorF32","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","checkFeatureEnabled","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","opName","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","call_direct","arg0Type","Type_0_is_not_a_function_index_or_function_reference","operandExprs","nativeParamTypes","operandType","Expression_must_be_a_compile_time_constant","instantiate","User_defined_0","off","v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","v128_extract_lane","maxIdx","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","v128_replace_lane","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","v128_div","DivF32x4","DivF64x2","v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","v128_min","MinF32x4","MinF64x2","v128_max","MaxF32x4","MaxF64x2","v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","v128_abs","AbsF32x4","AbsF64x2","v128_sqrt","SqrtF32x4","SqrtF64x2","v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","v128_shl","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","v128_and","AndV128","v128_or","OrV128","v128_xor","XorV128","v128_not","NotV128","v128_bitselect","Bitselect","v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","v128_qfma","QFMAF32x4","QFMAF64x2","v128_qfms","QFMSF32x4","QFMSF64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","abvPrototype","isAcyclic","functionId","decompile","decompiler","Decompiler","decompileFunction","getFunctionName","getFunctionBody","getFunctionParamCount","nativeTypeToType","getFunctionParamType","getFunctionResultType","decompileExpression","nested","getLoopName","getLoopBody","getBreakCondition","getBreakName","getLoadOffset","getLoadPtr","getStoreOffset","getStorePtr","getStoreValue","i64_to_string","getSelectCondition","getDropValue","getReturnValue","getHostOp","getHostOperand","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","indentLevel","build","IDLBuilder","indent","typeToString","visitInterface","ExportsWalker","unknown","TSDBuilder","numMembers","isInterface","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","parseFile","isEntry","indexOf","USER","currentSource","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","getDependee","dependent","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","nodeIsCallable","nodeIsGenericCallable","skipBlock","depth","Parser","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","unmanaged","formatDiagnostic","formatDiagnosticMessage","parser","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","cls","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","valueI64"],"mappings":"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,a,8ECv+RA,SAAY3qE,GACV,2CACA,mDACA,yCACA,6DACA,uHACA,iMACA,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA,0MACA,kQACA,8DACA,kGACA,gKACA,oIACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MA1IF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KA8I1B,kCAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,mBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,mDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,K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D,EAAUv5F,EAAYw5F,GAE9C,OADA7nH,OAAOquB,GAAS,GAAKA,EAAQ,IACtBw5F,EACHvJ,OACEsJ,EACArzD,QACE6oD,QACAr8F,QAAQsN,KAGZ+vF,QACEwJ,EACA9I,QACEvqD,QACE6oD,QACAr8F,QAAQsN,Q,8EC9BpB,SAAkBy5F,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4BxxH,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACnB,IAALA,GACK,IAALA,GACAA,EAAI,SAmLqBkK,EAnLYlK,GAoL9B,GAAKkK,EAAO,QACnBunH,EAAmBvnH,EAAawnH,IAFzC,IAAkCxnH,GA/KlC,8BAAmClK,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACxBA,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBkK,EAzKYlK,GA0K7B,GAAKkK,EAAO,QACnBunH,EAAmBvnH,EAAaynH,IAFzC,IAAiCznH,GArKjC,IAAMwnH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString(10));\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    var self = <TypeNode>this; // TS otherwise complains\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      if (!(<NamedTypeNode>self).name.next) {\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = (<NamedTypeNode>self).name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\n    ) {\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\n      assert(nameStr.length);\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\n      assert(propStr.length);\n      // @operator.binary, @operator.prefix, @operator.postfix\n      if (nameStr == \"operator\") {\n        switch (propStr.charCodeAt(0)) {\n          case CharCode.b: {\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n            break;\n          }\n          case CharCode.p: {\n            switch (propStr) {\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  ExportDefaultStatement,\n  Token,\n  ParameterNode\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ref: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ref: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ref: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ref: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? elementsByDeclaration.get(declaration)\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\n      CommonSymbols.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonSymbols.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonSymbols.I8);\n    this.registerWrapperClass(Type.i16, CommonSymbols.I16);\n    this.registerWrapperClass(Type.i32, CommonSymbols.I32);\n    this.registerWrapperClass(Type.i64, CommonSymbols.I64);\n    this.registerWrapperClass(options.isizeType, CommonSymbols.Isize);\n    this.registerWrapperClass(Type.u8, CommonSymbols.U8);\n    this.registerWrapperClass(Type.u16, CommonSymbols.U16);\n    this.registerWrapperClass(Type.u32, CommonSymbols.U32);\n    this.registerWrapperClass(Type.u64, CommonSymbols.U64);\n    this.registerWrapperClass(options.usizeType, CommonSymbols.Usize);\n    this.registerWrapperClass(Type.bool, CommonSymbols.Bool);\n    this.registerWrapperClass(Type.f32, CommonSymbols.F32);\n    this.registerWrapperClass(Type.f64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonSymbols.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonSymbols.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a non-generic global function is present and returns it. */\n  private requireFunction(name: string): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = exports.get(\"default\")!;\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = members.get(name)!;\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              element.identifierNode.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, element.identifierNode.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An resolved index signature. */\nexport class IndexSignature extends VariableLikeElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = instanceMembers.get(name)!;\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let type = (<Field>member).type;\n          if (type.is(TypeFlags.REFERENCE)) {\n            if ((current = type.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\nimport { Type } from \"./types\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Anyref = _BinaryenTypeAnyref(),\n  Exnref = _BinaryenTypeExnref(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  MVP = _BinaryenFeatureMVP(),\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling(),\n  TailCall = _BinaryenFeatureTailCall(),\n  ReferenceTypes = _BinaryenFeatureReferenceTypes(),\n  All = _BinaryenFeatureAll()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  AtomicFence = _BinaryenAtomicFenceId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDTernary = _BinaryenSIMDTernaryId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId(),\n  Try = _BinaryenTryId(),\n  Throw = _BinaryenThrowId(),\n  Rethrow = _BinaryenRethrowId(),\n  BrOnExn = _BinaryenBrOnExnId(),\n  Push = _BinaryenPushId(),\n  Pop = _BinaryenPopId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = _BinaryenTruncSatSFloat32ToInt32(),\n  TruncF32ToU32Sat = _BinaryenTruncSatUFloat32ToInt32(),\n  TruncF64ToI32Sat = _BinaryenTruncSatSFloat64ToInt32(),\n  TruncF64ToU32Sat = _BinaryenTruncSatUFloat64ToInt32(),\n  TruncF32ToI64Sat = _BinaryenTruncSatSFloat32ToInt64(),\n  TruncF32ToU64Sat = _BinaryenTruncSatUFloat32ToInt64(),\n  TruncF64ToI64Sat = _BinaryenTruncSatSFloat64ToInt64(),\n  TruncF64ToU64Sat = _BinaryenTruncSatUFloat64ToInt64(),\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = _BinaryenSplatVecI8x16(),\n  SplatI16x8 = _BinaryenSplatVecI16x8(),\n  SplatI32x4 = _BinaryenSplatVecI32x4(),\n  SplatI64x2 = _BinaryenSplatVecI64x2(),\n  SplatF32x4 = _BinaryenSplatVecF32x4(),\n  SplatF64x2 = _BinaryenSplatVecF64x2(),\n  NotV128 = _BinaryenNotVec128(),\n  NegI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsF32x4 = _BinaryenAbsVecF32x4(),\n  NegF32x4 = _BinaryenNegVecF32x4(),\n  SqrtF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsF64x2 = _BinaryenAbsVecF64x2(),\n  NegF64x2 = _BinaryenNegVecF64x2(),\n  SqrtF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatF32x4ToI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatF32x4ToU32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatF64x2ToI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatF64x2ToU64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertI32x4ToF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertU32x4ToF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertI64x2ToF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertU64x2ToF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\n  WidenLowI8x16ToI16x8 = _BinaryenWidenLowSVecI8x16ToVecI16x8(),\n  WidenLowU8x16ToU16x8 = _BinaryenWidenLowUVecI8x16ToVecI16x8(),\n  WidenHighI8x16ToI16x8 = _BinaryenWidenHighSVecI8x16ToVecI16x8(),\n  WidenHighU8x16ToU16x8 = _BinaryenWidenHighUVecI8x16ToVecI16x8(),\n  WidenLowI16x8ToI32x4 = _BinaryenWidenLowSVecI16x8ToVecI32x4(),\n  WidenLowU16x8ToU32x4 = _BinaryenWidenLowUVecI16x8ToVecI32x4(),\n  WidenHighI16x8ToI32x4 = _BinaryenWidenHighSVecI16x8ToVecI32x4(),\n  WidenHighU16x8ToU32x4 = _BinaryenWidenHighUVecI16x8ToVecI32x4()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = _BinaryenEqVecI8x16(),\n  NeI8x16 = _BinaryenNeVecI8x16(),\n  LtI8x16 = _BinaryenLtSVecI8x16(),\n  LtU8x16 = _BinaryenLtUVecI8x16(),\n  LeI8x16 = _BinaryenLeSVecI8x16(),\n  LeU8x16 = _BinaryenLeUVecI8x16(),\n  GtI8x16 = _BinaryenGtSVecI8x16(),\n  GtU8x16 = _BinaryenGtUVecI8x16(),\n  GeI8x16 = _BinaryenGeSVecI8x16(),\n  GeU8x16 = _BinaryenGeUVecI8x16(),\n  EqI16x8 = _BinaryenEqVecI16x8(),\n  NeI16x8 = _BinaryenNeVecI16x8(),\n  LtI16x8 = _BinaryenLtSVecI16x8(),\n  LtU16x8 = _BinaryenLtUVecI16x8(),\n  LeI16x8 = _BinaryenLeSVecI16x8(),\n  LeU16x8 = _BinaryenLeUVecI16x8(),\n  GtI16x8 = _BinaryenGtSVecI16x8(),\n  GtU16x8 = _BinaryenGtUVecI16x8(),\n  GeI16x8 = _BinaryenGeSVecI16x8(),\n  GeU16x8 = _BinaryenGeUVecI16x8(),\n  EqI32x4 = _BinaryenEqVecI32x4(),\n  NeI32x4 = _BinaryenNeVecI32x4(),\n  LtI32x4 = _BinaryenLtSVecI32x4(),\n  LtU32x4 = _BinaryenLtUVecI32x4(),\n  LeI32x4 = _BinaryenLeSVecI32x4(),\n  LeU32x4 = _BinaryenLeUVecI32x4(),\n  GtI32x4 = _BinaryenGtSVecI32x4(),\n  GtU32x4 = _BinaryenGtUVecI32x4(),\n  GeI32x4 = _BinaryenGeSVecI32x4(),\n  GeU32x4 = _BinaryenGeUVecI32x4(),\n  EqF32x4 = _BinaryenEqVecF32x4(),\n  NeF32x4 = _BinaryenNeVecF32x4(),\n  LtF32x4 = _BinaryenLtVecF32x4(),\n  LeF32x4 = _BinaryenLeVecF32x4(),\n  GtF32x4 = _BinaryenGtVecF32x4(),\n  GeF32x4 = _BinaryenGeVecF32x4(),\n  EqF64x2 = _BinaryenEqVecF64x2(),\n  NeF64x2 = _BinaryenNeVecF64x2(),\n  LtF64x2 = _BinaryenLtVecF64x2(),\n  LeF64x2 = _BinaryenLeVecF64x2(),\n  GtF64x2 = _BinaryenGtVecF64x2(),\n  GeF64x2 = _BinaryenGeVecF64x2(),\n  AndV128 = _BinaryenAndVec128(),\n  OrV128 = _BinaryenOrVec128(),\n  XorV128 = _BinaryenXorVec128(),\n  AddI8x16 = _BinaryenAddVecI8x16(),\n  AddSatI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatU8x16 = _BinaryenAddSatUVecI8x16(),\n  SubI8x16 = _BinaryenSubVecI8x16(),\n  SubSatI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatU8x16 = _BinaryenSubSatUVecI8x16(),\n  MulI8x16 = _BinaryenMulVecI8x16(),\n  AddI16x8 = _BinaryenAddVecI16x8(),\n  AddSatI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatU16x8 = _BinaryenAddSatUVecI16x8(),\n  SubI16x8 = _BinaryenSubVecI16x8(),\n  SubSatI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatU16x8 = _BinaryenSubSatUVecI16x8(),\n  MulI16x8 = _BinaryenMulVecI16x8(),\n  AddI32x4 = _BinaryenAddVecI32x4(),\n  SubI32x4 = _BinaryenSubVecI32x4(),\n  MulI32x4 = _BinaryenMulVecI32x4(),\n  AddI64x2 = _BinaryenAddVecI64x2(),\n  SubI64x2 = _BinaryenSubVecI64x2(),\n  AddF32x4 = _BinaryenAddVecF32x4(),\n  SubF32x4 = _BinaryenSubVecF32x4(),\n  MulF32x4 = _BinaryenMulVecF32x4(),\n  DivF32x4 = _BinaryenDivVecF32x4(),\n  MinF32x4 = _BinaryenMinVecF32x4(),\n  MaxF32x4 = _BinaryenMaxVecF32x4(),\n  AddF64x2 = _BinaryenAddVecF64x2(),\n  SubF64x2 = _BinaryenSubVecF64x2(),\n  MulF64x2 = _BinaryenMulVecF64x2(),\n  DivF64x2 = _BinaryenDivVecF64x2(),\n  MinF64x2 = _BinaryenMinVecF64x2(),\n  MaxF64x2 = _BinaryenMaxVecF64x2(),\n  NarrowI16x8ToI8x16 = _BinaryenNarrowSVecI16x8ToVecI8x16(),\n  NarrowU16x8ToU8x16 = _BinaryenNarrowUVecI16x8ToVecI8x16(),\n  NarrowI32x4ToI16x8 = _BinaryenNarrowSVecI32x4ToVecI16x8(),\n  NarrowU32x4ToU16x8 = _BinaryenNarrowUVecI32x4ToVecI16x8()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneU8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneU16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = _BinaryenShlVecI8x16(),\n  ShrI8x16 = _BinaryenShrSVecI8x16(),\n  ShrU8x16 = _BinaryenShrUVecI8x16(),\n  ShlI16x8 = _BinaryenShlVecI16x8(),\n  ShrI16x8 = _BinaryenShrSVecI16x8(),\n  ShrU16x8 = _BinaryenShrUVecI16x8(),\n  ShlI32x4 = _BinaryenShlVecI32x4(),\n  ShrI32x4 = _BinaryenShrSVecI32x4(),\n  ShrU32x4 = _BinaryenShrUVecI32x4(),\n  ShlI64x2 = _BinaryenShlVecI64x2(),\n  ShrI64x2 = _BinaryenShrSVecI64x2(),\n  ShrU64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = _BinaryenBitselectVec128(),\n  QFMAF32x4 = _BinaryenQFMAVecF32x4(),\n  QFMSF32x4 = _BinaryenQFMSVecF32x4(),\n  QFMAF64x2 = _BinaryenQFMAVecF64x2(),\n  QFMSF64x2 = _BinaryenQFMSVecF64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return _BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\n        : _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr)\n        : _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, typeName, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return _BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_ternary(\n    op: BinaryenSIMDOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    type: FunctionRef\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddEvent(this.ref, cStr, attribute, type);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    eventType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, eventType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Array<i8>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = _BinaryenFunctionGetBody(func);\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = _BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   // TODO: there's more\n//   switch (_BinaryenExpressionGetId(expr)) {\n//     case ExpressionId.LocalGet:\n//     case ExpressionId.GlobalGet:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(_BinaryenSIMDTernaryGetA(expr), data);\n      visit(_BinaryenSIMDTernaryGetB(expr), data);\n      visit(_BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(_BinaryenTryGetBody(expr), data);\n      visit(_BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i = 0, n = _BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(_BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(_BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(_BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** A host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.ANYREF:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.ANYREF:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n          case TypeKind.ANYREF:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.ANYREF: return \"a\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** A host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Infers the generic type(s) of an argument expression and updates `ctxTypes`. */\n  inferGenericType(\n    /** The generic type being inferred. */\n    typeNode: TypeNode,\n    /** The respective argument expression. */\n    exprNode: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    var type = this.resolveExpression(exprNode, ctxFlow, Type.auto, ReportMode.SWALLOW);\n    if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, ctxTypes, typeParameterNames);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = (<NamedTypeNode>node).name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = ctxTypes.get(name)!;\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      if (parameterNodes !== null && parameterNodes.length) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return wrapperClasses.get(type);\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let elementExpression = assert(this.currentElementExpression);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = wrapperClasses.get(returnType)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      if (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    }\n    var type = this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n      return type ? type.nonNullableType : null;\n    }\n    return this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return wrapperClasses.get(intType);\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return wrapperClasses.get(fltType);\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // `unchecked(expr: *): *` is special\n        if (\n          (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        // otherwise resolve normally\n        let instance = this.resolveFunctionInclTypeArguments(\n          <FunctionPrototype>target,\n          node.typeArguments,\n          ctxFlow.actualFunction,\n          makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        return (<FunctionTarget>target).signature.returnType;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return wrapperClasses.get(Type.bool);\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = ctxTypes;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              let existing = instanceMembers.get(member.name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                existing.declaration.name.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (kind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(kind)) {\n        overloads.set(kind, operatorInstance);\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (kind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is read from. */\n  READFROM = 1 << 3,\n  /** Local is written to. */\n  WRITTENTO = 1 << 4,\n  /** Local is retained. */\n  RETAINED = 1 << 5,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 6,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 7,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 8,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop();\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    this.freeTempLocal(local);\n    return local;\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    this.set(other.flags & FlowFlags.ANY_CONDITIONAL);\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      this.setLocalFlag(i, flags & LocalFlags.ANY_CONDITIONAL);\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  FeatureFlags,\n  needsExplicitUnreachable,\n  getLocalSetValue\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement,\n  SourceKind\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (this.options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (this.options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (this.options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeRetainRelease(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getAndFreeTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.drop(\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n      funcRef = module.getFunction(instance.internalName);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Not_implemented,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\n      statement = (<ExportDefaultStatement>statement).declaration;\n    }\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).internalPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).internalPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).internalPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough && !alwaysFalse) { // (4)\n      stmts.push(module.br(continueLabel, condExpr));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile incrementor\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getAndFreeTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = scopedLocals.get(name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                type.toNativeZero(module)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(tempIndex, expr),\n            module.local_get(tempIndex, type.toNativeType()),\n            module.unreachable()\n          );\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              module.local_get(tempLocal.index, leftType.toNativeType()),\n              rightExpr\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, (<Class>parent).internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>parent).internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\n        let tempLocalIndex = tempLocal.index;\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(tempLocalIndex, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(tempLocalIndex, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, parent.internalName\n          );\n          return module.unreachable();\n        }\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, parent.internalName\n          );\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        let targetType = (<Class>parent).type;\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempLocalTarget = flow.getTempLocal(targetType);\n          let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\n          let returnType = indexedGet.signature.returnType;\n          flow.freeTempLocal(tempLocalTarget);\n          return module.block(null, [\n            this.makeCallDirect(indexedSet, [\n              module.local_tee(tempLocalTarget.index, thisExpr),\n              module.local_tee(tempLocalElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(indexedGet, [\n              module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n              module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n        } else {\n          return this.makeCallDirect(indexedSet, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var type = local.type;\n    assert(type != Type.void);\n    var flow = this.currentFlow;\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let module = this.module;\n      let nativeType = type.toNativeType();\n\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        if (this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeSkippedRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __skippedRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __skippedRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        } else {\n          valueExpr = this.makeRetainRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __retainRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __retainRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // TEE(local = __retain(value, local))\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // local = __retain(value, local)\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // TEE(local = value)\n        this.currentType = type;\n        return this.module.local_tee(localIndex, valueExpr);\n      } else { // local = value\n        this.currentType = Type.void;\n        return this.module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // (global = __skippedRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeSkippedRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __skippedRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeSkippedRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      } else {\n        if (tee) { // (global = __retainRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeRetainRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __retainRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeRetainRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeSkippedRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr), // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeSkippedRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr, // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      } else {\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeRetainRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr) // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeRetainRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      }\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        this.currentType = fieldType;\n        return module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(tempValue.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.unreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let contextualTypeArguments = makeMap<string,Type>(flow.contextualTypeArguments);\n\n          // fill up contextual types with auto for each generic component\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          let typeParameterNames = new Set<string>();\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let name = typeParameterNodes[i].name.text;\n            contextualTypeArguments.set(name, Type.auto);\n            typeParameterNames.add(name);\n          }\n\n          let parameterNodes = prototype.functionTypeNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n\n          // infer types with generic components while updating contextual types\n          for (let i = 0; i < numParameters; ++i) {\n            let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.unreachable();\n            }\n            let typeNode = parameterNodes[i].type;\n            if (typeNode.hasGenericComponent(typeParameterNodes)) {\n              this.resolver.inferGenericType(typeNode, argumentExpression, flow, contextualTypeArguments, typeParameterNames);\n            }\n          }\n\n          // apply concrete types to the generic function signature\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let name = typeParameterNodes[i].name.text;\n            if (contextualTypeArguments.has(name)) {\n              let inferredType = contextualTypeArguments.get(name)!;\n              if (inferredType != Type.auto) {\n                resolvedTypeArguments[i] = inferredType;\n                continue;\n              }\n            }\n            // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n            // invalid because the type is effectively unknown inside the function body\n            this.error(\n              DiagnosticCode.Type_argument_expected,\n              expression.expression.range.atEnd\n            );\n            return this.module.unreachable();\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.unreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    return compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        body.push(\n          module.local_set(argumentLocal.index,\n            this.makeRetain(initExpr)\n          )\n        );\n      } else {\n        body.push(\n          module.local_set(argumentLocal.index, initExpr)\n        );\n      }\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // if ((t1=newExpr) != (t2=oldExpr)) {\n    //   __retain(t1);\n    //   __release(t2);\n    // }, t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\n    flow.freeTempLocal(temp1);\n    return module.block(null, [\n      module.if(\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n          module.local_tee(temp1.index, newExpr),\n          module.local_tee(temp2.index, oldExpr)\n        ),\n        module.block(null, [\n          module.drop(\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n          ),\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n        ])\n      ),\n      module.local_get(temp1.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // TODO: this helper can be eliminated altogether if the current logic holds\n    // (t1=newExpr), __release(oldExpr), t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\n    return module.block(null, [\n      module.local_set(temp.index, newExpr),\n      this.makeRelease(oldExpr),\n      module.local_get(temp.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getAndFreeTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      return module.block(null, stmts, nativeType);\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        if (this.currentType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(parameterTypes[i].toNativeZero(module));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        let classReference = contextualType.classReference;\n        if (contextualType.is(TypeFlags.REFERENCE) && classReference !== null) {\n          this.currentType = classReference.type.asNullable();\n        } else {\n          this.currentType = options.usizeType; // TODO: anyref context yields <usize>0\n        }\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          actualType.toNativeZero(module)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n          expression.range, \"T\"\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : elementType.toNativeZero(module);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.lookupExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\n        }\n        assert((<EnumValue>target).type == Type.i32);\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.compileFunctionUsingTypeArguments(\n            prototype,\n            [],\n            makeMap<string,Type>(),\n            expression,\n          );\n          if (instance == null) {\n            return module.unreachable();\n          } else {\n            this.currentType = instance.type;\n            return module.i32(this.ensureFunctionTableEntry(instance));\n          }\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking left type\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, ctxType)\n        : this.compileExpression(ifElse, ctxType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.unary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.unary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\n      }\n      // case TypeKind.ANYREF: {\n      //   TODO: ref.is_null\n      // }\n      default: {\n        assert(false);\n        return module.i32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\n      }\n      // case TypeKind.ANYREF: {\n      //   TODO: !ref.is_null\n      // }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      if (initializerNode) { // use initializer\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n      } else { // initialize with zero\n        initExpr = fieldType.toNativeZero(module);\n      }\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          let stringInstance = compiler.program.stringInstance;\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.isArrayLike ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.lookupExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.isVoid: { // isVoid<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinSymbols.lengthof: { // lengthof<T!>() -> i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, type.toString()\n        );\n        return module.unreachable();\n      }\n      return module.i32(signatureReference.parameterTypes.length);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!byteSize) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(byteSize);\n        }\n        return module.i64(byteSize, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(byteSize, 0);\n        }\n        return module.i32(byteSize);\n      }\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!isPowerOf2(byteSize)) { // implies == 0\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"alignof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let alignLog2 = ctz<i32>(byteSize);\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(alignLog2);\n        }\n        return module.i64(alignLog2, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(alignLog2, 0);\n        }\n        return module.i32(alignLog2);\n      }\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let classType = type.classReference;\n      if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n        );\n        if (compiler.options.isWasm64) {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n            compiler.currentType = Type.u32;\n          }\n        } else {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n            compiler.currentType = Type.u64;\n          }\n        }\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        }\n        return module.i64(offset);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        }\n        return module.i32(offset);\n      }\n    }\n    case BuiltinSymbols.nameof: {\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) {\n        compiler.currentType = compiler.program.stringInstance.type;\n        return module.unreachable();\n      }\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (classReference) {\n          value = classReference.name;\n        } else {\n          let signatureReference = resultType.signatureReference;\n          if (signatureReference) {\n            value = \"Function\";\n          } else {\n            value = \"Anyref\";\n          }\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          case TypeKind.ANYREF: { value = \"anyref\"; break; }\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"clz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ctz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (compiler.currentType.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotlI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotlI64\n                : BinaryOp.RotlI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotrI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotrI64\n                : BinaryOp.RotrI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            let flow = compiler.currentFlow;\n\n            // possibly overflows, e.g. abs<i8>(-128) == 128\n            let tempLocal1 = flow.getTempLocal(Type.i32);\n            let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\n            let tempLocalIndex1 = tempLocal1.index;\n            flow.freeTempLocal(tempLocal1);\n\n            // (x + (x >> 31)) ^ (x >> 31)\n            return module.binary(BinaryOp.XorI32,\n              module.binary(BinaryOp.AddI32,\n                module.local_tee(\n                  tempLocalIndex2,\n                  module.binary(BinaryOp.ShrI32,\n                    module.local_tee(tempLocalIndex1, arg0),\n                    module.i32(31)\n                  )\n                ),\n                module.local_get(tempLocalIndex1, NativeType.I32)\n              ),\n              module.local_get(tempLocalIndex2, NativeType.I32)\n            );\n          }\n          case TypeKind.ISIZE: {\n            let options = compiler.options;\n            let flow = compiler.currentFlow;\n            let isWasm64 = options.isWasm64;\n\n            let tempLocal1 = flow.getTempLocal(options.usizeType);\n            let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\n            let tempLocalIndex1 = tempLocal1.index;\n            flow.freeTempLocal(tempLocal1);\n\n            return module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n              module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n                module.local_tee(\n                  tempLocalIndex2,\n                  module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                    module.local_tee(tempLocalIndex1, arg0),\n                    isWasm64 ? module.i64(63) : module.i32(31)\n                  )\n                ),\n                module.local_get(tempLocalIndex1, options.nativeSizeType)\n              ),\n              module.local_get(tempLocalIndex2, options.nativeSizeType)\n            );\n          }\n          case TypeKind.I64: {\n            let flow = compiler.currentFlow;\n\n            let tempLocal1 = flow.getTempLocal(Type.i64);\n            let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\n            let tempLocalIndex1 = tempLocal1.index;\n            flow.freeTempLocal(tempLocal1);\n\n            // (x + (x >> 63)) ^ (x >> 63)\n            return module.binary(BinaryOp.XorI64,\n              module.binary(BinaryOp.AddI64,\n                module.local_tee(\n                  tempLocalIndex2,\n                  module.binary(BinaryOp.ShrI64,\n                    module.local_tee(tempLocalIndex1, arg0),\n                    module.i64(63)\n                  )\n                ),\n                module.local_get(tempLocalIndex1, NativeType.I64)\n              ),\n              module.local_get(tempLocalIndex2, NativeType.I64)\n            );\n          }\n          case TypeKind.USIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n          case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n          case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtI64\n              : BinaryOp.GtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtU64\n              : BinaryOp.GtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let tempLocal0 = flow.getTempLocal(type);\n          flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n          let tempLocal1 = flow.getAndFreeTempLocal(type);\n          flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n          flow.freeTempLocal(tempLocal0);\n          return module.select(\n            module.local_tee(tempLocal0.index, arg0),\n            module.local_tee(tempLocal1.index, arg1),\n            module.binary(op,\n              module.local_get(tempLocal0.index, nativeType),\n              module.local_get(tempLocal1.index, nativeType)\n            )\n          );\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n          case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n          case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtI64\n              : BinaryOp.LtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtU64\n              : BinaryOp.LtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let tempLocal0 = flow.getTempLocal(type);\n          flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n          let tempLocal1 = flow.getAndFreeTempLocal(type);\n          flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n          flow.freeTempLocal(tempLocal0);\n          return module.select(\n            module.local_tee(tempLocal0.index, arg0),\n            module.local_tee(tempLocal1.index, arg1),\n            module.binary(op,\n              module.local_get(tempLocal0.index, nativeType),\n              module.local_get(tempLocal1.index, nativeType)\n            )\n          );\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ceil\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"floor\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          // TODO: does an integer version make sense?\n          case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"copysign\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"nearest\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF32, arg0);\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF64, arg0);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let arg0 = compiler.compileExpression(operands[0],\n              compiler.options.isWasm64\n                ? Type.f64\n                : Type.f32,\n              Constraints.CONV_IMPLICIT\n            );\n            compiler.currentType = type;\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ReinterpretF64\n                : UnaryOp.ReinterpretF32,\n              arg0\n            );\n          }\n          case TypeKind.F32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f32;\n            return module.unary(UnaryOp.ReinterpretI32, arg0);\n          }\n          case TypeKind.F64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f64;\n            return module.unary(UnaryOp.ReinterpretI64, arg0);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // TODO: integer versions (that return f64 or convert)?\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered truncated\n          case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"trunc\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n        );\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        let opName: string;\n        switch (prototype.internalName) {\n          default: assert(false);\n          case BuiltinSymbols.atomic_add: { opName = \"atomic.add\"; break; }\n          case BuiltinSymbols.atomic_sub: { opName = \"atomic.sub\"; break; }\n          case BuiltinSymbols.atomic_and: { opName = \"atomic.and\"; break; }\n          case BuiltinSymbols.atomic_or: { opName = \"atomic.or\"; break; }\n          case BuiltinSymbols.atomic_xor: { opName = \"atomic.xor\"; break; }\n          case BuiltinSymbols.atomic_xchg: { opName = \"atomic.xchg\"; break; }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, opName, type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n    case BuiltinSymbols.atomic_fence: { // fence() -> void\n      compiler.currentType = Type.void;\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.atomic_fence();\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"select\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.auto);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (!fromType.isChangeableTo(toType)) {\n        compiler.error(\n          DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n          reportNode.range, fromType.toString(), toType.toString()\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n          case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFlow;\n            let tempLocal = flow.getAndFreeTempLocal(type);\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            return module.if(\n              module.local_tee(tempLocal.index, arg0),\n              module.local_get(tempLocal.index, NativeType.I32),\n              abort\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\n            return module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.I64)\n            );\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\n            );\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\n            return module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(tempLocal.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F32)\n            );\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\n            return module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(tempLocal.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F64)\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.typeArgumentsRange\n      );\n      return abort;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void)\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct:\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_a_function_index_or_function_reference,\n          operands[0].range, arg0Type.toString()\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (prototype.internalName == BuiltinSymbols.call_direct) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let typeArgument = typeArguments![0];\n      let classInstance = typeArgument.classReference;\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n        compiler.error(\n          DiagnosticCode.This_expression_is_not_constructable,\n          reportNode.expression.range\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.SplatI64x2\n                : UnaryOp.SplatI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\n          case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\n          case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\n          case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_extract(\n              compiler.options.isWasm64\n                ? SIMDExtractOp.ExtractLaneI64x2\n                : SIMDExtractOp.ExtractLaneI32x4,\n              arg0, idx\n            );\n          }\n          case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\n          case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_replace(\n              compiler.options.isWasm64\n                ? SIMDReplaceOp.ReplaceLaneI64x2\n                : SIMDReplaceOp.ReplaceLaneI32x4,\n              arg0, idx, arg2\n            );\n          }\n          case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\n          case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let laneWidth = type.byteSize;\n        let laneCount = 16 / laneWidth;\n        assert(isInteger(laneCount) && isPowerOf2(laneCount));\n        if (\n          checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n        ) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n        let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            let mask = new Uint8Array(16);\n            let maxIdx = (laneCount << 1) - 1;\n            for (let i = 0; i < laneCount; ++i) {\n              let operand = operands[2 + i];\n              let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n              if (getExpressionId(argN) != ExpressionId.Const) {\n                compiler.error(\n                  DiagnosticCode.Expression_must_be_a_compile_time_constant,\n                  operand.range\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              assert(getExpressionType(argN) == NativeType.I32);\n              let idx = getConstValueI32(argN);\n              if (idx < 0 || idx > maxIdx) {\n                compiler.error(\n                  DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                  operand.range, \"Lane index\", \"0\", maxIdx.toString()\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              switch (laneWidth) {\n                case 1: {\n                  writeI8(idx, mask, i);\n                  break;\n                }\n                case 2: {\n                  let off8 = i << 1;\n                  let idx8 = idx << 1;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  break;\n                }\n                case 4: {\n                  let off8 = i << 2;\n                  let idx8 = idx << 2;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  break;\n                }\n                case 8: {\n                  let off8 = i << 3;\n                  let idx8 = idx << 3;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  writeI8(idx8 + 4, mask, off8 + 4);\n                  writeI8(idx8 + 5, mask, off8 + 5);\n                  writeI8(idx8 + 6, mask, off8 + 6);\n                  writeI8(idx8 + 7, mask, off8 + 7);\n                  break;\n                }\n                default: assert(false);\n              }\n            }\n            compiler.currentType = Type.v128;\n            return module.simd_shuffle(arg0, arg1, mask);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n      );\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add: { // add<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.AddI64x2\n                : BinaryOp.AddI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub: { // sub<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64x2\n                : BinaryOp.SubI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_mul: { // mul<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_div: { // div<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add_saturate: { // add_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub_saturate: { // sub_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_min: { // min<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_max: { // max<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_eq: { // eq<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ne: { // ne<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_lt: { // lt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_le: { // le<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_gt: { // gt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ge: { // ge<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_narrow: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_neg: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.NegI64x2\n                : UnaryOp.NegI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_abs: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sqrt: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_convert: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_trunc_sat: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_low: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_high: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shl: { // shl<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShlI64x2\n                : SIMDShiftOp.ShlI32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shr: { // shr<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n          case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n          case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n          case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n          case TypeKind.ISIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrI64x2\n                : SIMDShiftOp.ShrI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrU64x2\n                : SIMDShiftOp.ShrU32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_and: { // and(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_or: { // or(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.OrV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_xor: { // xor(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.XorV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // not(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotV128, arg0);\n    }\n    // case BuiltinSymbols.v128_andnot: { // andnot(a: v128, b: v128) -> v128\n    //   if (\n    //     checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n    //     checkTypeAbsent(typeArguments, reportNode, prototype) |\n    //     checkArgsRequired(operands, 2, reportNode, compiler)\n    //   ) {\n    //     compiler.currentType = Type.v128;\n    //     return module.unreachable();\n    //   }\n    //   let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    //   let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    //   return module.binary(BinaryOp.AndnotV128, arg0);\n    // }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: { // any_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AnyTrueI64x2\n                : UnaryOp.AnyTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_all_true: { // all_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AllTrueI64x2\n                : UnaryOp.AllTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfma: { // qfma(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          return module.i32(signatureReference.id);\n        }\n        let classReference = type.classReference;\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          return module.i32(classReference.id);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"idof\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    reportNode.expression.range\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n\n    case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n    case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n    case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = stringInstance.type.toNativeZero(module);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(\n  feature: Feature,\n  reportNode: Node,\n  compiler: Compiler\n): i32 {\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.This_expression_is_not_constructable,\n            operand.range\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: TypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false,\n  /** Parser reference. */\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(parser: Parser, file: string): string | null {\n  return parser.getDependee(file);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util/index\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}