{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\""],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA,qDAAqD,cAAc;;AAEnE;AACA;AACA,WAAW,EAAE;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa;AACb;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA,uBAAuB;;AAEvB;AACA,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,sBAAsB,8CAA8C;AAC/E,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,sBAAsB,8CAA8C;AAC/E,WAAW,SAAS;AACpB,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,gEAAgE,kBAAkB;AAClF,aAAa;AACb;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2EAA2E,kBAAkB;AAC7F;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,iFAAiF,qBAAqB;AACtG;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA,iFAAiF,qBAAqB;AACtG;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,iFAAiF,oBAAoB;AACrG;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,0FAA0F,2BAA2B;AACrH;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA,0FAA0F,2BAA2B;AACrH;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,oFAAoF,uBAAuB;AAC3G;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,6FAA6F,8BAA8B;AAC3H;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA,6FAA6F,8BAA8B;AAC3H;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yEAAyE,mBAAmB;AAC5F;AACA,WAAW,oBAAoB;AAC/B,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mDAAmD,kBAAkB;AACrE;AACA,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+EAA+E,oBAAoB;AACnG;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4EAA4E,oBAAoB;AAChG;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,mBAAmB;AAC1E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oEAAoE,kBAAkB;AACtF;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gEAAgE,kBAAkB;AAClF;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;;AAEA;AACA,gEAAgE,kBAAkB;AAClF;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6FAA6F,qBAAqB;AAClH;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6GAA6G,sBAAsB;AACnI;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA,wGAAwG,8BAA8B;AACtI;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA,wGAAwG,8BAA8B;AACtI;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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EA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,eAAe,6BAA6B;AAC5C,eAAe,6BAA6B;AAC5C;AACA;AACA,iBAAiB;AACjB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,8DAA8D,EAAE;AAChE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AC5UA,sD","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_binaryen__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    var self = <TypeNode>this; // TS otherwise complains\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      if (!(<NamedTypeNode>self).name.next) {\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = (<NamedTypeNode>self).name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\n    ) {\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\n      assert(nameStr.length);\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\n      assert(propStr.length);\n      // @operator.binary, @operator.prefix, @operator.postfix\n      if (nameStr == \"operator\") {\n        switch (propStr.charCodeAt(0)) {\n          case CharCode.b: {\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n            break;\n          }\n          case CharCode.p: {\n            switch (propStr) {\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Checks if the given node represents a numeric (float or integer) literal. */\nexport function isNumericLiteral(node: Expression): bool {\n  if (node.kind == NodeKind.LITERAL) {\n    switch ((<LiteralExpression>node).literalKind) {\n      case LiteralKind.FLOAT:\n      case LiteralKind.INTEGER: return true;\n    }\n  }\n  return false;\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression,\n  isNumericLiteral\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          let stringInstance = compiler.program.stringInstance;\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.isArrayLike ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.lookupExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.isVoid: { // isVoid<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinSymbols.lengthof: { // lengthof<T!>() -> i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, type.toString()\n        );\n        return module.unreachable();\n      }\n      return module.i32(signatureReference.parameterTypes.length);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!byteSize) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(byteSize);\n        }\n        return module.i64(byteSize, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(byteSize, 0);\n        }\n        return module.i32(byteSize);\n      }\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!isPowerOf2(byteSize)) { // implies == 0\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"alignof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let alignLog2 = ctz<i32>(byteSize);\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(alignLog2);\n        }\n        return module.i64(alignLog2, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(alignLog2, 0);\n        }\n        return module.i32(alignLog2);\n      }\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let classType = type.classReference;\n      if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n        );\n        if (compiler.options.isWasm64) {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n            compiler.currentType = Type.u32;\n          }\n        } else {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n            compiler.currentType = Type.u64;\n          }\n        }\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        }\n        return module.i64(offset);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        }\n        return module.i32(offset);\n      }\n    }\n    case BuiltinSymbols.nameof: {\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) {\n        compiler.currentType = compiler.program.stringInstance.type;\n        return module.unreachable();\n      }\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (classReference) {\n          value = classReference.name;\n        } else {\n          let signatureReference = resultType.signatureReference;\n          if (signatureReference) {\n            value = \"Function\";\n          } else {\n            value = \"Anyref\";\n          }\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          case TypeKind.ANYREF: { value = \"anyref\"; break; }\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"clz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ctz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (compiler.currentType.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotlI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotlI64\n                : BinaryOp.RotlI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotrI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotrI64\n                : BinaryOp.RotrI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            let flow = compiler.currentFlow;\n\n            // possibly overflows, e.g. abs<i8>(-128) == 128\n            let temp1 = flow.getTempLocal(Type.i32);\n            let temp2 = flow.getTempLocal(Type.i32);\n            // (x + (x >> 31)) ^ (x >> 31)\n            let ret = module.binary(BinaryOp.XorI32,\n              module.binary(BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I32)\n              ),\n              module.local_get(temp2.index, NativeType.I32)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.ISIZE: {\n            let options = compiler.options;\n            let flow = compiler.currentFlow;\n            let isWasm64 = options.isWasm64;\n\n            let temp1 = flow.getTempLocal(options.usizeType);\n            let temp2 = flow.getTempLocal(options.usizeType);\n            let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n              module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    isWasm64 ? module.i64(63) : module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, options.nativeSizeType)\n              ),\n              module.local_get(temp2.index, options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.I64: {\n            let flow = compiler.currentFlow;\n\n            let temp1 = flow.getTempLocal(Type.i64);\n            let temp2 = flow.getTempLocal(Type.i64);\n            // (x + (x >> 63)) ^ (x >> 63)\n            let ret = module.binary(BinaryOp.XorI64,\n              module.binary(BinaryOp.AddI64,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI64,\n                    module.local_tee(temp1.index, arg0),\n                    module.i64(63)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I64)\n              ),\n              module.local_get(temp2.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n          case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n          case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtI64\n              : BinaryOp.GtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtU64\n              : BinaryOp.GtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n          case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n          case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtI64\n              : BinaryOp.LtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtU64\n              : BinaryOp.LtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ceil\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"floor\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          // TODO: does an integer version make sense?\n          case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"copysign\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"nearest\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF32, arg0);\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF64, arg0);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let arg0 = compiler.compileExpression(operands[0],\n              compiler.options.isWasm64\n                ? Type.f64\n                : Type.f32,\n              Constraints.CONV_IMPLICIT\n            );\n            compiler.currentType = type;\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ReinterpretF64\n                : UnaryOp.ReinterpretF32,\n              arg0\n            );\n          }\n          case TypeKind.F32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f32;\n            return module.unary(UnaryOp.ReinterpretI32, arg0);\n          }\n          case TypeKind.F64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f64;\n            return module.unary(UnaryOp.ReinterpretI64, arg0);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // TODO: integer versions (that return f64 or convert)?\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered truncated\n          case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"trunc\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n        );\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        let opName: string;\n        switch (prototype.internalName) {\n          default: assert(false);\n          case BuiltinSymbols.atomic_add: { opName = \"atomic.add\"; break; }\n          case BuiltinSymbols.atomic_sub: { opName = \"atomic.sub\"; break; }\n          case BuiltinSymbols.atomic_and: { opName = \"atomic.and\"; break; }\n          case BuiltinSymbols.atomic_or: { opName = \"atomic.or\"; break; }\n          case BuiltinSymbols.atomic_xor: { opName = \"atomic.xor\"; break; }\n          case BuiltinSymbols.atomic_xchg: { opName = \"atomic.xchg\"; break; }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, opName, type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n    case BuiltinSymbols.atomic_fence: { // fence() -> void\n      compiler.currentType = Type.void;\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.atomic_fence();\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"select\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.auto);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (!fromType.isChangeableTo(toType)) {\n        compiler.error(\n          DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n          reportNode.range, fromType.toString(), toType.toString()\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n          case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        let flow = compiler.currentFlow;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let temp = flow.getTempLocal(type);\n            flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            let ret = module.if(\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.I32),\n              abort\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let temp = flow.getTempLocal(Type.i64);\n            let ret = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let temp = flow.getTempLocal(compiler.options.usizeType);\n            let ret = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, compiler.options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F32: {\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(temp.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(temp.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.typeArgumentsRange\n      );\n      return abort;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void)\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct:\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_a_function_index_or_function_reference,\n          operands[0].range, arg0Type.toString()\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (prototype.internalName == BuiltinSymbols.call_direct) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let typeArgument = typeArguments![0];\n      let classInstance = typeArgument.classReference;\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n        compiler.error(\n          DiagnosticCode.This_expression_is_not_constructable,\n          reportNode.expression.range\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.SplatI64x2\n                : UnaryOp.SplatI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\n          case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\n          case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\n          case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_extract(\n              compiler.options.isWasm64\n                ? SIMDExtractOp.ExtractLaneI64x2\n                : SIMDExtractOp.ExtractLaneI32x4,\n              arg0, idx\n            );\n          }\n          case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\n          case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_replace(\n              compiler.options.isWasm64\n                ? SIMDReplaceOp.ReplaceLaneI64x2\n                : SIMDReplaceOp.ReplaceLaneI32x4,\n              arg0, idx, arg2\n            );\n          }\n          case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\n          case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let laneWidth = type.byteSize;\n        let laneCount = 16 / laneWidth;\n        assert(isInteger(laneCount) && isPowerOf2(laneCount));\n        if (\n          checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n        ) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n        let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            let mask = new Uint8Array(16);\n            let maxIdx = (laneCount << 1) - 1;\n            for (let i = 0; i < laneCount; ++i) {\n              let operand = operands[2 + i];\n              let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n              if (getExpressionId(argN) != ExpressionId.Const) {\n                compiler.error(\n                  DiagnosticCode.Expression_must_be_a_compile_time_constant,\n                  operand.range\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              assert(getExpressionType(argN) == NativeType.I32);\n              let idx = getConstValueI32(argN);\n              if (idx < 0 || idx > maxIdx) {\n                compiler.error(\n                  DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                  operand.range, \"Lane index\", \"0\", maxIdx.toString()\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              switch (laneWidth) {\n                case 1: {\n                  writeI8(idx, mask, i);\n                  break;\n                }\n                case 2: {\n                  let off8 = i << 1;\n                  let idx8 = idx << 1;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  break;\n                }\n                case 4: {\n                  let off8 = i << 2;\n                  let idx8 = idx << 2;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  break;\n                }\n                case 8: {\n                  let off8 = i << 3;\n                  let idx8 = idx << 3;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  writeI8(idx8 + 4, mask, off8 + 4);\n                  writeI8(idx8 + 5, mask, off8 + 5);\n                  writeI8(idx8 + 6, mask, off8 + 6);\n                  writeI8(idx8 + 7, mask, off8 + 7);\n                  break;\n                }\n                default: assert(false);\n              }\n            }\n            compiler.currentType = Type.v128;\n            return module.simd_shuffle(arg0, arg1, mask);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n      );\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_swizzle: { // swizzle(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_load_splat: { // load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I16:\n          case TypeKind.U16: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          case TypeKind.F32: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n            }\n            // fall-through\n          }\n          case TypeKind.I64:\n          case TypeKind.U64:\n          case TypeKind.F64: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_load_ext: { // load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n          case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n          case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n          case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add: { // add<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.AddI64x2\n                : BinaryOp.AddI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub: { // sub<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64x2\n                : BinaryOp.SubI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_mul: { // mul<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_div: { // div<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add_saturate: { // add_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub_saturate: { // sub_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_min: { // min<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_max: { // max<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_dot: { // dot<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_eq: { // eq<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ne: { // ne<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_lt: { // lt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_le: { // le<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_gt: { // gt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ge: { // ge<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_narrow: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_neg: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.NegI64x2\n                : UnaryOp.NegI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_abs: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sqrt: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_convert: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_trunc_sat: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_low: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_high: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shl: { // shl<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShlI64x2\n                : SIMDShiftOp.ShlI32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shr: { // shr<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n          case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n          case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n          case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n          case TypeKind.ISIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrI64x2\n                : SIMDShiftOp.ShrI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrU64x2\n                : SIMDShiftOp.ShrU32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_and: { // and(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_or: { // or(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.OrV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_xor: { // xor(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.XorV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_andnot: { // andnot(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndNotV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // not(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotV128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: { // any_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AnyTrueI64x2\n                : UnaryOp.AnyTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_all_true: { // all_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AllTrueI64x2\n                : UnaryOp.AllTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfma: { // qfma(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          return module.i32(signatureReference.id);\n        }\n        let classReference = type.classReference;\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          return module.i32(classReference.id);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"idof\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n    case BuiltinSymbols.isNaN: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // never NaN\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(0)\n                ], NativeType.I32)\n              : module.i32(0);\n          }\n          // (t = arg0) != t\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF32,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.NeF32,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF64,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.NeF64,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.isFinite: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // always finite\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(1)\n                ], NativeType.I32)\n              : module.i32(1);\n          }\n          // (t = arg0) - t == 0\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF32,\n                module.binary(BinaryOp.SubF32,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n                ),\n                module.f32(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.EqF32,\n              module.binary(BinaryOp.SubF32,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F32)\n              ),\n              module.f32(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF64,\n                module.binary(BinaryOp.SubF64,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n                ),\n                module.f64(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.EqF64,\n              module.binary(BinaryOp.SubF64,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F64)\n              ),\n              module.f64(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n      );\n      return module.unreachable();\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    reportNode.expression.range\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n\n    case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n    case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n    case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u8, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_dot_i16x8_s: return deferASM(BuiltinSymbols.v128_dot, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_swizzle: return deferASM(BuiltinSymbols.v128_swizzle, compiler, null, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v16x8_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v32x4_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v64x2_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u64, operands, Type.v128, reportNode);\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    typeArgument ? [ typeArgument ] : null,\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = stringInstance.type.toNativeZero(module);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(\n  feature: Feature,\n  reportNode: Node,\n  compiler: Compiler\n): i32 {\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  FeatureFlags,\n  needsExplicitUnreachable,\n  getLocalSetValue\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement,\n  SourceKind\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (this.options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (this.options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (this.options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable, module.i32(0));\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeRetainRelease(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.drop(\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED | LocalFlags.PARAMETER);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n      funcRef = module.getFunction(instance.internalName);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Not_implemented,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let element = this.program.getElementByDeclaration(<NamespaceDeclaration>statement);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = (<NamespaceDeclaration>statement).members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).internalPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).internalPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).internalPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    // Compile the condition before the body in order to...\n    var condFlow = outerFlow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    assert(!condFlow.hasScopedLocals);\n    // ...unify local states before and after the condition has been executed the first time\n    innerFlow.unifyLocalFlags(condFlow);\n    this.currentFlow = innerFlow;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) {\n      this.performAutoreleases(innerFlow, stmts);\n      if (!alwaysFalse) { // (4)\n        stmts.push(module.br(continueLabel, condExpr));\n      }\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile the incrementor before the body in order to...\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) {\n      let incrFlow = innerFlow.fork();\n      this.currentFlow = incrFlow;\n      incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n      assert(!incrFlow.hasScopedLocals);\n      this.currentFlow = innerFlow;\n      // ...unify local states before and after the incrementor has been executed the first time\n      innerFlow.unifyLocalFlags(incrFlow);\n    }\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var bodyFlow = innerFlow.fork();\n    this.currentFlow = bodyFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; bodyFlow.breakLabel = breakLabel;\n    bodyFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    bodyFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = bodyFlow.is(FlowFlags.TERMINATES);\n    var continues = bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    // Finalize body flow\n    if (fallsThrough) this.performAutoreleases(bodyFlow, stmts);\n    bodyFlow.freeScopedLocals();\n    innerFlow.inherit(bodyFlow);\n    this.currentFlow = innerFlow;\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            let index = getLocalGetIndex(expr);\n            if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n              flow.setLocalFlag(index, LocalFlags.RETURNED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = scopedLocals.get(name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                type.toNativeZero(module)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(type);\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(temp.index, expr),\n            module.local_get(temp.index, type.toNativeType()),\n            module.unreachable()\n          );\n          flow.freeTempLocal(temp);\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n            flow.freeTempLocal(tempLocal);\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let temp = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n              module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            flow.freeTempLocal(temp);\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, (<Class>parent).internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>parent).internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, parent.internalName\n          );\n          return module.unreachable();\n        }\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, parent.internalName\n          );\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        let targetType = (<Class>parent).type;\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(targetType);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = indexedGet.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(indexedSet, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(indexedGet, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(indexedSet, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var type = local.type;\n    assert(type != Type.void);\n    var flow = this.currentFlow;\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let module = this.module;\n      let nativeType = type.toNativeType();\n\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        if (this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeSkippedRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __skippedRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __skippedRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        } else {\n          valueExpr = this.makeRetainRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __retainRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __retainRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // TEE(local = __retain(value, local))\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // local = __retain(value, local)\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // TEE(local = value)\n        this.currentType = type;\n        return this.module.local_tee(localIndex, valueExpr);\n      } else { // local = value\n        this.currentType = Type.void;\n        return this.module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // (global = __skippedRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeSkippedRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __skippedRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeSkippedRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      } else {\n        if (tee) { // (global = __retainRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeRetainRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __retainRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeRetainRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          let ret = module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeSkippedRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr), // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n          flow.freeTempLocal(tempValue);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return ret;\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeSkippedRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr, // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      } else {\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          let ret = module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeRetainRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr) // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n          flow.freeTempLocal(tempValue);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return ret;\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeRetainRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      }\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(tempValue.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression;\n        let instance = this.resolver.maybeInferCall(expression, prototype, flow);\n        if (!instance) return this.module.unreachable();\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          instance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    return compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // if ((t1=newExpr) != (t2=oldExpr)) {\n    //   __retain(t1);\n    //   __release(t2);\n    // }, t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var temp2 = flow.getTempLocal(usizeType);\n    var ret = module.block(null, [\n      module.if(\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n          module.local_tee(temp1.index, newExpr),\n          module.local_tee(temp2.index, oldExpr)\n        ),\n        module.block(null, [\n          module.drop(\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n          ),\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n        ])\n      ),\n      module.local_get(temp1.index, nativeSizeType)\n    ], nativeSizeType);\n    flow.freeTempLocal(temp2);\n    flow.freeTempLocal(temp1);\n    return ret;\n  }\n\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // TODO: this helper can be eliminated altogether if the current logic holds\n    // (t1=newExpr), __release(oldExpr), t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var ret = module.block(null, [\n      module.local_set(temp.index, newExpr),\n      this.makeRelease(oldExpr),\n      module.local_get(temp.index, nativeSizeType)\n    ], nativeSizeType);\n    flow.freeTempLocal(temp);\n    return ret;\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.block(null, stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        if (this.currentType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(parameterTypes[i].toNativeZero(module));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          // TODO: anyref context yields <usize>0\n        }\n        this.currentType = options.usizeType;\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      this.currentParent || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        if (target.parent != flow.parentFunction) {\n          // Closures are not yet supported\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          this.currentType = type;\n          return module.unreachable();\n        }\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          actualType.toNativeZero(module)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n          expression.range, \"T\"\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : elementType.toNativeZero(module);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.lookupExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\n        }\n        assert((<EnumValue>target).type == Type.i32);\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.compileFunctionUsingTypeArguments(\n            prototype,\n            [],\n            makeMap<string,Type>(),\n            expression,\n          );\n          if (instance == null) {\n            return module.unreachable();\n          } else {\n            this.currentType = instance.type;\n            return module.i32(this.ensureFunctionTableEntry(instance));\n          }\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking left type\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, ctxType)\n        : this.compileExpression(ifElse, ctxType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      // case TypeKind.ANYREF: {\n      //   TODO: !ref.is_null\n      // }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      if (initializerNode) { // use initializer\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n      } else { // initialize with zero\n        initExpr = fieldType.toNativeZero(module);\n      }\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString(10));\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is a function parameter. */\n  PARAMETER = 1 << 1,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 2,\n  /** Local is non-null. */\n  NONNULL = 1 << 3,\n  /** Local is read from. */\n  READFROM = 1 << 4,\n  /** Local is written to. */\n  WRITTENTO = 1 << 5,\n  /** Local is retained. */\n  RETAINED = 1 << 6,\n  /** Local is returned. */\n  RETURNED = 1 << 7,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 8,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 9,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 10,\n  /** Local is conditionally returned. */\n  CONDITIONALLY_RETURNED = 1 << 11,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | PARAMETER\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED\n                  | RETURNED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED\n                  | CONDITIONALLY_RETURNED,\n\n  /** Any written to flag. */\n  ANY_WRITTENTO = WRITTENTO\n                | CONDITIONALLY_WRITTENTO,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED,\n\n  /** Any returned flag. */\n  ANY_RETURNED = RETURNED\n               | CONDITIONALLY_RETURNED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop()!;\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      case NativeType.Anyref: {\n        temps = parentFunction.tempAnyrefs || (parentFunction.tempAnyrefs = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name)!;\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name)!;\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name)!;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    this.set(other.flags & FlowFlags.ANY_CONDITIONAL);\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      this.setLocalFlag(i, flags & LocalFlags.ANY_CONDITIONAL);\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n      if (flags & LocalFlags.RETURNED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETURNED);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr)))!);\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false,\n  /** Parser reference. */\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(parser: Parser, file: string): string | null {\n  return parser.getDependee(file);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util/index\";\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Anyref = _BinaryenTypeAnyref(),\n  Exnref = _BinaryenTypeExnref(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  MVP = _BinaryenFeatureMVP(),\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling(),\n  TailCall = _BinaryenFeatureTailCall(),\n  ReferenceTypes = _BinaryenFeatureReferenceTypes(),\n  All = _BinaryenFeatureAll()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  AtomicFence = _BinaryenAtomicFenceId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDTernary = _BinaryenSIMDTernaryId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  SIMDLoad = _BinaryenSIMDLoadId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId(),\n  Try = _BinaryenTryId(),\n  Throw = _BinaryenThrowId(),\n  Rethrow = _BinaryenRethrowId(),\n  BrOnExn = _BinaryenBrOnExnId(),\n  Push = _BinaryenPushId(),\n  Pop = _BinaryenPopId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = _BinaryenTruncSatSFloat32ToInt32(),\n  TruncF32ToU32Sat = _BinaryenTruncSatUFloat32ToInt32(),\n  TruncF64ToI32Sat = _BinaryenTruncSatSFloat64ToInt32(),\n  TruncF64ToU32Sat = _BinaryenTruncSatUFloat64ToInt32(),\n  TruncF32ToI64Sat = _BinaryenTruncSatSFloat32ToInt64(),\n  TruncF32ToU64Sat = _BinaryenTruncSatUFloat32ToInt64(),\n  TruncF64ToI64Sat = _BinaryenTruncSatSFloat64ToInt64(),\n  TruncF64ToU64Sat = _BinaryenTruncSatUFloat64ToInt64(),\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = _BinaryenSplatVecI8x16(),\n  SplatI16x8 = _BinaryenSplatVecI16x8(),\n  SplatI32x4 = _BinaryenSplatVecI32x4(),\n  SplatI64x2 = _BinaryenSplatVecI64x2(),\n  SplatF32x4 = _BinaryenSplatVecF32x4(),\n  SplatF64x2 = _BinaryenSplatVecF64x2(),\n  NotV128 = _BinaryenNotVec128(),\n  NegI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsF32x4 = _BinaryenAbsVecF32x4(),\n  NegF32x4 = _BinaryenNegVecF32x4(),\n  SqrtF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsF64x2 = _BinaryenAbsVecF64x2(),\n  NegF64x2 = _BinaryenNegVecF64x2(),\n  SqrtF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatF32x4ToI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatF32x4ToU32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatF64x2ToI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatF64x2ToU64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertI32x4ToF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertU32x4ToF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertI64x2ToF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertU64x2ToF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\n  WidenLowI8x16ToI16x8 = _BinaryenWidenLowSVecI8x16ToVecI16x8(),\n  WidenLowU8x16ToU16x8 = _BinaryenWidenLowUVecI8x16ToVecI16x8(),\n  WidenHighI8x16ToI16x8 = _BinaryenWidenHighSVecI8x16ToVecI16x8(),\n  WidenHighU8x16ToU16x8 = _BinaryenWidenHighUVecI8x16ToVecI16x8(),\n  WidenLowI16x8ToI32x4 = _BinaryenWidenLowSVecI16x8ToVecI32x4(),\n  WidenLowU16x8ToU32x4 = _BinaryenWidenLowUVecI16x8ToVecI32x4(),\n  WidenHighI16x8ToI32x4 = _BinaryenWidenHighSVecI16x8ToVecI32x4(),\n  WidenHighU16x8ToU32x4 = _BinaryenWidenHighUVecI16x8ToVecI32x4()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = _BinaryenEqVecI8x16(),\n  NeI8x16 = _BinaryenNeVecI8x16(),\n  LtI8x16 = _BinaryenLtSVecI8x16(),\n  LtU8x16 = _BinaryenLtUVecI8x16(),\n  LeI8x16 = _BinaryenLeSVecI8x16(),\n  LeU8x16 = _BinaryenLeUVecI8x16(),\n  GtI8x16 = _BinaryenGtSVecI8x16(),\n  GtU8x16 = _BinaryenGtUVecI8x16(),\n  GeI8x16 = _BinaryenGeSVecI8x16(),\n  GeU8x16 = _BinaryenGeUVecI8x16(),\n  EqI16x8 = _BinaryenEqVecI16x8(),\n  NeI16x8 = _BinaryenNeVecI16x8(),\n  LtI16x8 = _BinaryenLtSVecI16x8(),\n  LtU16x8 = _BinaryenLtUVecI16x8(),\n  LeI16x8 = _BinaryenLeSVecI16x8(),\n  LeU16x8 = _BinaryenLeUVecI16x8(),\n  GtI16x8 = _BinaryenGtSVecI16x8(),\n  GtU16x8 = _BinaryenGtUVecI16x8(),\n  GeI16x8 = _BinaryenGeSVecI16x8(),\n  GeU16x8 = _BinaryenGeUVecI16x8(),\n  EqI32x4 = _BinaryenEqVecI32x4(),\n  NeI32x4 = _BinaryenNeVecI32x4(),\n  LtI32x4 = _BinaryenLtSVecI32x4(),\n  LtU32x4 = _BinaryenLtUVecI32x4(),\n  LeI32x4 = _BinaryenLeSVecI32x4(),\n  LeU32x4 = _BinaryenLeUVecI32x4(),\n  GtI32x4 = _BinaryenGtSVecI32x4(),\n  GtU32x4 = _BinaryenGtUVecI32x4(),\n  GeI32x4 = _BinaryenGeSVecI32x4(),\n  GeU32x4 = _BinaryenGeUVecI32x4(),\n  EqF32x4 = _BinaryenEqVecF32x4(),\n  NeF32x4 = _BinaryenNeVecF32x4(),\n  LtF32x4 = _BinaryenLtVecF32x4(),\n  LeF32x4 = _BinaryenLeVecF32x4(),\n  GtF32x4 = _BinaryenGtVecF32x4(),\n  GeF32x4 = _BinaryenGeVecF32x4(),\n  EqF64x2 = _BinaryenEqVecF64x2(),\n  NeF64x2 = _BinaryenNeVecF64x2(),\n  LtF64x2 = _BinaryenLtVecF64x2(),\n  LeF64x2 = _BinaryenLeVecF64x2(),\n  GtF64x2 = _BinaryenGtVecF64x2(),\n  GeF64x2 = _BinaryenGeVecF64x2(),\n  AndV128 = _BinaryenAndVec128(),\n  OrV128 = _BinaryenOrVec128(),\n  XorV128 = _BinaryenXorVec128(),\n  AndNotV128 = _BinaryenAndNotVec128(),\n  AddI8x16 = _BinaryenAddVecI8x16(),\n  AddSatI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatU8x16 = _BinaryenAddSatUVecI8x16(),\n  SubI8x16 = _BinaryenSubVecI8x16(),\n  SubSatI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatU8x16 = _BinaryenSubSatUVecI8x16(),\n  MulI8x16 = _BinaryenMulVecI8x16(),\n  MinI8x16 = _BinaryenMinSVecI8x16(),\n  MinU8x16 = _BinaryenMinUVecI8x16(),\n  MaxI8x16 = _BinaryenMaxSVecI8x16(),\n  MaxU8x16 = _BinaryenMaxUVecI8x16(),\n  AddI16x8 = _BinaryenAddVecI16x8(),\n  AddSatI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatU16x8 = _BinaryenAddSatUVecI16x8(),\n  SubI16x8 = _BinaryenSubVecI16x8(),\n  SubSatI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatU16x8 = _BinaryenSubSatUVecI16x8(),\n  MulI16x8 = _BinaryenMulVecI16x8(),\n  MinI16x8 = _BinaryenMinSVecI16x8(),\n  MinU16x8 = _BinaryenMinUVecI16x8(),\n  MaxI16x8 = _BinaryenMaxSVecI16x8(),\n  MaxU16x8 = _BinaryenMaxUVecI16x8(),\n  AddI32x4 = _BinaryenAddVecI32x4(),\n  SubI32x4 = _BinaryenSubVecI32x4(),\n  MulI32x4 = _BinaryenMulVecI32x4(),\n  MinI32x4 = _BinaryenMinSVecI32x4(),\n  MinU32x4 = _BinaryenMinUVecI32x4(),\n  MaxI32x4 = _BinaryenMaxSVecI32x4(),\n  MaxU32x4 = _BinaryenMaxUVecI32x4(),\n  DotI16x8 = _BinaryenDotSVecI16x8ToVecI32x4(),\n  AddI64x2 = _BinaryenAddVecI64x2(),\n  SubI64x2 = _BinaryenSubVecI64x2(),\n  AddF32x4 = _BinaryenAddVecF32x4(),\n  SubF32x4 = _BinaryenSubVecF32x4(),\n  MulF32x4 = _BinaryenMulVecF32x4(),\n  DivF32x4 = _BinaryenDivVecF32x4(),\n  MinF32x4 = _BinaryenMinVecF32x4(),\n  MaxF32x4 = _BinaryenMaxVecF32x4(),\n  AddF64x2 = _BinaryenAddVecF64x2(),\n  SubF64x2 = _BinaryenSubVecF64x2(),\n  MulF64x2 = _BinaryenMulVecF64x2(),\n  DivF64x2 = _BinaryenDivVecF64x2(),\n  MinF64x2 = _BinaryenMinVecF64x2(),\n  MaxF64x2 = _BinaryenMaxVecF64x2(),\n  NarrowI16x8ToI8x16 = _BinaryenNarrowSVecI16x8ToVecI8x16(),\n  NarrowU16x8ToU8x16 = _BinaryenNarrowUVecI16x8ToVecI8x16(),\n  NarrowI32x4ToI16x8 = _BinaryenNarrowSVecI32x4ToVecI16x8(),\n  NarrowU32x4ToU16x8 = _BinaryenNarrowUVecI32x4ToVecI16x8(),\n  SwizzleV8x16 = _BinaryenSwizzleVec8x16()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneU8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneU16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = _BinaryenShlVecI8x16(),\n  ShrI8x16 = _BinaryenShrSVecI8x16(),\n  ShrU8x16 = _BinaryenShrUVecI8x16(),\n  ShlI16x8 = _BinaryenShlVecI16x8(),\n  ShrI16x8 = _BinaryenShrSVecI16x8(),\n  ShrU16x8 = _BinaryenShrUVecI16x8(),\n  ShlI32x4 = _BinaryenShlVecI32x4(),\n  ShrI32x4 = _BinaryenShrSVecI32x4(),\n  ShrU32x4 = _BinaryenShrUVecI32x4(),\n  ShlI64x2 = _BinaryenShlVecI64x2(),\n  ShrI64x2 = _BinaryenShrSVecI64x2(),\n  ShrU64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = _BinaryenBitselectVec128(),\n  QFMAF32x4 = _BinaryenQFMAVecF32x4(),\n  QFMSF32x4 = _BinaryenQFMSVecF32x4(),\n  QFMAF64x2 = _BinaryenQFMAVecF64x2(),\n  QFMSF64x2 = _BinaryenQFMSVecF64x2()\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = _BinaryenLoadSplatVec8x16(),\n  LoadSplatV16x8 = _BinaryenLoadSplatVec16x8(),\n  LoadSplatV32x4 = _BinaryenLoadSplatVec32x4(),\n  LoadSplatV64x2 = _BinaryenLoadSplatVec64x2(),\n  LoadI8ToI16x8 = _BinaryenLoadExtSVec8x8ToVecI16x8(),\n  LoadU8ToU16x8 = _BinaryenLoadExtUVec8x8ToVecI16x8(),\n  LoadI16ToI32x4 = _BinaryenLoadExtSVec16x4ToVecI32x4(),\n  LoadU16ToU32x4 = _BinaryenLoadExtUVec16x4ToVecI32x4(),\n  LoadI32ToI64x2 = _BinaryenLoadExtSVec32x2ToVecI64x2(),\n  LoadU32ToU64x2 = _BinaryenLoadExtUVec32x2ToVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return _BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\n        : _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr)\n        : _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, typeName, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return _BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return _BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    type: FunctionRef\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddEvent(this.ref, cStr, attribute, type);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    eventType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, eventType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    try {\n      _BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = _BinaryenFunctionGetBody(func);\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = _BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport function hasSideEffects(expr: ExpressionRef): bool {\n  // TODO: there's more\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.LocalGet:\n    case ExpressionId.GlobalGet:\n    case ExpressionId.Const:\n    case ExpressionId.Nop: {\n      return false;\n    }\n    case ExpressionId.Block: {\n      for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n        if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n      }\n      return false;\n    }\n    case ExpressionId.If: {\n      return hasSideEffects(_BinaryenIfGetCondition(expr))\n          || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n          || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n    }\n    case ExpressionId.Unary: {\n      return hasSideEffects(_BinaryenUnaryGetValue(expr));\n    }\n    case ExpressionId.Binary: {\n      return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n          || hasSideEffects(_BinaryenBinaryGetRight(expr));\n    }\n    case ExpressionId.Drop: {\n      return hasSideEffects(_BinaryenDropGetValue(expr));\n    }\n    case ExpressionId.Select: {\n      return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n          || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n          || hasSideEffects(_BinaryenSelectGetCondition(expr));\n    }\n  }\n  return true;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(_BinaryenSIMDTernaryGetA(expr), data);\n      visit(_BinaryenSIMDTernaryGetB(expr), data);\n      visit(_BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(_BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(_BinaryenTryGetBody(expr), data);\n      visit(_BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i = 0, n = _BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(_BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(_BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(_BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift()! : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.This_expression_is_not_constructable,\n            operand.range\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: TypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  ExportDefaultStatement,\n  Token,\n  ParameterNode\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ref: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ref: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ref: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ref: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? elementsByDeclaration.get(declaration)!\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\n      CommonSymbols.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonSymbols.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonSymbols.I8);\n    this.registerWrapperClass(Type.i16, CommonSymbols.I16);\n    this.registerWrapperClass(Type.i32, CommonSymbols.I32);\n    this.registerWrapperClass(Type.i64, CommonSymbols.I64);\n    this.registerWrapperClass(options.isizeType, CommonSymbols.Isize);\n    this.registerWrapperClass(Type.u8, CommonSymbols.U8);\n    this.registerWrapperClass(Type.u16, CommonSymbols.U16);\n    this.registerWrapperClass(Type.u32, CommonSymbols.U32);\n    this.registerWrapperClass(Type.u64, CommonSymbols.U64);\n    this.registerWrapperClass(options.usizeType, CommonSymbols.Usize);\n    this.registerWrapperClass(Type.bool, CommonSymbols.Bool);\n    this.registerWrapperClass(Type.f32, CommonSymbols.F32);\n    this.registerWrapperClass(Type.f64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonSymbols.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonSymbols.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = exports.get(\"default\")!;\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = members.get(name)!;\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              element.identifierNode.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, element.identifierNode.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name)!;\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An resolved index signature. */\nexport class IndexSignature extends VariableLikeElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = instanceMembers.get(name)!;\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let type = (<Field>member).type;\n          if (type.is(TypeFlags.REFERENCE)) {\n            if ((current = type.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(10), numArguments.toString(10)\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = contextualTypeArguments.get(name)!;\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = (<NamedTypeNode>node).name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = ctxTypes.get(name)!;\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      if (parameterNodes !== null && parameterNodes.length) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return wrapperClasses.get(type)!;\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let elementExpression = assert(this.currentElementExpression);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = wrapperClasses.get(returnType)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      if (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    }\n    var type = this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n      return type ? type.nonNullableType : null;\n    }\n    return this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return wrapperClasses.get(intType)!;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return wrapperClasses.get(fltType)!;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // `unchecked` behaves like parenthesized\n        if (\n          (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, <FunctionPrototype>target, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: return (<FunctionTarget>target).signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return wrapperClasses.get(Type.bool)!;\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = ctxTypes;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              let existing = instanceMembers.get(member.name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                existing.declaration.name.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (kind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(kind)) {\n        overloads.set(kind, operatorInstance);\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (kind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** A host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.ANYREF:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.ANYREF:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n          case TypeKind.ANYREF:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.ANYREF: return \"a\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** A host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","module.exports = __WEBPACK_EXTERNAL_MODULE_binaryen__;"],"sourceRoot":""}